
Delta_WiperV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  080080f8  080080f8  000180f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008358  08008358  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08008358  08008358  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008358  08008358  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008358  08008358  00018358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800835c  0800835c  0001835c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a84  2000008c  080083ec  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  080083ec  00020b10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017681  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bc9  00000000  00000000  00037736  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001580  00000000  00000000  0003b300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001378  00000000  00000000  0003c880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018127  00000000  00000000  0003dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013cea  00000000  00000000  00055d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084600  00000000  00000000  00069a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee009  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eac  00000000  00000000  000ee084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	080080e0 	.word	0x080080e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	080080e0 	.word	0x080080e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_Init+0x28>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_Init+0x28>)
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 fb2d 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	2000      	movs	r0, #0
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f004 f8d4 	bl	80052d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fb45 	bl	80017e6 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 fb0d 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000008 	.word	0x20000008
 8001190:	20000004 	.word	0x20000004
 8001194:	20000000 	.word	0x20000000

08001198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_IncTick+0x1c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_IncTick+0x20>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <HAL_IncTick+0x20>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000004 	.word	0x20000004
 80011b8:	200000b8 	.word	0x200000b8

080011bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b02      	ldr	r3, [pc, #8]	; (80011cc <HAL_GetTick+0x10>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	200000b8 	.word	0x200000b8

080011d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e0be      	b.n	8001370 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d109      	bne.n	8001214 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f002 fa7e 	bl	8003710 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f9ab 	bl	8001570 <ADC_ConversionStop_Disable>
 800121a:	4603      	mov	r3, r0
 800121c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	f040 8099 	bne.w	800135e <HAL_ADC_Init+0x18e>
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 8095 	bne.w	800135e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800123c:	f023 0302 	bic.w	r3, r3, #2
 8001240:	f043 0202 	orr.w	r2, r3, #2
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001250:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7b1b      	ldrb	r3, [r3, #12]
 8001256:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001258:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	4313      	orrs	r3, r2
 800125e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001268:	d003      	beq.n	8001272 <HAL_ADC_Init+0xa2>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d102      	bne.n	8001278 <HAL_ADC_Init+0xa8>
 8001272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001276:	e000      	b.n	800127a <HAL_ADC_Init+0xaa>
 8001278:	2300      	movs	r3, #0
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7d1b      	ldrb	r3, [r3, #20]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d119      	bne.n	80012bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7b1b      	ldrb	r3, [r3, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d109      	bne.n	80012a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	3b01      	subs	r3, #1
 8001296:	035a      	lsls	r2, r3, #13
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	e00b      	b.n	80012bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a8:	f043 0220 	orr.w	r2, r3, #32
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	f043 0201 	orr.w	r2, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <HAL_ADC_Init+0x1a8>)
 80012d8:	4013      	ands	r3, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	430b      	orrs	r3, r1
 80012e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ec:	d003      	beq.n	80012f6 <HAL_ADC_Init+0x126>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d104      	bne.n	8001300 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	051b      	lsls	r3, r3, #20
 80012fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	430a      	orrs	r2, r1
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_ADC_Init+0x1ac>)
 800131c:	4013      	ands	r3, r2
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	429a      	cmp	r2, r3
 8001322:	d10b      	bne.n	800133c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	f023 0303 	bic.w	r3, r3, #3
 8001332:	f043 0201 	orr.w	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800133a:	e018      	b.n	800136e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	f023 0312 	bic.w	r3, r3, #18
 8001344:	f043 0210 	orr.w	r2, r3, #16
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	f043 0201 	orr.w	r2, r3, #1
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800135c:	e007      	b.n	800136e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001362:	f043 0210 	orr.w	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800136e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	ffe1f7fd 	.word	0xffe1f7fd
 800137c:	ff1f0efe 	.word	0xff1f0efe

08001380 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001398:	2b01      	cmp	r3, #1
 800139a:	d101      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x20>
 800139c:	2302      	movs	r3, #2
 800139e:	e0dc      	b.n	800155a <HAL_ADC_ConfigChannel+0x1da>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b06      	cmp	r3, #6
 80013ae:	d81c      	bhi.n	80013ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	3b05      	subs	r3, #5
 80013c2:	221f      	movs	r2, #31
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4019      	ands	r1, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3b05      	subs	r3, #5
 80013dc:	fa00 f203 	lsl.w	r2, r0, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	635a      	str	r2, [r3, #52]	; 0x34
 80013e8:	e03c      	b.n	8001464 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d81c      	bhi.n	800142c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	3b23      	subs	r3, #35	; 0x23
 8001404:	221f      	movs	r2, #31
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	4019      	ands	r1, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	3b23      	subs	r3, #35	; 0x23
 800141e:	fa00 f203 	lsl.w	r2, r0, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
 800142a:	e01b      	b.n	8001464 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	3b41      	subs	r3, #65	; 0x41
 800143e:	221f      	movs	r2, #31
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	4019      	ands	r1, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	3b41      	subs	r3, #65	; 0x41
 8001458:	fa00 f203 	lsl.w	r2, r0, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b09      	cmp	r3, #9
 800146a:	d91c      	bls.n	80014a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68d9      	ldr	r1, [r3, #12]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	3b1e      	subs	r3, #30
 800147e:	2207      	movs	r2, #7
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	4019      	ands	r1, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	6898      	ldr	r0, [r3, #8]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	3b1e      	subs	r3, #30
 8001498:	fa00 f203 	lsl.w	r2, r0, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	e019      	b.n	80014da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6919      	ldr	r1, [r3, #16]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	2207      	movs	r2, #7
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	4019      	ands	r1, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6898      	ldr	r0, [r3, #8]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	fa00 f203 	lsl.w	r2, r0, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b10      	cmp	r3, #16
 80014e0:	d003      	beq.n	80014ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014e6:	2b11      	cmp	r3, #17
 80014e8:	d132      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1d      	ldr	r2, [pc, #116]	; (8001564 <HAL_ADC_ConfigChannel+0x1e4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d125      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d126      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001510:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b10      	cmp	r3, #16
 8001518:	d11a      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_ADC_ConfigChannel+0x1e8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a13      	ldr	r2, [pc, #76]	; (800156c <HAL_ADC_ConfigChannel+0x1ec>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	0c9a      	lsrs	r2, r3, #18
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001530:	e002      	b.n	8001538 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3b01      	subs	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f9      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x1b2>
 800153e:	e007      	b.n	8001550 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	f043 0220 	orr.w	r2, r3, #32
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	40012400 	.word	0x40012400
 8001568:	20000008 	.word	0x20000008
 800156c:	431bde83 	.word	0x431bde83

08001570 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b01      	cmp	r3, #1
 8001588:	d127      	bne.n	80015da <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0201 	bic.w	r2, r2, #1
 8001598:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800159a:	f7ff fe0f 	bl	80011bc <HAL_GetTick>
 800159e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015a0:	e014      	b.n	80015cc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015a2:	f7ff fe0b 	bl	80011bc <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d90d      	bls.n	80015cc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	f043 0210 	orr.w	r2, r3, #16
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e007      	b.n	80015dc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d0e3      	beq.n	80015a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4906      	ldr	r1, [pc, #24]	; (800167c <__NVIC_EnableIRQ+0x34>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7ff ff90 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff2d 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff42 	bl	800162c <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff90 	bl	80016d4 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5f 	bl	8001680 <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff35 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa2 	bl	8001738 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b08b      	sub	sp, #44	; 0x2c
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	e127      	b.n	8001a64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001814:	2201      	movs	r2, #1
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	429a      	cmp	r2, r3
 800182e:	f040 8116 	bne.w	8001a5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b12      	cmp	r3, #18
 8001838:	d034      	beq.n	80018a4 <HAL_GPIO_Init+0xa4>
 800183a:	2b12      	cmp	r3, #18
 800183c:	d80d      	bhi.n	800185a <HAL_GPIO_Init+0x5a>
 800183e:	2b02      	cmp	r3, #2
 8001840:	d02b      	beq.n	800189a <HAL_GPIO_Init+0x9a>
 8001842:	2b02      	cmp	r3, #2
 8001844:	d804      	bhi.n	8001850 <HAL_GPIO_Init+0x50>
 8001846:	2b00      	cmp	r3, #0
 8001848:	d031      	beq.n	80018ae <HAL_GPIO_Init+0xae>
 800184a:	2b01      	cmp	r3, #1
 800184c:	d01c      	beq.n	8001888 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800184e:	e048      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001850:	2b03      	cmp	r3, #3
 8001852:	d043      	beq.n	80018dc <HAL_GPIO_Init+0xdc>
 8001854:	2b11      	cmp	r3, #17
 8001856:	d01b      	beq.n	8001890 <HAL_GPIO_Init+0x90>
          break;
 8001858:	e043      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800185a:	4a89      	ldr	r2, [pc, #548]	; (8001a80 <HAL_GPIO_Init+0x280>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d026      	beq.n	80018ae <HAL_GPIO_Init+0xae>
 8001860:	4a87      	ldr	r2, [pc, #540]	; (8001a80 <HAL_GPIO_Init+0x280>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d806      	bhi.n	8001874 <HAL_GPIO_Init+0x74>
 8001866:	4a87      	ldr	r2, [pc, #540]	; (8001a84 <HAL_GPIO_Init+0x284>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d020      	beq.n	80018ae <HAL_GPIO_Init+0xae>
 800186c:	4a86      	ldr	r2, [pc, #536]	; (8001a88 <HAL_GPIO_Init+0x288>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01d      	beq.n	80018ae <HAL_GPIO_Init+0xae>
          break;
 8001872:	e036      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001874:	4a85      	ldr	r2, [pc, #532]	; (8001a8c <HAL_GPIO_Init+0x28c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d019      	beq.n	80018ae <HAL_GPIO_Init+0xae>
 800187a:	4a85      	ldr	r2, [pc, #532]	; (8001a90 <HAL_GPIO_Init+0x290>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d016      	beq.n	80018ae <HAL_GPIO_Init+0xae>
 8001880:	4a84      	ldr	r2, [pc, #528]	; (8001a94 <HAL_GPIO_Init+0x294>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_GPIO_Init+0xae>
          break;
 8001886:	e02c      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e028      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	3304      	adds	r3, #4
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e023      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	3308      	adds	r3, #8
 80018a0:	623b      	str	r3, [r7, #32]
          break;
 80018a2:	e01e      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	330c      	adds	r3, #12
 80018aa:	623b      	str	r3, [r7, #32]
          break;
 80018ac:	e019      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018b6:	2304      	movs	r3, #4
 80018b8:	623b      	str	r3, [r7, #32]
          break;
 80018ba:	e012      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	611a      	str	r2, [r3, #16]
          break;
 80018ce:	e008      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d0:	2308      	movs	r3, #8
 80018d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	615a      	str	r2, [r3, #20]
          break;
 80018da:	e002      	b.n	80018e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2bff      	cmp	r3, #255	; 0xff
 80018e6:	d801      	bhi.n	80018ec <HAL_GPIO_Init+0xec>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	e001      	b.n	80018f0 <HAL_GPIO_Init+0xf0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2bff      	cmp	r3, #255	; 0xff
 80018f6:	d802      	bhi.n	80018fe <HAL_GPIO_Init+0xfe>
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_Init+0x104>
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	3b08      	subs	r3, #8
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	210f      	movs	r1, #15
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	401a      	ands	r2, r3
 8001916:	6a39      	ldr	r1, [r7, #32]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	431a      	orrs	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8096 	beq.w	8001a5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001932:	4b59      	ldr	r3, [pc, #356]	; (8001a98 <HAL_GPIO_Init+0x298>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	4a58      	ldr	r2, [pc, #352]	; (8001a98 <HAL_GPIO_Init+0x298>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6193      	str	r3, [r2, #24]
 800193e:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <HAL_GPIO_Init+0x298>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800194a:	4a54      	ldr	r2, [pc, #336]	; (8001a9c <HAL_GPIO_Init+0x29c>)
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4013      	ands	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4b      	ldr	r2, [pc, #300]	; (8001aa0 <HAL_GPIO_Init+0x2a0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0x19e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4a      	ldr	r2, [pc, #296]	; (8001aa4 <HAL_GPIO_Init+0x2a4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00d      	beq.n	800199a <HAL_GPIO_Init+0x19a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a49      	ldr	r2, [pc, #292]	; (8001aa8 <HAL_GPIO_Init+0x2a8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_GPIO_Init+0x196>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a48      	ldr	r2, [pc, #288]	; (8001aac <HAL_GPIO_Init+0x2ac>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_GPIO_Init+0x192>
 800198e:	2303      	movs	r3, #3
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x1a0>
 8001992:	2304      	movs	r3, #4
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x1a0>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x1a0>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x1a0>
 800199e:	2300      	movs	r3, #0
 80019a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b0:	493a      	ldr	r1, [pc, #232]	; (8001a9c <HAL_GPIO_Init+0x29c>)
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ca:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4938      	ldr	r1, [pc, #224]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]
 80019d6:	e006      	b.n	80019e6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019d8:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	43db      	mvns	r3, r3
 80019e0:	4933      	ldr	r1, [pc, #204]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f2:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	492e      	ldr	r1, [pc, #184]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
 80019fe:	e006      	b.n	8001a0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	4929      	ldr	r1, [pc, #164]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a1a:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	4924      	ldr	r1, [pc, #144]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
 8001a26:	e006      	b.n	8001a36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	491f      	ldr	r1, [pc, #124]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d006      	beq.n	8001a50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	491a      	ldr	r1, [pc, #104]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60cb      	str	r3, [r1, #12]
 8001a4e:	e006      	b.n	8001a5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	4915      	ldr	r1, [pc, #84]	; (8001ab0 <HAL_GPIO_Init+0x2b0>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	3301      	adds	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f47f aed0 	bne.w	8001814 <HAL_GPIO_Init+0x14>
  }
}
 8001a74:	bf00      	nop
 8001a76:	372c      	adds	r7, #44	; 0x2c
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	10210000 	.word	0x10210000
 8001a84:	10110000 	.word	0x10110000
 8001a88:	10120000 	.word	0x10120000
 8001a8c:	10310000 	.word	0x10310000
 8001a90:	10320000 	.word	0x10320000
 8001a94:	10220000 	.word	0x10220000
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	40010800 	.word	0x40010800
 8001aa4:	40010c00 	.word	0x40010c00
 8001aa8:	40011000 	.word	0x40011000
 8001aac:	40011400 	.word	0x40011400
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ad0:	e003      	b.n	8001ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f806 	bl	8001b14 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40010400 	.word	0x40010400

08001b14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b2a:	b08b      	sub	sp, #44	; 0x2c
 8001b2c:	af06      	add	r7, sp, #24
 8001b2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0d3      	b.n	8001ce2 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f004 ff4e 	bl	80069f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2203      	movs	r2, #3
 8001b58:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 fce6 	bl	8003532 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	687e      	ldr	r6, [r7, #4]
 8001b6e:	466d      	mov	r5, sp
 8001b70:	f106 0410 	add.w	r4, r6, #16
 8001b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	602b      	str	r3, [r5, #0]
 8001b7c:	1d33      	adds	r3, r6, #4
 8001b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b80:	6838      	ldr	r0, [r7, #0]
 8001b82:	f001 fcaf 	bl	80034e4 <USB_CoreInit>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0a4      	b.n	8001ce2 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 fce3 	bl	800356a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	e035      	b.n	8001c16 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	015b      	lsls	r3, r3, #5
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3329      	adds	r3, #41	; 0x29
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	015b      	lsls	r3, r3, #5
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3328      	adds	r3, #40	; 0x28
 8001bc2:	7bfa      	ldrb	r2, [r7, #15]
 8001bc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	b291      	uxth	r1, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	015b      	lsls	r3, r3, #5
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3336      	adds	r3, #54	; 0x36
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	015b      	lsls	r3, r3, #5
 8001bde:	4413      	add	r3, r2
 8001be0:	332b      	adds	r3, #43	; 0x2b
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	015b      	lsls	r3, r3, #5
 8001bec:	4413      	add	r3, r2
 8001bee:	3338      	adds	r3, #56	; 0x38
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	015b      	lsls	r3, r3, #5
 8001bfa:	4413      	add	r3, r2
 8001bfc:	333c      	adds	r3, #60	; 0x3c
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	3302      	adds	r3, #2
 8001c08:	015b      	lsls	r3, r3, #5
 8001c0a:	4413      	add	r3, r2
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	3301      	adds	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d3c4      	bcc.n	8001baa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e031      	b.n	8001c8a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	015b      	lsls	r3, r3, #5
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	015b      	lsls	r3, r3, #5
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	015b      	lsls	r3, r3, #5
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	015b      	lsls	r3, r3, #5
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	015b      	lsls	r3, r3, #5
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	330a      	adds	r3, #10
 8001c7c:	015b      	lsls	r3, r3, #5
 8001c7e:	4413      	add	r3, r2
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	3301      	adds	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	7bfa      	ldrb	r2, [r7, #15]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d3c8      	bcc.n	8001c26 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	687e      	ldr	r6, [r7, #4]
 8001c9c:	466d      	mov	r5, sp
 8001c9e:	f106 0410 	add.w	r4, r6, #16
 8001ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	602b      	str	r3, [r5, #0]
 8001caa:	1d33      	adds	r3, r6, #4
 8001cac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cae:	6838      	ldr	r0, [r7, #0]
 8001cb0:	f001 fc67 	bl	8003582 <USB_DevInit>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00d      	b.n	8001ce2 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fc75 	bl	80035ca <USB_DevDisconnect>

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e26c      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 8087 	beq.w	8001e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d0c:	4b92      	ldr	r3, [pc, #584]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d00c      	beq.n	8001d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d18:	4b8f      	ldr	r3, [pc, #572]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d112      	bne.n	8001d4a <HAL_RCC_OscConfig+0x5e>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d30:	d10b      	bne.n	8001d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d32:	4b89      	ldr	r3, [pc, #548]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d06c      	beq.n	8001e18 <HAL_RCC_OscConfig+0x12c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d168      	bne.n	8001e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e246      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x76>
 8001d54:	4b80      	ldr	r3, [pc, #512]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a7f      	ldr	r2, [pc, #508]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	e02e      	b.n	8001dc0 <HAL_RCC_OscConfig+0xd4>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x98>
 8001d6a:	4b7b      	ldr	r3, [pc, #492]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a7a      	ldr	r2, [pc, #488]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b78      	ldr	r3, [pc, #480]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a77      	ldr	r2, [pc, #476]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e01d      	b.n	8001dc0 <HAL_RCC_OscConfig+0xd4>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0xbc>
 8001d8e:	4b72      	ldr	r3, [pc, #456]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a71      	ldr	r2, [pc, #452]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b6f      	ldr	r3, [pc, #444]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a6e      	ldr	r2, [pc, #440]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCC_OscConfig+0xd4>
 8001da8:	4b6b      	ldr	r3, [pc, #428]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a6a      	ldr	r2, [pc, #424]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a67      	ldr	r2, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f9f8 	bl	80011bc <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff f9f4 	bl	80011bc <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1fa      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b5d      	ldr	r3, [pc, #372]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xe4>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff f9e4 	bl	80011bc <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff f9e0 	bl	80011bc <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1e6      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x10c>
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d063      	beq.n	8001eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e26:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e32:	4b49      	ldr	r3, [pc, #292]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d11c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x18c>
 8001e3e:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d116      	bne.n	8001e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	4b43      	ldr	r3, [pc, #268]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_RCC_OscConfig+0x176>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e1ba      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4939      	ldr	r1, [pc, #228]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	e03a      	b.n	8001eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff f999 	bl	80011bc <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f995 	bl	80011bc <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e19b      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4927      	ldr	r1, [pc, #156]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	e015      	b.n	8001eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec2:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f978 	bl	80011bc <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff f974 	bl	80011bc <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e17a      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d03a      	beq.n	8001f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d019      	beq.n	8001f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f08:	f7ff f958 	bl	80011bc <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f10:	f7ff f954 	bl	80011bc <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e15a      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f000 fada 	bl	80024e8 <RCC_Delay>
 8001f34:	e01c      	b.n	8001f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3c:	f7ff f93e 	bl	80011bc <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f42:	e00f      	b.n	8001f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f44:	f7ff f93a 	bl	80011bc <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d908      	bls.n	8001f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e140      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	42420000 	.word	0x42420000
 8001f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f64:	4b9e      	ldr	r3, [pc, #632]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1e9      	bne.n	8001f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80a6 	beq.w	80020ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f82:	4b97      	ldr	r3, [pc, #604]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10d      	bne.n	8001faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	4b94      	ldr	r3, [pc, #592]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a93      	ldr	r2, [pc, #588]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	61d3      	str	r3, [r2, #28]
 8001f9a:	4b91      	ldr	r3, [pc, #580]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b8e      	ldr	r3, [pc, #568]	; (80021e4 <HAL_RCC_OscConfig+0x4f8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b8b      	ldr	r3, [pc, #556]	; (80021e4 <HAL_RCC_OscConfig+0x4f8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a8a      	ldr	r2, [pc, #552]	; (80021e4 <HAL_RCC_OscConfig+0x4f8>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f8fb 	bl	80011bc <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f7ff f8f7 	bl	80011bc <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b64      	cmp	r3, #100	; 0x64
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e0fd      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCC_OscConfig+0x4f8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x312>
 8001ff0:	4b7b      	ldr	r3, [pc, #492]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a7a      	ldr	r2, [pc, #488]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	e02d      	b.n	800205a <HAL_RCC_OscConfig+0x36e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x334>
 8002006:	4b76      	ldr	r3, [pc, #472]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a75      	ldr	r2, [pc, #468]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	4b73      	ldr	r3, [pc, #460]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a72      	ldr	r2, [pc, #456]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6213      	str	r3, [r2, #32]
 800201e:	e01c      	b.n	800205a <HAL_RCC_OscConfig+0x36e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b05      	cmp	r3, #5
 8002026:	d10c      	bne.n	8002042 <HAL_RCC_OscConfig+0x356>
 8002028:	4b6d      	ldr	r3, [pc, #436]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a6c      	ldr	r2, [pc, #432]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6213      	str	r3, [r2, #32]
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4a69      	ldr	r2, [pc, #420]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6213      	str	r3, [r2, #32]
 8002040:	e00b      	b.n	800205a <HAL_RCC_OscConfig+0x36e>
 8002042:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a66      	ldr	r2, [pc, #408]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	6213      	str	r3, [r2, #32]
 800204e:	4b64      	ldr	r3, [pc, #400]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a63      	ldr	r2, [pc, #396]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	f023 0304 	bic.w	r3, r3, #4
 8002058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d015      	beq.n	800208e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7ff f8ab 	bl	80011bc <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7ff f8a7 	bl	80011bc <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	f241 3288 	movw	r2, #5000	; 0x1388
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e0ab      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002080:	4b57      	ldr	r3, [pc, #348]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0ee      	beq.n	800206a <HAL_RCC_OscConfig+0x37e>
 800208c:	e014      	b.n	80020b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7ff f895 	bl	80011bc <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff f891 	bl	80011bc <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e095      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ac:	4b4c      	ldr	r3, [pc, #304]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ee      	bne.n	8002096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d105      	bne.n	80020ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020be:	4b48      	ldr	r3, [pc, #288]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a47      	ldr	r2, [pc, #284]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8081 	beq.w	80021d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d4:	4b42      	ldr	r3, [pc, #264]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d061      	beq.n	80021a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d146      	bne.n	8002176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e8:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <HAL_RCC_OscConfig+0x4fc>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7ff f865 	bl	80011bc <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f6:	f7ff f861 	bl	80011bc <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e067      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002108:	4b35      	ldr	r3, [pc, #212]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f0      	bne.n	80020f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211c:	d108      	bne.n	8002130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800211e:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	492d      	ldr	r1, [pc, #180]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a19      	ldr	r1, [r3, #32]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	430b      	orrs	r3, r1
 8002142:	4927      	ldr	r1, [pc, #156]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <HAL_RCC_OscConfig+0x4fc>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7ff f835 	bl	80011bc <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002156:	f7ff f831 	bl	80011bc <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e037      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x46a>
 8002174:	e02f      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_RCC_OscConfig+0x4fc>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff f81e 	bl	80011bc <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002184:	f7ff f81a 	bl	80011bc <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e020      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002196:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x498>
 80021a2:	e018      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e013      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40007000 	.word	0x40007000
 80021e8:	42420060 	.word	0x42420060

080021ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0d0      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b6a      	ldr	r3, [pc, #424]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d910      	bls.n	8002230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b67      	ldr	r3, [pc, #412]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 0207 	bic.w	r2, r3, #7
 8002216:	4965      	ldr	r1, [pc, #404]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b63      	ldr	r3, [pc, #396]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0b8      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002260:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800226a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	494d      	ldr	r1, [pc, #308]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d040      	beq.n	800230c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d115      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e07f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e073      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e06b      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ca:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f023 0203 	bic.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4936      	ldr	r1, [pc, #216]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7fe ff6e 	bl	80011bc <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7fe ff6a 	bl	80011bc <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e053      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 020c 	and.w	r2, r3, #12
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d1eb      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d210      	bcs.n	800233c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 0207 	bic.w	r2, r3, #7
 8002322:	4922      	ldr	r1, [pc, #136]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b20      	ldr	r3, [pc, #128]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e032      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4916      	ldr	r1, [pc, #88]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	490e      	ldr	r1, [pc, #56]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800237a:	f000 f821 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 800237e:	4601      	mov	r1, r0
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <HAL_RCC_ClockConfig+0x1c8>)
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	fa21 f303 	lsr.w	r3, r1, r3
 8002392:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x1d0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fecc 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40022000 	.word	0x40022000
 80023b0:	40021000 	.word	0x40021000
 80023b4:	0800810c 	.word	0x0800810c
 80023b8:	20000008 	.word	0x20000008
 80023bc:	20000000 	.word	0x20000000

080023c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b490      	push	{r4, r7}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023c6:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023c8:	1d3c      	adds	r4, r7, #4
 80023ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ea:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d002      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x40>
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x46>
 80023fe:	e02d      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002400:	4b1e      	ldr	r3, [pc, #120]	; (800247c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002402:	623b      	str	r3, [r7, #32]
      break;
 8002404:	e02d      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	0c9b      	lsrs	r3, r3, #18
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002412:	4413      	add	r3, r2
 8002414:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002418:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d013      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	0c5b      	lsrs	r3, r3, #17
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002432:	4413      	add	r3, r2
 8002434:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002438:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	4a0f      	ldr	r2, [pc, #60]	; (800247c <HAL_RCC_GetSysClockFreq+0xbc>)
 800243e:	fb02 f203 	mul.w	r2, r2, r3
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
 800244a:	e004      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	4a0c      	ldr	r2, [pc, #48]	; (8002480 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	623b      	str	r3, [r7, #32]
      break;
 800245a:	e002      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <HAL_RCC_GetSysClockFreq+0xbc>)
 800245e:	623b      	str	r3, [r7, #32]
      break;
 8002460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002462:	6a3b      	ldr	r3, [r7, #32]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3728      	adds	r7, #40	; 0x28
 8002468:	46bd      	mov	sp, r7
 800246a:	bc90      	pop	{r4, r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	080080f8 	.word	0x080080f8
 8002474:	08008108 	.word	0x08008108
 8002478:	40021000 	.word	0x40021000
 800247c:	007a1200 	.word	0x007a1200
 8002480:	003d0900 	.word	0x003d0900

08002484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002488:	4b02      	ldr	r3, [pc, #8]	; (8002494 <HAL_RCC_GetHCLKFreq+0x10>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	20000008 	.word	0x20000008

08002498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800249c:	f7ff fff2 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024a0:	4601      	mov	r1, r0
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	4a03      	ldr	r2, [pc, #12]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	0800811c 	.word	0x0800811c

080024c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024c4:	f7ff ffde 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024c8:	4601      	mov	r1, r0
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	0adb      	lsrs	r3, r3, #11
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4a03      	ldr	r2, [pc, #12]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d6:	5cd3      	ldrb	r3, [r2, r3]
 80024d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	0800811c 	.word	0x0800811c

080024e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <RCC_Delay+0x34>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <RCC_Delay+0x38>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0a5b      	lsrs	r3, r3, #9
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002504:	bf00      	nop
  }
  while (Delay --);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1e5a      	subs	r2, r3, #1
 800250a:	60fa      	str	r2, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f9      	bne.n	8002504 <RCC_Delay+0x1c>
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000008 	.word	0x20000008
 8002520:	10624dd3 	.word	0x10624dd3

08002524 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d07d      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002540:	2300      	movs	r3, #0
 8002542:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002544:	4b4f      	ldr	r3, [pc, #316]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002550:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	4a4b      	ldr	r2, [pc, #300]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255a:	61d3      	str	r3, [r2, #28]
 800255c:	4b49      	ldr	r3, [pc, #292]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002568:	2301      	movs	r3, #1
 800256a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	4b46      	ldr	r3, [pc, #280]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d118      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002578:	4b43      	ldr	r3, [pc, #268]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a42      	ldr	r2, [pc, #264]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002584:	f7fe fe1a 	bl	80011bc <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	e008      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258c:	f7fe fe16 	bl	80011bc <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e06d      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259e:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025aa:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d02e      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d027      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025c8:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025d8:	4b2c      	ldr	r3, [pc, #176]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025de:	4a29      	ldr	r2, [pc, #164]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d014      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe fde5 	bl	80011bc <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe fde1 	bl	80011bc <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e036      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ee      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4917      	ldr	r1, [pc, #92]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002626:	4313      	orrs	r3, r2
 8002628:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800262a:	7dfb      	ldrb	r3, [r7, #23]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	4a13      	ldr	r2, [pc, #76]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	490b      	ldr	r1, [pc, #44]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4904      	ldr	r1, [pc, #16]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
 800268c:	42420440 	.word	0x42420440

08002690 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e053      	b.n	800274a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f002 fdbd 	bl	800523c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	ea42 0103 	orr.w	r1, r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	0c1a      	lsrs	r2, r3, #16
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f002 0204 	and.w	r2, r2, #4
 8002728:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002738:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e07f      	b.n	8002866 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f003 fc3a 	bl	8005ff4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002796:	f023 0307 	bic.w	r3, r3, #7
 800279a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3304      	adds	r3, #4
 80027a4:	4619      	mov	r1, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f000 f9c4 	bl	8002b34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d4:	f023 0303 	bic.w	r3, r3, #3
 80027d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	4313      	orrs	r3, r2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80027f2:	f023 030c 	bic.w	r3, r3, #12
 80027f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	4313      	orrs	r3, r2
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	011a      	lsls	r2, r3, #4
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	031b      	lsls	r3, r3, #12
 8002822:	4313      	orrs	r3, r2
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002830:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4313      	orrs	r3, r2
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_TIM_Encoder_Start+0x16>
 800287e:	2b04      	cmp	r3, #4
 8002880:	d008      	beq.n	8002894 <HAL_TIM_Encoder_Start+0x26>
 8002882:	e00f      	b.n	80028a4 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2201      	movs	r2, #1
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f000 f9b3 	bl	8002bf8 <TIM_CCxChannelCmd>
      break;
 8002892:	e016      	b.n	80028c2 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2201      	movs	r2, #1
 800289a:	2104      	movs	r1, #4
 800289c:	4618      	mov	r0, r3
 800289e:	f000 f9ab 	bl	8002bf8 <TIM_CCxChannelCmd>
      break;
 80028a2:	e00e      	b.n	80028c2 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2201      	movs	r2, #1
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 f9a3 	bl	8002bf8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2201      	movs	r2, #1
 80028b8:	2104      	movs	r1, #4
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f99c 	bl	8002bf8 <TIM_CCxChannelCmd>
      break;
 80028c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0201 	orr.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d122      	bne.n	8002938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d11b      	bne.n	8002938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0202 	mvn.w	r2, #2
 8002908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f8f6 	bl	8002b10 <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8e9 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f002 ffc7 	bl	80058c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b04      	cmp	r3, #4
 8002944:	d122      	bne.n	800298c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b04      	cmp	r3, #4
 8002952:	d11b      	bne.n	800298c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0204 	mvn.w	r2, #4
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f8cc 	bl	8002b10 <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f8bf 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f002 ff9d 	bl	80058c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b08      	cmp	r3, #8
 8002998:	d122      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d11b      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0208 	mvn.w	r2, #8
 80029b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2204      	movs	r2, #4
 80029b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f8a2 	bl	8002b10 <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f895 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f002 ff73 	bl	80058c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d122      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d11b      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0210 	mvn.w	r2, #16
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2208      	movs	r2, #8
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f878 	bl	8002b10 <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f86b 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f002 ff49 	bl	80058c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d10e      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d107      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0201 	mvn.w	r2, #1
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f846 	bl	8002aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6a:	2b80      	cmp	r3, #128	; 0x80
 8002a6c:	d10e      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b80      	cmp	r3, #128	; 0x80
 8002a7a:	d107      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f927 	bl	8002cda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d10e      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d107      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f835 	bl	8002b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d107      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0220 	mvn.w	r2, #32
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8f2 	bl	8002cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a29      	ldr	r2, [pc, #164]	; (8002bec <TIM_Base_SetConfig+0xb8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00b      	beq.n	8002b64 <TIM_Base_SetConfig+0x30>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b52:	d007      	beq.n	8002b64 <TIM_Base_SetConfig+0x30>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a26      	ldr	r2, [pc, #152]	; (8002bf0 <TIM_Base_SetConfig+0xbc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_Base_SetConfig+0x30>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a25      	ldr	r2, [pc, #148]	; (8002bf4 <TIM_Base_SetConfig+0xc0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d108      	bne.n	8002b76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <TIM_Base_SetConfig+0xb8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <TIM_Base_SetConfig+0x62>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b84:	d007      	beq.n	8002b96 <TIM_Base_SetConfig+0x62>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <TIM_Base_SetConfig+0xbc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <TIM_Base_SetConfig+0x62>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <TIM_Base_SetConfig+0xc0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a07      	ldr	r2, [pc, #28]	; (8002bec <TIM_Base_SetConfig+0xb8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d103      	bne.n	8002bdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	615a      	str	r2, [r3, #20]
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800

08002bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a1a      	ldr	r2, [r3, #32]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	431a      	orrs	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	621a      	str	r2, [r3, #32]
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e032      	b.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c90:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e03f      	b.n	8002d7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f003 fe00 	bl	8006918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2224      	movs	r2, #36	; 0x24
 8002d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f829 	bl	8002d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695a      	ldr	r2, [r3, #20]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002dc2:	f023 030c 	bic.w	r3, r3, #12
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	68f9      	ldr	r1, [r7, #12]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <UART_SetConfig+0x1ac>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d14e      	bne.n	8002e8e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002df0:	f7ff fb66 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8002df4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009a      	lsls	r2, r3, #2
 8002e00:	441a      	add	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	4a4a      	ldr	r2, [pc, #296]	; (8002f38 <UART_SetConfig+0x1b0>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	0119      	lsls	r1, r3, #4
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009a      	lsls	r2, r3, #2
 8002e20:	441a      	add	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e2c:	4b42      	ldr	r3, [pc, #264]	; (8002f38 <UART_SetConfig+0x1b0>)
 8002e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2064      	movs	r0, #100	; 0x64
 8002e36:	fb00 f303 	mul.w	r3, r0, r3
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	3332      	adds	r3, #50	; 0x32
 8002e40:	4a3d      	ldr	r2, [pc, #244]	; (8002f38 <UART_SetConfig+0x1b0>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e4c:	4419      	add	r1, r3
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	009a      	lsls	r2, r3, #2
 8002e58:	441a      	add	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e64:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <UART_SetConfig+0x1b0>)
 8002e66:	fba3 0302 	umull	r0, r3, r3, r2
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2064      	movs	r0, #100	; 0x64
 8002e6e:	fb00 f303 	mul.w	r3, r0, r3
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	3332      	adds	r3, #50	; 0x32
 8002e78:	4a2f      	ldr	r2, [pc, #188]	; (8002f38 <UART_SetConfig+0x1b0>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	440a      	add	r2, r1
 8002e8a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002e8c:	e04d      	b.n	8002f2a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e8e:	f7ff fb03 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 8002e92:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009a      	lsls	r2, r3, #2
 8002e9e:	441a      	add	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	4a23      	ldr	r2, [pc, #140]	; (8002f38 <UART_SetConfig+0x1b0>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	0119      	lsls	r1, r3, #4
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	009a      	lsls	r2, r3, #2
 8002ebe:	441a      	add	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eca:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <UART_SetConfig+0x1b0>)
 8002ecc:	fba3 0302 	umull	r0, r3, r3, r2
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	2064      	movs	r0, #100	; 0x64
 8002ed4:	fb00 f303 	mul.w	r3, r0, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	3332      	adds	r3, #50	; 0x32
 8002ede:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <UART_SetConfig+0x1b0>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eea:	4419      	add	r1, r3
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009a      	lsls	r2, r3, #2
 8002ef6:	441a      	add	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <UART_SetConfig+0x1b0>)
 8002f04:	fba3 0302 	umull	r0, r3, r3, r2
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	2064      	movs	r0, #100	; 0x64
 8002f0c:	fb00 f303 	mul.w	r3, r0, r3
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	3332      	adds	r3, #50	; 0x32
 8002f16:	4a08      	ldr	r2, [pc, #32]	; (8002f38 <UART_SetConfig+0x1b0>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	f003 020f 	and.w	r2, r3, #15
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	440a      	add	r2, r1
 8002f28:	609a      	str	r2, [r3, #8]
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40013800 	.word	0x40013800
 8002f38:	51eb851f 	.word	0x51eb851f

08002f3c <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	615a      	str	r2, [r3, #20]
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <LL_TIM_Init+0xb0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00b      	beq.n	8003040 <LL_TIM_Init+0x30>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302e:	d007      	beq.n	8003040 <LL_TIM_Init+0x30>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a24      	ldr	r2, [pc, #144]	; (80030c4 <LL_TIM_Init+0xb4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d003      	beq.n	8003040 <LL_TIM_Init+0x30>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a23      	ldr	r2, [pc, #140]	; (80030c8 <LL_TIM_Init+0xb8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d106      	bne.n	800304e <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <LL_TIM_Init+0xb0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00b      	beq.n	800306e <LL_TIM_Init+0x5e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d007      	beq.n	800306e <LL_TIM_Init+0x5e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <LL_TIM_Init+0xb4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d003      	beq.n	800306e <LL_TIM_Init+0x5e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <LL_TIM_Init+0xb8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d106      	bne.n	800307c <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4619      	mov	r1, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff64 	bl	8002f56 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	4619      	mov	r1, r3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff51 	bl	8002f3c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <LL_TIM_Init+0xb0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d105      	bne.n	80030ae <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	7c1b      	ldrb	r3, [r3, #16]
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff ff61 	bl	8002f70 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff ff9f 	bl	8002ff2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40000800 	.word	0x40000800

080030cc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d012      	beq.n	8003108 <LL_TIM_OC_Init+0x3c>
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d802      	bhi.n	80030ec <LL_TIM_OC_Init+0x20>
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d007      	beq.n	80030fa <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80030ea:	e022      	b.n	8003132 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80030ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f0:	d011      	beq.n	8003116 <LL_TIM_OC_Init+0x4a>
 80030f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f6:	d015      	beq.n	8003124 <LL_TIM_OC_Init+0x58>
      break;
 80030f8:	e01b      	b.n	8003132 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f865 	bl	80031cc <OC1Config>
 8003102:	4603      	mov	r3, r0
 8003104:	75fb      	strb	r3, [r7, #23]
      break;
 8003106:	e014      	b.n	8003132 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f8c4 	bl	8003298 <OC2Config>
 8003110:	4603      	mov	r3, r0
 8003112:	75fb      	strb	r3, [r7, #23]
      break;
 8003114:	e00d      	b.n	8003132 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f927 	bl	800336c <OC3Config>
 800311e:	4603      	mov	r3, r0
 8003120:	75fb      	strb	r3, [r7, #23]
      break;
 8003122:	e006      	b.n	8003132 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f98a 	bl	8003440 <OC4Config>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]
      break;
 8003130:	bf00      	nop
  }

  return result;
 8003132:	7dfb      	ldrb	r3, [r7, #23]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	7b12      	ldrb	r2, [r2, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	89d2      	ldrh	r2, [r2, #14]
 800318c:	4313      	orrs	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f023 0201 	bic.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f023 0202 	bic.w	r2, r3, #2
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f023 0201 	bic.w	r2, r3, #1
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1a      	ldr	r2, [pc, #104]	; (8003294 <OC1Config+0xc8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d11e      	bne.n	800326c <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f023 0208 	bic.w	r2, r3, #8
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f023 0204 	bic.w	r2, r3, #4
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4619      	mov	r1, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff fe83 	bl	8002f8a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40012c00 	.word	0x40012c00

08003298 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f023 0210 	bic.w	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f023 0220 	bic.w	r2, r3, #32
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0210 	bic.w	r2, r3, #16
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <OC2Config+0xd0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d11f      	bne.n	8003340 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	019b      	lsls	r3, r3, #6
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	019b      	lsls	r3, r3, #6
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff fe26 	bl	8002fa4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40012c00 	.word	0x40012c00

0800336c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0303 	bic.w	r3, r3, #3
 800339a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a1b      	ldr	r2, [pc, #108]	; (800343c <OC3Config+0xd0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d11f      	bne.n	8003412 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	029b      	lsls	r3, r3, #10
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	029b      	lsls	r3, r3, #10
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	015b      	lsls	r3, r3, #5
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	4619      	mov	r1, r3
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff fdca 	bl	8002fbe <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40012c00 	.word	0x40012c00

08003440 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	031b      	lsls	r3, r3, #12
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	031b      	lsls	r3, r3, #12
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <OC4Config+0xa0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d107      	bne.n	80034b8 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff fd84 	bl	8002fd8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40012c00 	.word	0x40012c00

080034e4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80034e4:	b084      	sub	sp, #16
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	f107 0014 	add.w	r0, r7, #20
 80034f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	b004      	add	sp, #16
 8003502:	4770      	bx	lr

08003504 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800350c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003510:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003518:	b29a      	uxth	r2, r3
 800351a:	89fb      	ldrh	r3, [r7, #14]
 800351c:	4313      	orrs	r3, r2
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800353a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800353e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003546:	b29b      	uxth	r3, r3
 8003548:	b21a      	sxth	r2, r3
 800354a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800354e:	43db      	mvns	r3, r3
 8003550:	b21b      	sxth	r3, r3
 8003552:	4013      	ands	r3, r2
 8003554:	b21b      	sxth	r3, r3
 8003556:	b29a      	uxth	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003582:	b084      	sub	sp, #16
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	f107 0014 	add.w	r0, r7, #20
 8003590:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff ffa5 	bl	8003504 <USB_EnableGlobalInt>

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035c6:	b004      	add	sp, #16
 80035c8:	4770      	bx	lr

080035ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
	...

080035e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	4613      	mov	r3, r2
 80035ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80035f6:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <FATFS_LinkDriverEx+0x90>)
 80035f8:	7a5b      	ldrb	r3, [r3, #9]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d831      	bhi.n	8003664 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003600:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <FATFS_LinkDriverEx+0x90>)
 8003602:	7a5b      	ldrb	r3, [r3, #9]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	4b19      	ldr	r3, [pc, #100]	; (8003670 <FATFS_LinkDriverEx+0x90>)
 800360a:	2100      	movs	r1, #0
 800360c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <FATFS_LinkDriverEx+0x90>)
 8003610:	7a5b      	ldrb	r3, [r3, #9]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	4a16      	ldr	r2, [pc, #88]	; (8003670 <FATFS_LinkDriverEx+0x90>)
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800361e:	4b14      	ldr	r3, [pc, #80]	; (8003670 <FATFS_LinkDriverEx+0x90>)
 8003620:	7a5b      	ldrb	r3, [r3, #9]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <FATFS_LinkDriverEx+0x90>)
 8003628:	4413      	add	r3, r2
 800362a:	79fa      	ldrb	r2, [r7, #7]
 800362c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800362e:	4b10      	ldr	r3, [pc, #64]	; (8003670 <FATFS_LinkDriverEx+0x90>)
 8003630:	7a5b      	ldrb	r3, [r3, #9]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	b2d1      	uxtb	r1, r2
 8003638:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <FATFS_LinkDriverEx+0x90>)
 800363a:	7251      	strb	r1, [r2, #9]
 800363c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800363e:	7dbb      	ldrb	r3, [r7, #22]
 8003640:	3330      	adds	r3, #48	; 0x30
 8003642:	b2da      	uxtb	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	3301      	adds	r3, #1
 800364c:	223a      	movs	r2, #58	; 0x3a
 800364e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3302      	adds	r3, #2
 8003654:	222f      	movs	r2, #47	; 0x2f
 8003656:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	3303      	adds	r3, #3
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8003664:	7dfb      	ldrb	r3, [r7, #23]
}
 8003666:	4618      	mov	r0, r3
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	200000a8 	.word	0x200000a8

08003674 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800367e:	2200      	movs	r2, #0
 8003680:	6839      	ldr	r1, [r7, #0]
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ffac 	bl	80035e0 <FATFS_LinkDriverEx>
 8003688:	4603      	mov	r3, r0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800369a:	1d3b      	adds	r3, r7, #4
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80036a4:	4b18      	ldr	r3, [pc, #96]	; (8003708 <MX_ADC1_Init+0x74>)
 80036a6:	4a19      	ldr	r2, [pc, #100]	; (800370c <MX_ADC1_Init+0x78>)
 80036a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80036aa:	4b17      	ldr	r3, [pc, #92]	; (8003708 <MX_ADC1_Init+0x74>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80036b0:	4b15      	ldr	r3, [pc, #84]	; (8003708 <MX_ADC1_Init+0x74>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <MX_ADC1_Init+0x74>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <MX_ADC1_Init+0x74>)
 80036be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80036c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <MX_ADC1_Init+0x74>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80036ca:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <MX_ADC1_Init+0x74>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80036d0:	480d      	ldr	r0, [pc, #52]	; (8003708 <MX_ADC1_Init+0x74>)
 80036d2:	f7fd fd7d 	bl	80011d0 <HAL_ADC_Init>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80036dc:	f001 fa55 	bl	8004b8a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80036e4:	2301      	movs	r3, #1
 80036e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036ec:	1d3b      	adds	r3, r7, #4
 80036ee:	4619      	mov	r1, r3
 80036f0:	4805      	ldr	r0, [pc, #20]	; (8003708 <MX_ADC1_Init+0x74>)
 80036f2:	f7fd fe45 	bl	8001380 <HAL_ADC_ConfigChannel>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80036fc:	f001 fa45 	bl	8004b8a <Error_Handler>
  }

}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	200000bc 	.word	0x200000bc
 800370c:	40012400 	.word	0x40012400

08003710 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 0310 	add.w	r3, r7, #16
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a14      	ldr	r2, [pc, #80]	; (800377c <HAL_ADC_MspInit+0x6c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d121      	bne.n	8003774 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003730:	4b13      	ldr	r3, [pc, #76]	; (8003780 <HAL_ADC_MspInit+0x70>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	4a12      	ldr	r2, [pc, #72]	; (8003780 <HAL_ADC_MspInit+0x70>)
 8003736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800373a:	6193      	str	r3, [r2, #24]
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_ADC_MspInit+0x70>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003748:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <HAL_ADC_MspInit+0x70>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <HAL_ADC_MspInit+0x70>)
 800374e:	f043 0304 	orr.w	r3, r3, #4
 8003752:	6193      	str	r3, [r2, #24]
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <HAL_ADC_MspInit+0x70>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = CURRENT_SENSE_0_Pin|CURRENT_SENSE_1_Pin|CURRENT_SENSE_2_Pin;
 8003760:	2313      	movs	r3, #19
 8003762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003764:	2303      	movs	r3, #3
 8003766:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003768:	f107 0310 	add.w	r3, r7, #16
 800376c:	4619      	mov	r1, r3
 800376e:	4805      	ldr	r0, [pc, #20]	; (8003784 <HAL_ADC_MspInit+0x74>)
 8003770:	f7fe f846 	bl	8001800 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003774:	bf00      	nop
 8003776:	3720      	adds	r7, #32
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40012400 	.word	0x40012400
 8003780:	40021000 	.word	0x40021000
 8003784:	40010800 	.word	0x40010800

08003788 <LL_TIM_SetCounter>:
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <LL_TIM_GetCounter>:
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <ENCODER_Init>:
ENCODER_TypeDef	ENCODER_0;
ENCODER_TypeDef	ENCODER_1;
ENCODER_TypeDef	ENCODER_2;

void ENCODER_Init()
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
	ENCODER_0.TIM = TIM2;
 80037bc:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <ENCODER_Init+0x78>)
 80037be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037c2:	601a      	str	r2, [r3, #0]
	ENCODER_1.TIM = TIM3;
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <ENCODER_Init+0x7c>)
 80037c6:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <ENCODER_Init+0x80>)
 80037c8:	601a      	str	r2, [r3, #0]
	ENCODER_2.TIM = TIM4;
 80037ca:	4b1c      	ldr	r3, [pc, #112]	; (800383c <ENCODER_Init+0x84>)
 80037cc:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <ENCODER_Init+0x88>)
 80037ce:	601a      	str	r2, [r3, #0]

	ENCODER_SetZero(&ENCODER_0);			// zerowanie zeby nie przekrecic timera podczas dojezdzaniu predkosciowym do krancowek
 80037d0:	4817      	ldr	r0, [pc, #92]	; (8003830 <ENCODER_Init+0x78>)
 80037d2:	f000 f837 	bl	8003844 <ENCODER_SetZero>
	ENCODER_SetZero(&ENCODER_1);
 80037d6:	4817      	ldr	r0, [pc, #92]	; (8003834 <ENCODER_Init+0x7c>)
 80037d8:	f000 f834 	bl	8003844 <ENCODER_SetZero>
	ENCODER_SetZero(&ENCODER_2);
 80037dc:	4817      	ldr	r0, [pc, #92]	; (800383c <ENCODER_Init+0x84>)
 80037de:	f000 f831 	bl	8003844 <ENCODER_SetZero>

//	ENCODER_0.globalAngle = 0;

	ENCODER_0.previousAngle = 0;
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <ENCODER_Init+0x78>)
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	605a      	str	r2, [r3, #4]
	ENCODER_0.actualAngle = 0;
 80037ea:	4b11      	ldr	r3, [pc, #68]	; (8003830 <ENCODER_Init+0x78>)
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
	ENCODER_0.AngularSpeed = 0;
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <ENCODER_Init+0x78>)
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	60da      	str	r2, [r3, #12]

	ENCODER_1.previousAngle = 0;
 80037fa:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <ENCODER_Init+0x7c>)
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	605a      	str	r2, [r3, #4]
	ENCODER_1.actualAngle = 0;
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <ENCODER_Init+0x7c>)
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	609a      	str	r2, [r3, #8]
	ENCODER_1.AngularSpeed = 0;
 800380a:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <ENCODER_Init+0x7c>)
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	60da      	str	r2, [r3, #12]

	ENCODER_2.previousAngle = 0;
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <ENCODER_Init+0x84>)
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	605a      	str	r2, [r3, #4]
	ENCODER_2.actualAngle = 0;
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <ENCODER_Init+0x84>)
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
	ENCODER_2.AngularSpeed = 0;
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <ENCODER_Init+0x84>)
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	2000010c 	.word	0x2000010c
 8003834:	200000fc 	.word	0x200000fc
 8003838:	40000400 	.word	0x40000400
 800383c:	200000ec 	.word	0x200000ec
 8003840:	40000800 	.word	0x40000800

08003844 <ENCODER_SetZero>:

void ENCODER_SetZero(ENCODER_TypeDef* ENCODER)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	LL_TIM_SetCounter(ENCODER->TIM,(uint16_t)(ENCODER_TIM_ZERO_VALUE));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f24c 51ac 	movw	r1, #50604	; 0xc5ac
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff97 	bl	8003788 <LL_TIM_SetCounter>
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <ENCODER_GetAbsoluteAngle>:


float ENCODER_GetAbsoluteAngle(ENCODER_TypeDef* ENCODER)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	int32_t actualCounterValue = (int32_t)LL_TIM_GetCounter(ENCODER->TIM);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff96 	bl	80037a2 <LL_TIM_GetCounter>
 8003876:	4603      	mov	r3, r0
 8003878:	60fb      	str	r3, [r7, #12]
	return (ENCODER_END_ANGLE + (float)(actualCounterValue - ENCODER_TIM_ZERO_VALUE_UINT)/ENCODER_FULL_ANGLE_RESOLUTION);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f5a3 4345 	sub.w	r3, r3, #50432	; 0xc500
 8003880:	3bac      	subs	r3, #172	; 0xac
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fa02 	bl	8000c8c <__aeabi_i2f>
 8003888:	4603      	mov	r3, r0
 800388a:	4907      	ldr	r1, [pc, #28]	; (80038a8 <ENCODER_GetAbsoluteAngle+0x44>)
 800388c:	4618      	mov	r0, r3
 800388e:	f7fd fb05 	bl	8000e9c <__aeabi_fdiv>
 8003892:	4603      	mov	r3, r0
 8003894:	4905      	ldr	r1, [pc, #20]	; (80038ac <ENCODER_GetAbsoluteAngle+0x48>)
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd f944 	bl	8000b24 <__addsf3>
 800389c:	4603      	mov	r3, r0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	43b75555 	.word	0x43b75555
 80038ac:	42451eb8 	.word	0x42451eb8

080038b0 <ENCODER_UpdateAbsoluteAngle>:

void ENCODER_UpdateAbsoluteAngle(ENCODER_TypeDef* ENCODER)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	ENCODER->previousAngle = ENCODER->actualAngle;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	605a      	str	r2, [r3, #4]
	ENCODER->actualAngle = ENCODER_GetAbsoluteAngle(ENCODER);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ffcf 	bl	8003864 <ENCODER_GetAbsoluteAngle>
 80038c6:	4602      	mov	r2, r0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	609a      	str	r2, [r3, #8]
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	0000      	movs	r0, r0
	...

080038d8 <ENCODER_UpdateAbsoluteAngularVelocity>:
void  ENCODER_UpdateAbsoluteAngularVelocity(ENCODER_TypeDef* ENCODER)
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	ENCODER->AngularSpeed = (ENCODER->actualAngle - ENCODER->previousAngle)/dt;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4619      	mov	r1, r3
 80038ea:	4610      	mov	r0, r2
 80038ec:	f7fd f918 	bl	8000b20 <__aeabi_fsub>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fc fd90 	bl	8000418 <__aeabi_f2d>
 80038f8:	a309      	add	r3, pc, #36	; (adr r3, 8003920 <ENCODER_UpdateAbsoluteAngularVelocity+0x48>)
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	f7fc ff0d 	bl	800071c <__aeabi_ddiv>
 8003902:	4603      	mov	r3, r0
 8003904:	460c      	mov	r4, r1
 8003906:	4618      	mov	r0, r3
 8003908:	4621      	mov	r1, r4
 800390a:	f7fd f8b5 	bl	8000a78 <__aeabi_d2f>
 800390e:	4602      	mov	r2, r0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	60da      	str	r2, [r3, #12]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bd90      	pop	{r4, r7, pc}
 800391c:	f3af 8000 	nop.w
 8003920:	47ae147b 	.word	0x47ae147b
 8003924:	3f847ae1 	.word	0x3f847ae1

08003928 <ENCODER_GetAbsoluteAngularVelocity>:

float ENCODER_GetAbsoluteAngularVelocity(ENCODER_TypeDef* ENCODER)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	return ENCODER->AngularSpeed;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr
	...

08003940 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003944:	4904      	ldr	r1, [pc, #16]	; (8003958 <MX_FATFS_Init+0x18>)
 8003946:	4805      	ldr	r0, [pc, #20]	; (800395c <MX_FATFS_Init+0x1c>)
 8003948:	f7ff fe94 	bl	8003674 <FATFS_LinkDriver>
 800394c:	4603      	mov	r3, r0
 800394e:	461a      	mov	r2, r3
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <MX_FATFS_Init+0x20>)
 8003952:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8003954:	bf00      	nop
 8003956:	bd80      	pop	{r7, pc}
 8003958:	2000011c 	.word	0x2000011c
 800395c:	20000010 	.word	0x20000010
 8003960:	20000120 	.word	0x20000120

08003964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396a:	f107 0310 	add.w	r3, r7, #16
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003978:	4b5e      	ldr	r3, [pc, #376]	; (8003af4 <MX_GPIO_Init+0x190>)
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	4a5d      	ldr	r2, [pc, #372]	; (8003af4 <MX_GPIO_Init+0x190>)
 800397e:	f043 0310 	orr.w	r3, r3, #16
 8003982:	6193      	str	r3, [r2, #24]
 8003984:	4b5b      	ldr	r3, [pc, #364]	; (8003af4 <MX_GPIO_Init+0x190>)
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003990:	4b58      	ldr	r3, [pc, #352]	; (8003af4 <MX_GPIO_Init+0x190>)
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	4a57      	ldr	r2, [pc, #348]	; (8003af4 <MX_GPIO_Init+0x190>)
 8003996:	f043 0320 	orr.w	r3, r3, #32
 800399a:	6193      	str	r3, [r2, #24]
 800399c:	4b55      	ldr	r3, [pc, #340]	; (8003af4 <MX_GPIO_Init+0x190>)
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a8:	4b52      	ldr	r3, [pc, #328]	; (8003af4 <MX_GPIO_Init+0x190>)
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	4a51      	ldr	r2, [pc, #324]	; (8003af4 <MX_GPIO_Init+0x190>)
 80039ae:	f043 0304 	orr.w	r3, r3, #4
 80039b2:	6193      	str	r3, [r2, #24]
 80039b4:	4b4f      	ldr	r3, [pc, #316]	; (8003af4 <MX_GPIO_Init+0x190>)
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	607b      	str	r3, [r7, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c0:	4b4c      	ldr	r3, [pc, #304]	; (8003af4 <MX_GPIO_Init+0x190>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4a4b      	ldr	r2, [pc, #300]	; (8003af4 <MX_GPIO_Init+0x190>)
 80039c6:	f043 0308 	orr.w	r3, r3, #8
 80039ca:	6193      	str	r3, [r2, #24]
 80039cc:	4b49      	ldr	r3, [pc, #292]	; (8003af4 <MX_GPIO_Init+0x190>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_2A_GPIO_Port, MOTOR_2A_Pin, GPIO_PIN_RESET);
 80039d8:	2200      	movs	r2, #0
 80039da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039de:	4846      	ldr	r0, [pc, #280]	; (8003af8 <MX_GPIO_Init+0x194>)
 80039e0:	f7fe f868 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_2B_Pin|MOTOR_1B_Pin|MOTOR_1A_Pin|MOTOR_0B_Pin 
 80039e4:	2200      	movs	r2, #0
 80039e6:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 80039ea:	4844      	ldr	r0, [pc, #272]	; (8003afc <MX_GPIO_Init+0x198>)
 80039ec:	f7fe f862 	bl	8001ab4 <HAL_GPIO_WritePin>
                          |MOTOR_0A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS1_Pin|SPI2_CS0_Pin|TOOL_0_Pin, GPIO_PIN_RESET);
 80039f0:	2200      	movs	r2, #0
 80039f2:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80039f6:	4842      	ldr	r0, [pc, #264]	; (8003b00 <MX_GPIO_Init+0x19c>)
 80039f8:	f7fe f85c 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_2A_Pin;
 80039fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a02:	2301      	movs	r3, #1
 8003a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_2A_GPIO_Port, &GPIO_InitStruct);
 8003a0e:	f107 0310 	add.w	r3, r7, #16
 8003a12:	4619      	mov	r1, r3
 8003a14:	4838      	ldr	r0, [pc, #224]	; (8003af8 <MX_GPIO_Init+0x194>)
 8003a16:	f7fd fef3 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = USER_ENCODER_B_Pin|USER_ENCODER_A_Pin;
 8003a1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a28:	f107 0310 	add.w	r3, r7, #16
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4832      	ldr	r0, [pc, #200]	; (8003af8 <MX_GPIO_Init+0x194>)
 8003a30:	f7fd fee6 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENDSTOP_2_Pin;
 8003a34:	2320      	movs	r3, #32
 8003a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003a38:	4b32      	ldr	r3, [pc, #200]	; (8003b04 <MX_GPIO_Init+0x1a0>)
 8003a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENDSTOP_2_GPIO_Port, &GPIO_InitStruct);
 8003a40:	f107 0310 	add.w	r3, r7, #16
 8003a44:	4619      	mov	r1, r3
 8003a46:	482d      	ldr	r0, [pc, #180]	; (8003afc <MX_GPIO_Init+0x198>)
 8003a48:	f7fd feda 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = MOTOR_2B_Pin|MOTOR_1B_Pin|MOTOR_1A_Pin|MOTOR_0B_Pin 
 8003a4c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8003a50:	613b      	str	r3, [r7, #16]
                          |MOTOR_0A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a52:	2301      	movs	r3, #1
 8003a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5e:	f107 0310 	add.w	r3, r7, #16
 8003a62:	4619      	mov	r1, r3
 8003a64:	4825      	ldr	r0, [pc, #148]	; (8003afc <MX_GPIO_Init+0x198>)
 8003a66:	f7fd fecb 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENDSTOP_1_Pin|ENDSTOP_0_Pin;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003a6e:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <MX_GPIO_Init+0x1a0>)
 8003a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a76:	f107 0310 	add.w	r3, r7, #16
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4820      	ldr	r0, [pc, #128]	; (8003b00 <MX_GPIO_Init+0x19c>)
 8003a7e:	f7fd febf 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS0_Pin|TOOL_0_Pin;
 8003a82:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8003a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a90:	2303      	movs	r3, #3
 8003a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a94:	f107 0310 	add.w	r3, r7, #16
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4819      	ldr	r0, [pc, #100]	; (8003b00 <MX_GPIO_Init+0x19c>)
 8003a9c:	f7fd feb0 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_ENCODER_BUTTON_Pin|TOOL_1_Pin;
 8003aa0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aae:	f107 0310 	add.w	r3, r7, #16
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4812      	ldr	r0, [pc, #72]	; (8003b00 <MX_GPIO_Init+0x19c>)
 8003ab6:	f7fd fea3 	bl	8001800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003aba:	2200      	movs	r2, #0
 8003abc:	2100      	movs	r1, #0
 8003abe:	2006      	movs	r0, #6
 8003ac0:	f7fd fe67 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003ac4:	2006      	movs	r0, #6
 8003ac6:	f7fd fe80 	bl	80017ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003aca:	2200      	movs	r2, #0
 8003acc:	2100      	movs	r1, #0
 8003ace:	2007      	movs	r0, #7
 8003ad0:	f7fd fe5f 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003ad4:	2007      	movs	r0, #7
 8003ad6:	f7fd fe78 	bl	80017ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003ada:	2200      	movs	r2, #0
 8003adc:	2100      	movs	r1, #0
 8003ade:	2017      	movs	r0, #23
 8003ae0:	f7fd fe57 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ae4:	2017      	movs	r0, #23
 8003ae6:	f7fd fe70 	bl	80017ca <HAL_NVIC_EnableIRQ>

}
 8003aea:	bf00      	nop
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40011000 	.word	0x40011000
 8003afc:	40010800 	.word	0x40010800
 8003b00:	40010c00 	.word	0x40010c00
 8003b04:	10310000 	.word	0x10310000

08003b08 <delta_calcAngleYZ>:
#define tan30  		(1/sqrt3)

 // inverse kinematics
 // helper functions, calculates angle theta1 (for YZ-pane)
 int delta_calcAngleYZ(float x0, float y0, float z0, float* theta)
 {
 8003b08:	b5b0      	push	{r4, r5, r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]

     float y1 = -0.5 * 0.57735 * f; // f/2 * tg 30
 8003b16:	4bb8      	ldr	r3, [pc, #736]	; (8003df8 <delta_calcAngleYZ+0x2f0>)
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
     y0 -= 0.5 * 0.57735    * e;    // shift center to edge
 8003b1a:	68b8      	ldr	r0, [r7, #8]
 8003b1c:	f7fc fc7c 	bl	8000418 <__aeabi_f2d>
 8003b20:	a3ad      	add	r3, pc, #692	; (adr r3, 8003dd8 <delta_calcAngleYZ+0x2d0>)
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	f7fc fb17 	bl	8000158 <__aeabi_dsub>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	4618      	mov	r0, r3
 8003b30:	4621      	mov	r1, r4
 8003b32:	f7fc ffa1 	bl	8000a78 <__aeabi_d2f>
 8003b36:	4603      	mov	r3, r0
 8003b38:	60bb      	str	r3, [r7, #8]

     // z = a + b*y
     float a = (x0*x0 + y0*y0 + z0*z0 +rf*rf - re*re - y1*y1)/(2*z0);
 8003b3a:	68f9      	ldr	r1, [r7, #12]
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7fd f8f9 	bl	8000d34 <__aeabi_fmul>
 8003b42:	4603      	mov	r3, r0
 8003b44:	461c      	mov	r4, r3
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	68b8      	ldr	r0, [r7, #8]
 8003b4a:	f7fd f8f3 	bl	8000d34 <__aeabi_fmul>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4619      	mov	r1, r3
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7fc ffe6 	bl	8000b24 <__addsf3>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	461c      	mov	r4, r3
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fd f8e8 	bl	8000d34 <__aeabi_fmul>
 8003b64:	4603      	mov	r3, r0
 8003b66:	4619      	mov	r1, r3
 8003b68:	4620      	mov	r0, r4
 8003b6a:	f7fc ffdb 	bl	8000b24 <__addsf3>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fc fc51 	bl	8000418 <__aeabi_f2d>
 8003b76:	a39a      	add	r3, pc, #616	; (adr r3, 8003de0 <delta_calcAngleYZ+0x2d8>)
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	f7fc faee 	bl	800015c <__adddf3>
 8003b80:	4603      	mov	r3, r0
 8003b82:	460c      	mov	r4, r1
 8003b84:	4618      	mov	r0, r3
 8003b86:	4621      	mov	r1, r4
 8003b88:	a397      	add	r3, pc, #604	; (adr r3, 8003de8 <delta_calcAngleYZ+0x2e0>)
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	f7fc fae3 	bl	8000158 <__aeabi_dsub>
 8003b92:	4603      	mov	r3, r0
 8003b94:	460c      	mov	r4, r1
 8003b96:	4625      	mov	r5, r4
 8003b98:	461c      	mov	r4, r3
 8003b9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b9e:	f7fd f8c9 	bl	8000d34 <__aeabi_fmul>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fc fc37 	bl	8000418 <__aeabi_f2d>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4620      	mov	r0, r4
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	f7fc fad1 	bl	8000158 <__aeabi_dsub>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	460c      	mov	r4, r1
 8003bba:	4625      	mov	r5, r4
 8003bbc:	461c      	mov	r4, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fc ffae 	bl	8000b24 <__addsf3>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fc fc24 	bl	8000418 <__aeabi_f2d>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	f7fc fda0 	bl	800071c <__aeabi_ddiv>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	460c      	mov	r4, r1
 8003be0:	4618      	mov	r0, r3
 8003be2:	4621      	mov	r1, r4
 8003be4:	f7fc ff48 	bl	8000a78 <__aeabi_d2f>
 8003be8:	4603      	mov	r3, r0
 8003bea:	623b      	str	r3, [r7, #32]
     float b = (y1-y0)/z0;
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bf0:	f7fc ff96 	bl	8000b20 <__aeabi_fsub>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fd f94f 	bl	8000e9c <__aeabi_fdiv>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	61fb      	str	r3, [r7, #28]

     // discriminant
     float d = -(a+b*y1)*(a+b*y1)+rf*(b*b*rf+rf);
 8003c02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c04:	69f8      	ldr	r0, [r7, #28]
 8003c06:	f7fd f895 	bl	8000d34 <__aeabi_fmul>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	6a39      	ldr	r1, [r7, #32]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fc ff88 	bl	8000b24 <__addsf3>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8003c1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c1c:	69f8      	ldr	r0, [r7, #28]
 8003c1e:	f7fd f889 	bl	8000d34 <__aeabi_fmul>
 8003c22:	4603      	mov	r3, r0
 8003c24:	6a39      	ldr	r1, [r7, #32]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fc ff7c 	bl	8000b24 <__addsf3>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4620      	mov	r0, r4
 8003c32:	f7fd f87f 	bl	8000d34 <__aeabi_fmul>
 8003c36:	4603      	mov	r3, r0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fc fbed 	bl	8000418 <__aeabi_f2d>
 8003c3e:	4604      	mov	r4, r0
 8003c40:	460d      	mov	r5, r1
 8003c42:	69f9      	ldr	r1, [r7, #28]
 8003c44:	69f8      	ldr	r0, [r7, #28]
 8003c46:	f7fd f875 	bl	8000d34 <__aeabi_fmul>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fc fbe3 	bl	8000418 <__aeabi_f2d>
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	4b69      	ldr	r3, [pc, #420]	; (8003dfc <delta_calcAngleYZ+0x2f4>)
 8003c58:	f7fc fc36 	bl	80004c8 <__aeabi_dmul>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	4b64      	ldr	r3, [pc, #400]	; (8003dfc <delta_calcAngleYZ+0x2f4>)
 8003c6a:	f7fc fa77 	bl	800015c <__adddf3>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	4b60      	ldr	r3, [pc, #384]	; (8003dfc <delta_calcAngleYZ+0x2f4>)
 8003c7c:	f7fc fc24 	bl	80004c8 <__aeabi_dmul>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4620      	mov	r0, r4
 8003c86:	4629      	mov	r1, r5
 8003c88:	f7fc fa68 	bl	800015c <__adddf3>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	460c      	mov	r4, r1
 8003c90:	4618      	mov	r0, r3
 8003c92:	4621      	mov	r1, r4
 8003c94:	f7fc fef0 	bl	8000a78 <__aeabi_d2f>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	61bb      	str	r3, [r7, #24]
     if (d < 0) return -1; // non-existing point
 8003c9c:	f04f 0100 	mov.w	r1, #0
 8003ca0:	69b8      	ldr	r0, [r7, #24]
 8003ca2:	f7fd f9e5 	bl	8001070 <__aeabi_fcmplt>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <delta_calcAngleYZ+0x1aa>
 8003cac:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb0:	e08d      	b.n	8003dce <delta_calcAngleYZ+0x2c6>

     float yj = (y1 - a*b - sqrt(d))/(b*b + 1); // choosing outer point
 8003cb2:	69f9      	ldr	r1, [r7, #28]
 8003cb4:	6a38      	ldr	r0, [r7, #32]
 8003cb6:	f7fd f83d 	bl	8000d34 <__aeabi_fmul>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cc0:	f7fc ff2e 	bl	8000b20 <__aeabi_fsub>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fc fba6 	bl	8000418 <__aeabi_f2d>
 8003ccc:	4604      	mov	r4, r0
 8003cce:	460d      	mov	r5, r1
 8003cd0:	69b8      	ldr	r0, [r7, #24]
 8003cd2:	f7fc fba1 	bl	8000418 <__aeabi_f2d>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f003 f94d 	bl	8006f7c <sqrt>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	4629      	mov	r1, r5
 8003cea:	f7fc fa35 	bl	8000158 <__aeabi_dsub>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	460c      	mov	r4, r1
 8003cf2:	4625      	mov	r5, r4
 8003cf4:	461c      	mov	r4, r3
 8003cf6:	69f9      	ldr	r1, [r7, #28]
 8003cf8:	69f8      	ldr	r0, [r7, #28]
 8003cfa:	f7fd f81b 	bl	8000d34 <__aeabi_fmul>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fc ff0d 	bl	8000b24 <__addsf3>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fc fb83 	bl	8000418 <__aeabi_f2d>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4620      	mov	r0, r4
 8003d18:	4629      	mov	r1, r5
 8003d1a:	f7fc fcff 	bl	800071c <__aeabi_ddiv>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	460c      	mov	r4, r1
 8003d22:	4618      	mov	r0, r3
 8003d24:	4621      	mov	r1, r4
 8003d26:	f7fc fea7 	bl	8000a78 <__aeabi_d2f>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	617b      	str	r3, [r7, #20]
     float zj = a + b*yj;
 8003d2e:	6979      	ldr	r1, [r7, #20]
 8003d30:	69f8      	ldr	r0, [r7, #28]
 8003d32:	f7fc ffff 	bl	8000d34 <__aeabi_fmul>
 8003d36:	4603      	mov	r3, r0
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6a38      	ldr	r0, [r7, #32]
 8003d3c:	f7fc fef2 	bl	8000b24 <__addsf3>
 8003d40:	4603      	mov	r3, r0
 8003d42:	613b      	str	r3, [r7, #16]

     *theta = (float)(180.0*atan(-zj/(y1 - yj))/pi + ((yj>y1)?180.0:0.0));
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8003d4a:	6979      	ldr	r1, [r7, #20]
 8003d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d4e:	f7fc fee7 	bl	8000b20 <__aeabi_fsub>
 8003d52:	4603      	mov	r3, r0
 8003d54:	4619      	mov	r1, r3
 8003d56:	4620      	mov	r0, r4
 8003d58:	f7fd f8a0 	bl	8000e9c <__aeabi_fdiv>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fc fb5a 	bl	8000418 <__aeabi_f2d>
 8003d64:	4603      	mov	r3, r0
 8003d66:	460c      	mov	r4, r1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	f002 ff08 	bl	8006b80 <atan>
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <delta_calcAngleYZ+0x2f4>)
 8003d76:	f7fc fba7 	bl	80004c8 <__aeabi_dmul>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	4618      	mov	r0, r3
 8003d80:	4621      	mov	r1, r4
 8003d82:	a31b      	add	r3, pc, #108	; (adr r3, 8003df0 <delta_calcAngleYZ+0x2e8>)
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f7fc fcc8 	bl	800071c <__aeabi_ddiv>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	460c      	mov	r4, r1
 8003d90:	4625      	mov	r5, r4
 8003d92:	461c      	mov	r4, r3
 8003d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d96:	6978      	ldr	r0, [r7, #20]
 8003d98:	f7fd f988 	bl	80010ac <__aeabi_fcmpgt>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <delta_calcAngleYZ+0x2a2>
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	4915      	ldr	r1, [pc, #84]	; (8003dfc <delta_calcAngleYZ+0x2f4>)
 8003da8:	e003      	b.n	8003db2 <delta_calcAngleYZ+0x2aa>
 8003daa:	f04f 0000 	mov.w	r0, #0
 8003dae:	f04f 0100 	mov.w	r1, #0
 8003db2:	4622      	mov	r2, r4
 8003db4:	462b      	mov	r3, r5
 8003db6:	f7fc f9d1 	bl	800015c <__adddf3>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	f7fc fe59 	bl	8000a78 <__aeabi_d2f>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	601a      	str	r2, [r3, #0]

     return 0;
 8003dcc:	2300      	movs	r3, #0
 }
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3728      	adds	r7, #40	; 0x28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	38c416c6 	.word	0x38c416c6
 8003ddc:	40494146 	.word	0x40494146
 8003de0:	00000000 	.word	0x00000000
 8003de4:	40dfa400 	.word	0x40dfa400
 8003de8:	00000000 	.word	0x00000000
 8003dec:	41069220 	.word	0x41069220
 8003df0:	542fe938 	.word	0x542fe938
 8003df4:	400921fb 	.word	0x400921fb
 8003df8:	c2ee430b 	.word	0xc2ee430b
 8003dfc:	40668000 	.word	0x40668000

08003e00 <delta_calcForward>:

 int delta_calcForward(float theta1, float theta2, float theta3, float* x0, float* y0, float* z0)
 {
 8003e00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e04:	b09a      	sub	sp, #104	; 0x68
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
 8003e0e:	603b      	str	r3, [r7, #0]
     float t = (f-e)*tan30/2;
 8003e10:	4bb9      	ldr	r3, [pc, #740]	; (80040f8 <delta_calcForward+0x2f8>)
 8003e12:	667b      	str	r3, [r7, #100]	; 0x64
     float dtr = pi/(float)180.0;
 8003e14:	4bb9      	ldr	r3, [pc, #740]	; (80040fc <delta_calcForward+0x2fc>)
 8003e16:	663b      	str	r3, [r7, #96]	; 0x60

     theta1 *= dtr;
 8003e18:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7fc ff8a 	bl	8000d34 <__aeabi_fmul>
 8003e20:	4603      	mov	r3, r0
 8003e22:	60fb      	str	r3, [r7, #12]
     theta2 *= dtr;
 8003e24:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003e26:	68b8      	ldr	r0, [r7, #8]
 8003e28:	f7fc ff84 	bl	8000d34 <__aeabi_fmul>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	60bb      	str	r3, [r7, #8]
     theta3 *= dtr;
 8003e30:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fc ff7e 	bl	8000d34 <__aeabi_fmul>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	607b      	str	r3, [r7, #4]

     float y1 = -(t + rf*cos(theta1));
 8003e3c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003e3e:	f7fc faeb 	bl	8000418 <__aeabi_f2d>
 8003e42:	4604      	mov	r4, r0
 8003e44:	460d      	mov	r5, r1
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7fc fae6 	bl	8000418 <__aeabi_f2d>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4610      	mov	r0, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	f003 f81e 	bl	8006e94 <cos>
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	4ba8      	ldr	r3, [pc, #672]	; (8004100 <delta_calcForward+0x300>)
 8003e5e:	f7fc fb33 	bl	80004c8 <__aeabi_dmul>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4620      	mov	r0, r4
 8003e68:	4629      	mov	r1, r5
 8003e6a:	f7fc f977 	bl	800015c <__adddf3>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	460c      	mov	r4, r1
 8003e72:	4618      	mov	r0, r3
 8003e74:	4621      	mov	r1, r4
 8003e76:	f7fc fdff 	bl	8000a78 <__aeabi_d2f>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003e80:	65fb      	str	r3, [r7, #92]	; 0x5c
     float z1 = -rf*sin(theta1);
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f7fc fac8 	bl	8000418 <__aeabi_f2d>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	4621      	mov	r1, r4
 8003e90:	f003 f83a 	bl	8006f08 <sin>
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	4b9a      	ldr	r3, [pc, #616]	; (8004104 <delta_calcForward+0x304>)
 8003e9a:	f7fc fb15 	bl	80004c8 <__aeabi_dmul>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	f7fc fde7 	bl	8000a78 <__aeabi_d2f>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	65bb      	str	r3, [r7, #88]	; 0x58

     float y2 = (t + rf*cos(theta2))*sin30;
 8003eae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003eb0:	f7fc fab2 	bl	8000418 <__aeabi_f2d>
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	460d      	mov	r5, r1
 8003eb8:	68b8      	ldr	r0, [r7, #8]
 8003eba:	f7fc faad 	bl	8000418 <__aeabi_f2d>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f002 ffe5 	bl	8006e94 <cos>
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	4b8c      	ldr	r3, [pc, #560]	; (8004100 <delta_calcForward+0x300>)
 8003ed0:	f7fc fafa 	bl	80004c8 <__aeabi_dmul>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4620      	mov	r0, r4
 8003eda:	4629      	mov	r1, r5
 8003edc:	f7fc f93e 	bl	800015c <__adddf3>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	4b86      	ldr	r3, [pc, #536]	; (8004108 <delta_calcForward+0x308>)
 8003eee:	f7fc faeb 	bl	80004c8 <__aeabi_dmul>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	4621      	mov	r1, r4
 8003efa:	f7fc fdbd 	bl	8000a78 <__aeabi_d2f>
 8003efe:	4603      	mov	r3, r0
 8003f00:	657b      	str	r3, [r7, #84]	; 0x54
     float x2 = y2*tan60;
 8003f02:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003f04:	f7fc fa88 	bl	8000418 <__aeabi_f2d>
 8003f08:	a379      	add	r3, pc, #484	; (adr r3, 80040f0 <delta_calcForward+0x2f0>)
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	f7fc fadb 	bl	80004c8 <__aeabi_dmul>
 8003f12:	4603      	mov	r3, r0
 8003f14:	460c      	mov	r4, r1
 8003f16:	4618      	mov	r0, r3
 8003f18:	4621      	mov	r1, r4
 8003f1a:	f7fc fdad 	bl	8000a78 <__aeabi_d2f>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	653b      	str	r3, [r7, #80]	; 0x50
     float z2 = -rf*sin(theta2);
 8003f22:	68b8      	ldr	r0, [r7, #8]
 8003f24:	f7fc fa78 	bl	8000418 <__aeabi_f2d>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	4621      	mov	r1, r4
 8003f30:	f002 ffea 	bl	8006f08 <sin>
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	4b72      	ldr	r3, [pc, #456]	; (8004104 <delta_calcForward+0x304>)
 8003f3a:	f7fc fac5 	bl	80004c8 <__aeabi_dmul>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	460c      	mov	r4, r1
 8003f42:	4618      	mov	r0, r3
 8003f44:	4621      	mov	r1, r4
 8003f46:	f7fc fd97 	bl	8000a78 <__aeabi_d2f>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	64fb      	str	r3, [r7, #76]	; 0x4c

     float y3 = (t + rf*cos(theta3))*sin30;
 8003f4e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003f50:	f7fc fa62 	bl	8000418 <__aeabi_f2d>
 8003f54:	4604      	mov	r4, r0
 8003f56:	460d      	mov	r5, r1
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7fc fa5d 	bl	8000418 <__aeabi_f2d>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	f002 ff95 	bl	8006e94 <cos>
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	4b64      	ldr	r3, [pc, #400]	; (8004100 <delta_calcForward+0x300>)
 8003f70:	f7fc faaa 	bl	80004c8 <__aeabi_dmul>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4620      	mov	r0, r4
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	f7fc f8ee 	bl	800015c <__adddf3>
 8003f80:	4603      	mov	r3, r0
 8003f82:	460c      	mov	r4, r1
 8003f84:	4618      	mov	r0, r3
 8003f86:	4621      	mov	r1, r4
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	4b5e      	ldr	r3, [pc, #376]	; (8004108 <delta_calcForward+0x308>)
 8003f8e:	f7fc fa9b 	bl	80004c8 <__aeabi_dmul>
 8003f92:	4603      	mov	r3, r0
 8003f94:	460c      	mov	r4, r1
 8003f96:	4618      	mov	r0, r3
 8003f98:	4621      	mov	r1, r4
 8003f9a:	f7fc fd6d 	bl	8000a78 <__aeabi_d2f>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	64bb      	str	r3, [r7, #72]	; 0x48
     float x3 = -y3*tan60;
 8003fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fc fa35 	bl	8000418 <__aeabi_f2d>
 8003fae:	a350      	add	r3, pc, #320	; (adr r3, 80040f0 <delta_calcForward+0x2f0>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc fa88 	bl	80004c8 <__aeabi_dmul>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	f7fc fd5a 	bl	8000a78 <__aeabi_d2f>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	647b      	str	r3, [r7, #68]	; 0x44
     float z3 = -rf*sin(theta3);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7fc fa25 	bl	8000418 <__aeabi_f2d>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	f002 ff97 	bl	8006f08 <sin>
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	4b49      	ldr	r3, [pc, #292]	; (8004104 <delta_calcForward+0x304>)
 8003fe0:	f7fc fa72 	bl	80004c8 <__aeabi_dmul>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	4618      	mov	r0, r3
 8003fea:	4621      	mov	r1, r4
 8003fec:	f7fc fd44 	bl	8000a78 <__aeabi_d2f>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	643b      	str	r3, [r7, #64]	; 0x40

     float dnm = (y2-y1)*x3-(y3-y1)*x2;
 8003ff4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003ff6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003ff8:	f7fc fd92 	bl	8000b20 <__aeabi_fsub>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc fe97 	bl	8000d34 <__aeabi_fmul>
 8004006:	4603      	mov	r3, r0
 8004008:	461c      	mov	r4, r3
 800400a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800400c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800400e:	f7fc fd87 	bl	8000b20 <__aeabi_fsub>
 8004012:	4603      	mov	r3, r0
 8004014:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc fe8c 	bl	8000d34 <__aeabi_fmul>
 800401c:	4603      	mov	r3, r0
 800401e:	4619      	mov	r1, r3
 8004020:	4620      	mov	r0, r4
 8004022:	f7fc fd7d 	bl	8000b20 <__aeabi_fsub>
 8004026:	4603      	mov	r3, r0
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c

     float w1 = y1*y1 + z1*z1;
 800402a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800402c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800402e:	f7fc fe81 	bl	8000d34 <__aeabi_fmul>
 8004032:	4603      	mov	r3, r0
 8004034:	461c      	mov	r4, r3
 8004036:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004038:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800403a:	f7fc fe7b 	bl	8000d34 <__aeabi_fmul>
 800403e:	4603      	mov	r3, r0
 8004040:	4619      	mov	r1, r3
 8004042:	4620      	mov	r0, r4
 8004044:	f7fc fd6e 	bl	8000b24 <__addsf3>
 8004048:	4603      	mov	r3, r0
 800404a:	63bb      	str	r3, [r7, #56]	; 0x38
     float w2 = x2*x2 + y2*y2 + z2*z2;
 800404c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800404e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004050:	f7fc fe70 	bl	8000d34 <__aeabi_fmul>
 8004054:	4603      	mov	r3, r0
 8004056:	461c      	mov	r4, r3
 8004058:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800405a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800405c:	f7fc fe6a 	bl	8000d34 <__aeabi_fmul>
 8004060:	4603      	mov	r3, r0
 8004062:	4619      	mov	r1, r3
 8004064:	4620      	mov	r0, r4
 8004066:	f7fc fd5d 	bl	8000b24 <__addsf3>
 800406a:	4603      	mov	r3, r0
 800406c:	461c      	mov	r4, r3
 800406e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004070:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004072:	f7fc fe5f 	bl	8000d34 <__aeabi_fmul>
 8004076:	4603      	mov	r3, r0
 8004078:	4619      	mov	r1, r3
 800407a:	4620      	mov	r0, r4
 800407c:	f7fc fd52 	bl	8000b24 <__addsf3>
 8004080:	4603      	mov	r3, r0
 8004082:	637b      	str	r3, [r7, #52]	; 0x34
     float w3 = x3*x3 + y3*y3 + z3*z3;
 8004084:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004086:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004088:	f7fc fe54 	bl	8000d34 <__aeabi_fmul>
 800408c:	4603      	mov	r3, r0
 800408e:	461c      	mov	r4, r3
 8004090:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004092:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004094:	f7fc fe4e 	bl	8000d34 <__aeabi_fmul>
 8004098:	4603      	mov	r3, r0
 800409a:	4619      	mov	r1, r3
 800409c:	4620      	mov	r0, r4
 800409e:	f7fc fd41 	bl	8000b24 <__addsf3>
 80040a2:	4603      	mov	r3, r0
 80040a4:	461c      	mov	r4, r3
 80040a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040a8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80040aa:	f7fc fe43 	bl	8000d34 <__aeabi_fmul>
 80040ae:	4603      	mov	r3, r0
 80040b0:	4619      	mov	r1, r3
 80040b2:	4620      	mov	r0, r4
 80040b4:	f7fc fd36 	bl	8000b24 <__addsf3>
 80040b8:	4603      	mov	r3, r0
 80040ba:	633b      	str	r3, [r7, #48]	; 0x30

     // x = (a1*z + b1)/dnm
     float a1 = (z2-z1)*(y3-y1)-(z3-z1)*(y2-y1);
 80040bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80040c0:	f7fc fd2e 	bl	8000b20 <__aeabi_fsub>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461c      	mov	r4, r3
 80040c8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80040ca:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80040cc:	f7fc fd28 	bl	8000b20 <__aeabi_fsub>
 80040d0:	4603      	mov	r3, r0
 80040d2:	4619      	mov	r1, r3
 80040d4:	4620      	mov	r0, r4
 80040d6:	f7fc fe2d 	bl	8000d34 <__aeabi_fmul>
 80040da:	4603      	mov	r3, r0
 80040dc:	461c      	mov	r4, r3
 80040de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040e0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80040e2:	f7fc fd1d 	bl	8000b20 <__aeabi_fsub>
 80040e6:	4603      	mov	r3, r0
 80040e8:	461d      	mov	r5, r3
 80040ea:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80040ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80040ee:	e00d      	b.n	800410c <delta_calcForward+0x30c>
 80040f0:	e8584caa 	.word	0xe8584caa
 80040f4:	3ffbb67a 	.word	0x3ffbb67a
 80040f8:	42893df6 	.word	0x42893df6
 80040fc:	3c8efa35 	.word	0x3c8efa35
 8004100:	40668000 	.word	0x40668000
 8004104:	c0668000 	.word	0xc0668000
 8004108:	3fe00000 	.word	0x3fe00000
 800410c:	f7fc fd08 	bl	8000b20 <__aeabi_fsub>
 8004110:	4603      	mov	r3, r0
 8004112:	4619      	mov	r1, r3
 8004114:	4628      	mov	r0, r5
 8004116:	f7fc fe0d 	bl	8000d34 <__aeabi_fmul>
 800411a:	4603      	mov	r3, r0
 800411c:	4619      	mov	r1, r3
 800411e:	4620      	mov	r0, r4
 8004120:	f7fc fcfe 	bl	8000b20 <__aeabi_fsub>
 8004124:	4603      	mov	r3, r0
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c
     float b1 = -((w2-w1)*(y3-y1)-(w3-w1)*(y2-y1))/2.0;
 8004128:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800412a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800412c:	f7fc fcf8 	bl	8000b20 <__aeabi_fsub>
 8004130:	4603      	mov	r3, r0
 8004132:	461c      	mov	r4, r3
 8004134:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004136:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004138:	f7fc fcf2 	bl	8000b20 <__aeabi_fsub>
 800413c:	4603      	mov	r3, r0
 800413e:	4619      	mov	r1, r3
 8004140:	4620      	mov	r0, r4
 8004142:	f7fc fdf7 	bl	8000d34 <__aeabi_fmul>
 8004146:	4603      	mov	r3, r0
 8004148:	461c      	mov	r4, r3
 800414a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800414c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800414e:	f7fc fce7 	bl	8000b20 <__aeabi_fsub>
 8004152:	4603      	mov	r3, r0
 8004154:	461d      	mov	r5, r3
 8004156:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004158:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800415a:	f7fc fce1 	bl	8000b20 <__aeabi_fsub>
 800415e:	4603      	mov	r3, r0
 8004160:	4619      	mov	r1, r3
 8004162:	4628      	mov	r0, r5
 8004164:	f7fc fde6 	bl	8000d34 <__aeabi_fmul>
 8004168:	4603      	mov	r3, r0
 800416a:	4619      	mov	r1, r3
 800416c:	4620      	mov	r0, r4
 800416e:	f7fc fcd7 	bl	8000b20 <__aeabi_fsub>
 8004172:	4603      	mov	r3, r0
 8004174:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004178:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800417c:	4618      	mov	r0, r3
 800417e:	f7fc fe8d 	bl	8000e9c <__aeabi_fdiv>
 8004182:	4603      	mov	r3, r0
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28

     // y = (a2*z + b2)/dnm;
     float a2 = -(z2-z1)*x3+(z3-z1)*x2;
 8004186:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004188:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800418a:	f7fc fcc9 	bl	8000b20 <__aeabi_fsub>
 800418e:	4603      	mov	r3, r0
 8004190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004194:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc fdcc 	bl	8000d34 <__aeabi_fmul>
 800419c:	4603      	mov	r3, r0
 800419e:	461c      	mov	r4, r3
 80041a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80041a4:	f7fc fcbc 	bl	8000b20 <__aeabi_fsub>
 80041a8:	4603      	mov	r3, r0
 80041aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fc fdc1 	bl	8000d34 <__aeabi_fmul>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4619      	mov	r1, r3
 80041b6:	4620      	mov	r0, r4
 80041b8:	f7fc fcb4 	bl	8000b24 <__addsf3>
 80041bc:	4603      	mov	r3, r0
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
     float b2 = ((w2-w1)*x3 - (w3-w1)*x2)/2.0;
 80041c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80041c4:	f7fc fcac 	bl	8000b20 <__aeabi_fsub>
 80041c8:	4603      	mov	r3, r0
 80041ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc fdb1 	bl	8000d34 <__aeabi_fmul>
 80041d2:	4603      	mov	r3, r0
 80041d4:	461c      	mov	r4, r3
 80041d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041da:	f7fc fca1 	bl	8000b20 <__aeabi_fsub>
 80041de:	4603      	mov	r3, r0
 80041e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fc fda6 	bl	8000d34 <__aeabi_fmul>
 80041e8:	4603      	mov	r3, r0
 80041ea:	4619      	mov	r1, r3
 80041ec:	4620      	mov	r0, r4
 80041ee:	f7fc fc97 	bl	8000b20 <__aeabi_fsub>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fc fe4f 	bl	8000e9c <__aeabi_fdiv>
 80041fe:	4603      	mov	r3, r0
 8004200:	623b      	str	r3, [r7, #32]

     // a*z^2 + b*z + c = 0
     float a = a1*a1 + a2*a2 + dnm*dnm;
 8004202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004206:	f7fc fd95 	bl	8000d34 <__aeabi_fmul>
 800420a:	4603      	mov	r3, r0
 800420c:	461c      	mov	r4, r3
 800420e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004212:	f7fc fd8f 	bl	8000d34 <__aeabi_fmul>
 8004216:	4603      	mov	r3, r0
 8004218:	4619      	mov	r1, r3
 800421a:	4620      	mov	r0, r4
 800421c:	f7fc fc82 	bl	8000b24 <__addsf3>
 8004220:	4603      	mov	r3, r0
 8004222:	461c      	mov	r4, r3
 8004224:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004226:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004228:	f7fc fd84 	bl	8000d34 <__aeabi_fmul>
 800422c:	4603      	mov	r3, r0
 800422e:	4619      	mov	r1, r3
 8004230:	4620      	mov	r0, r4
 8004232:	f7fc fc77 	bl	8000b24 <__addsf3>
 8004236:	4603      	mov	r3, r0
 8004238:	61fb      	str	r3, [r7, #28]
     float b = 2*(a1*b1 + a2*(b2-y1*dnm) - z1*dnm*dnm);
 800423a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800423c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800423e:	f7fc fd79 	bl	8000d34 <__aeabi_fmul>
 8004242:	4603      	mov	r3, r0
 8004244:	461c      	mov	r4, r3
 8004246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004248:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800424a:	f7fc fd73 	bl	8000d34 <__aeabi_fmul>
 800424e:	4603      	mov	r3, r0
 8004250:	4619      	mov	r1, r3
 8004252:	6a38      	ldr	r0, [r7, #32]
 8004254:	f7fc fc64 	bl	8000b20 <__aeabi_fsub>
 8004258:	4603      	mov	r3, r0
 800425a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc fd69 	bl	8000d34 <__aeabi_fmul>
 8004262:	4603      	mov	r3, r0
 8004264:	4619      	mov	r1, r3
 8004266:	4620      	mov	r0, r4
 8004268:	f7fc fc5c 	bl	8000b24 <__addsf3>
 800426c:	4603      	mov	r3, r0
 800426e:	461c      	mov	r4, r3
 8004270:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004272:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004274:	f7fc fd5e 	bl	8000d34 <__aeabi_fmul>
 8004278:	4603      	mov	r3, r0
 800427a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800427c:	4618      	mov	r0, r3
 800427e:	f7fc fd59 	bl	8000d34 <__aeabi_fmul>
 8004282:	4603      	mov	r3, r0
 8004284:	4619      	mov	r1, r3
 8004286:	4620      	mov	r0, r4
 8004288:	f7fc fc4a 	bl	8000b20 <__aeabi_fsub>
 800428c:	4603      	mov	r3, r0
 800428e:	4619      	mov	r1, r3
 8004290:	4618      	mov	r0, r3
 8004292:	f7fc fc47 	bl	8000b24 <__addsf3>
 8004296:	4603      	mov	r3, r0
 8004298:	61bb      	str	r3, [r7, #24]
     float c = (b2-y1*dnm)*(b2-y1*dnm) + b1*b1 + dnm*dnm*(z1*z1 - re*re);
 800429a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800429c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800429e:	f7fc fd49 	bl	8000d34 <__aeabi_fmul>
 80042a2:	4603      	mov	r3, r0
 80042a4:	4619      	mov	r1, r3
 80042a6:	6a38      	ldr	r0, [r7, #32]
 80042a8:	f7fc fc3a 	bl	8000b20 <__aeabi_fsub>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461c      	mov	r4, r3
 80042b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80042b4:	f7fc fd3e 	bl	8000d34 <__aeabi_fmul>
 80042b8:	4603      	mov	r3, r0
 80042ba:	4619      	mov	r1, r3
 80042bc:	6a38      	ldr	r0, [r7, #32]
 80042be:	f7fc fc2f 	bl	8000b20 <__aeabi_fsub>
 80042c2:	4603      	mov	r3, r0
 80042c4:	4619      	mov	r1, r3
 80042c6:	4620      	mov	r0, r4
 80042c8:	f7fc fd34 	bl	8000d34 <__aeabi_fmul>
 80042cc:	4603      	mov	r3, r0
 80042ce:	461c      	mov	r4, r3
 80042d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042d4:	f7fc fd2e 	bl	8000d34 <__aeabi_fmul>
 80042d8:	4603      	mov	r3, r0
 80042da:	4619      	mov	r1, r3
 80042dc:	4620      	mov	r0, r4
 80042de:	f7fc fc21 	bl	8000b24 <__addsf3>
 80042e2:	4603      	mov	r3, r0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fc f897 	bl	8000418 <__aeabi_f2d>
 80042ea:	4604      	mov	r4, r0
 80042ec:	460d      	mov	r5, r1
 80042ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80042f2:	f7fc fd1f 	bl	8000d34 <__aeabi_fmul>
 80042f6:	4603      	mov	r3, r0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fc f88d 	bl	8000418 <__aeabi_f2d>
 80042fe:	4680      	mov	r8, r0
 8004300:	4689      	mov	r9, r1
 8004302:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004304:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004306:	f7fc fd15 	bl	8000d34 <__aeabi_fmul>
 800430a:	4603      	mov	r3, r0
 800430c:	4618      	mov	r0, r3
 800430e:	f7fc f883 	bl	8000418 <__aeabi_f2d>
 8004312:	a351      	add	r3, pc, #324	; (adr r3, 8004458 <delta_calcForward+0x658>)
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	f7fb ff1e 	bl	8000158 <__aeabi_dsub>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4640      	mov	r0, r8
 8004322:	4649      	mov	r1, r9
 8004324:	f7fc f8d0 	bl	80004c8 <__aeabi_dmul>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4620      	mov	r0, r4
 800432e:	4629      	mov	r1, r5
 8004330:	f7fb ff14 	bl	800015c <__adddf3>
 8004334:	4603      	mov	r3, r0
 8004336:	460c      	mov	r4, r1
 8004338:	4618      	mov	r0, r3
 800433a:	4621      	mov	r1, r4
 800433c:	f7fc fb9c 	bl	8000a78 <__aeabi_d2f>
 8004340:	4603      	mov	r3, r0
 8004342:	617b      	str	r3, [r7, #20]

     // discriminant
     float d = b*b - (float)4.0*a*c;
 8004344:	69b9      	ldr	r1, [r7, #24]
 8004346:	69b8      	ldr	r0, [r7, #24]
 8004348:	f7fc fcf4 	bl	8000d34 <__aeabi_fmul>
 800434c:	4603      	mov	r3, r0
 800434e:	461c      	mov	r4, r3
 8004350:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004354:	69f8      	ldr	r0, [r7, #28]
 8004356:	f7fc fced 	bl	8000d34 <__aeabi_fmul>
 800435a:	4603      	mov	r3, r0
 800435c:	6979      	ldr	r1, [r7, #20]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc fce8 	bl	8000d34 <__aeabi_fmul>
 8004364:	4603      	mov	r3, r0
 8004366:	4619      	mov	r1, r3
 8004368:	4620      	mov	r0, r4
 800436a:	f7fc fbd9 	bl	8000b20 <__aeabi_fsub>
 800436e:	4603      	mov	r3, r0
 8004370:	613b      	str	r3, [r7, #16]
     if (d < 0) return -1; // non-existing point
 8004372:	f04f 0100 	mov.w	r1, #0
 8004376:	6938      	ldr	r0, [r7, #16]
 8004378:	f7fc fe7a 	bl	8001070 <__aeabi_fcmplt>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <delta_calcForward+0x588>
 8004382:	f04f 33ff 	mov.w	r3, #4294967295
 8004386:	e05f      	b.n	8004448 <delta_calcForward+0x648>

     *z0 = -(float)0.5*(b+sqrt(d))/a;
 8004388:	69b8      	ldr	r0, [r7, #24]
 800438a:	f7fc f845 	bl	8000418 <__aeabi_f2d>
 800438e:	4604      	mov	r4, r0
 8004390:	460d      	mov	r5, r1
 8004392:	6938      	ldr	r0, [r7, #16]
 8004394:	f7fc f840 	bl	8000418 <__aeabi_f2d>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4610      	mov	r0, r2
 800439e:	4619      	mov	r1, r3
 80043a0:	f002 fdec 	bl	8006f7c <sqrt>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4620      	mov	r0, r4
 80043aa:	4629      	mov	r1, r5
 80043ac:	f7fb fed6 	bl	800015c <__adddf3>
 80043b0:	4603      	mov	r3, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	4618      	mov	r0, r3
 80043b6:	4621      	mov	r1, r4
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	4b28      	ldr	r3, [pc, #160]	; (8004460 <delta_calcForward+0x660>)
 80043be:	f7fc f883 	bl	80004c8 <__aeabi_dmul>
 80043c2:	4603      	mov	r3, r0
 80043c4:	460c      	mov	r4, r1
 80043c6:	4625      	mov	r5, r4
 80043c8:	461c      	mov	r4, r3
 80043ca:	69f8      	ldr	r0, [r7, #28]
 80043cc:	f7fc f824 	bl	8000418 <__aeabi_f2d>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4620      	mov	r0, r4
 80043d6:	4629      	mov	r1, r5
 80043d8:	f7fc f9a0 	bl	800071c <__aeabi_ddiv>
 80043dc:	4603      	mov	r3, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	4618      	mov	r0, r3
 80043e2:	4621      	mov	r1, r4
 80043e4:	f7fc fb48 	bl	8000a78 <__aeabi_d2f>
 80043e8:	4602      	mov	r2, r0
 80043ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043ee:	601a      	str	r2, [r3, #0]
     *x0 = (a1*(*z0) + b1)/dnm;
 80043f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fc fc9b 	bl	8000d34 <__aeabi_fmul>
 80043fe:	4603      	mov	r3, r0
 8004400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004402:	4618      	mov	r0, r3
 8004404:	f7fc fb8e 	bl	8000b24 <__addsf3>
 8004408:	4603      	mov	r3, r0
 800440a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800440c:	4618      	mov	r0, r3
 800440e:	f7fc fd45 	bl	8000e9c <__aeabi_fdiv>
 8004412:	4603      	mov	r3, r0
 8004414:	461a      	mov	r2, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	601a      	str	r2, [r3, #0]
     *y0 = (a2*(*z0) + b2)/dnm;
 800441a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004422:	4618      	mov	r0, r3
 8004424:	f7fc fc86 	bl	8000d34 <__aeabi_fmul>
 8004428:	4603      	mov	r3, r0
 800442a:	6a39      	ldr	r1, [r7, #32]
 800442c:	4618      	mov	r0, r3
 800442e:	f7fc fb79 	bl	8000b24 <__addsf3>
 8004432:	4603      	mov	r3, r0
 8004434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc fd30 	bl	8000e9c <__aeabi_fdiv>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004444:	601a      	str	r2, [r3, #0]
     return 0;
 8004446:	2300      	movs	r3, #0
 }
 8004448:	4618      	mov	r0, r3
 800444a:	3768      	adds	r7, #104	; 0x68
 800444c:	46bd      	mov	sp, r7
 800444e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004452:	bf00      	nop
 8004454:	f3af 8000 	nop.w
 8004458:	00000000 	.word	0x00000000
 800445c:	41069220 	.word	0x41069220
 8004460:	bfe00000 	.word	0xbfe00000
 8004464:	00000000 	.word	0x00000000

08004468 <delta_calcInverse>:

 // inverse kinematics: (x0, y0, z0) -> (theta1, theta2, theta3)
 // returned status: 0=OK, -1=non-existing position
 int delta_calcInverse(float x0, float y0, float z0, float* theta1, float* theta2, float* theta3)
 {
 8004468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
     *theta1 = 0;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
     *theta2 = 0;
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
     *theta3 = 0;
 8004486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
     int status = delta_calcAngleYZ(x0, y0, z0, theta1);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff fb37 	bl	8003b08 <delta_calcAngleYZ>
 800449a:	6178      	str	r0, [r7, #20]
     if (status == 0) status = delta_calcAngleYZ(x0*cos120 + y0*sin120, y0*cos120-x0*sin120, z0, theta2);  // rotate coords to +120 deg
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d147      	bne.n	8004532 <delta_calcInverse+0xca>
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f7fb ffb8 	bl	8000418 <__aeabi_f2d>
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	4b4c      	ldr	r3, [pc, #304]	; (80045e0 <delta_calcInverse+0x178>)
 80044ae:	f7fc f80b 	bl	80004c8 <__aeabi_dmul>
 80044b2:	4603      	mov	r3, r0
 80044b4:	460c      	mov	r4, r1
 80044b6:	4625      	mov	r5, r4
 80044b8:	461c      	mov	r4, r3
 80044ba:	68b8      	ldr	r0, [r7, #8]
 80044bc:	f7fb ffac 	bl	8000418 <__aeabi_f2d>
 80044c0:	a345      	add	r3, pc, #276	; (adr r3, 80045d8 <delta_calcInverse+0x170>)
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	f7fb ffff 	bl	80004c8 <__aeabi_dmul>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4620      	mov	r0, r4
 80044d0:	4629      	mov	r1, r5
 80044d2:	f7fb fe43 	bl	800015c <__adddf3>
 80044d6:	4603      	mov	r3, r0
 80044d8:	460c      	mov	r4, r1
 80044da:	4618      	mov	r0, r3
 80044dc:	4621      	mov	r1, r4
 80044de:	f7fc facb 	bl	8000a78 <__aeabi_d2f>
 80044e2:	4606      	mov	r6, r0
 80044e4:	68b8      	ldr	r0, [r7, #8]
 80044e6:	f7fb ff97 	bl	8000418 <__aeabi_f2d>
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	4b3c      	ldr	r3, [pc, #240]	; (80045e0 <delta_calcInverse+0x178>)
 80044f0:	f7fb ffea 	bl	80004c8 <__aeabi_dmul>
 80044f4:	4603      	mov	r3, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	4625      	mov	r5, r4
 80044fa:	461c      	mov	r4, r3
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7fb ff8b 	bl	8000418 <__aeabi_f2d>
 8004502:	a335      	add	r3, pc, #212	; (adr r3, 80045d8 <delta_calcInverse+0x170>)
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f7fb ffde 	bl	80004c8 <__aeabi_dmul>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4620      	mov	r0, r4
 8004512:	4629      	mov	r1, r5
 8004514:	f7fb fe20 	bl	8000158 <__aeabi_dsub>
 8004518:	4603      	mov	r3, r0
 800451a:	460c      	mov	r4, r1
 800451c:	4618      	mov	r0, r3
 800451e:	4621      	mov	r1, r4
 8004520:	f7fc faaa 	bl	8000a78 <__aeabi_d2f>
 8004524:	4601      	mov	r1, r0
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4630      	mov	r0, r6
 800452c:	f7ff faec 	bl	8003b08 <delta_calcAngleYZ>
 8004530:	6178      	str	r0, [r7, #20]
     if (status == 0) status = delta_calcAngleYZ(x0*cos120 - y0*sin120, y0*cos120+x0*sin120, z0, theta3);  // rotate coords to -120 deg
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d147      	bne.n	80045c8 <delta_calcInverse+0x160>
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7fb ff6d 	bl	8000418 <__aeabi_f2d>
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <delta_calcInverse+0x178>)
 8004544:	f7fb ffc0 	bl	80004c8 <__aeabi_dmul>
 8004548:	4603      	mov	r3, r0
 800454a:	460c      	mov	r4, r1
 800454c:	4625      	mov	r5, r4
 800454e:	461c      	mov	r4, r3
 8004550:	68b8      	ldr	r0, [r7, #8]
 8004552:	f7fb ff61 	bl	8000418 <__aeabi_f2d>
 8004556:	a320      	add	r3, pc, #128	; (adr r3, 80045d8 <delta_calcInverse+0x170>)
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f7fb ffb4 	bl	80004c8 <__aeabi_dmul>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4620      	mov	r0, r4
 8004566:	4629      	mov	r1, r5
 8004568:	f7fb fdf6 	bl	8000158 <__aeabi_dsub>
 800456c:	4603      	mov	r3, r0
 800456e:	460c      	mov	r4, r1
 8004570:	4618      	mov	r0, r3
 8004572:	4621      	mov	r1, r4
 8004574:	f7fc fa80 	bl	8000a78 <__aeabi_d2f>
 8004578:	4606      	mov	r6, r0
 800457a:	68b8      	ldr	r0, [r7, #8]
 800457c:	f7fb ff4c 	bl	8000418 <__aeabi_f2d>
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <delta_calcInverse+0x178>)
 8004586:	f7fb ff9f 	bl	80004c8 <__aeabi_dmul>
 800458a:	4603      	mov	r3, r0
 800458c:	460c      	mov	r4, r1
 800458e:	4625      	mov	r5, r4
 8004590:	461c      	mov	r4, r3
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f7fb ff40 	bl	8000418 <__aeabi_f2d>
 8004598:	a30f      	add	r3, pc, #60	; (adr r3, 80045d8 <delta_calcInverse+0x170>)
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	f7fb ff93 	bl	80004c8 <__aeabi_dmul>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4620      	mov	r0, r4
 80045a8:	4629      	mov	r1, r5
 80045aa:	f7fb fdd7 	bl	800015c <__adddf3>
 80045ae:	4603      	mov	r3, r0
 80045b0:	460c      	mov	r4, r1
 80045b2:	4618      	mov	r0, r3
 80045b4:	4621      	mov	r1, r4
 80045b6:	f7fc fa5f 	bl	8000a78 <__aeabi_d2f>
 80045ba:	4601      	mov	r1, r0
 80045bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4630      	mov	r0, r6
 80045c2:	f7ff faa1 	bl	8003b08 <delta_calcAngleYZ>
 80045c6:	6178      	str	r0, [r7, #20]
     return status;
 80045c8:	697b      	ldr	r3, [r7, #20]
 }
 80045ca:	4618      	mov	r0, r3
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d2:	bf00      	nop
 80045d4:	f3af 8000 	nop.w
 80045d8:	e8584caa 	.word	0xe8584caa
 80045dc:	3febb67a 	.word	0x3febb67a
 80045e0:	bfe00000 	.word	0xbfe00000

080045e4 <LL_TIM_EnableCounter>:
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	601a      	str	r2, [r3, #0]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <LL_TIM_EnableIT_UPDATE>:
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f043 0201 	orr.w	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60da      	str	r2, [r3, #12]
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr

08004620 <LL_TIM_EnableIT_CC1>:
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f043 0202 	orr.w	r2, r3, #2
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60da      	str	r2, [r3, #12]
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <LL_TIM_EnableIT_CC2>:
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f043 0204 	orr.w	r2, r3, #4
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	60da      	str	r2, [r3, #12]
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <LL_TIM_EnableIT_CC3>:
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC3IE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f043 0208 	orr.w	r2, r3, #8
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr

0800467a <LL_TIM_EnableIT_CC4>:
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC4IE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f043 0210 	orr.w	r2, r3, #16
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60da      	str	r2, [r3, #12]
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80046a0:	f7fc fd34 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80046a4:	f000 fa14 	bl	8004ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046a8:	f7ff f95c 	bl	8003964 <MX_GPIO_Init>
  MX_ADC1_Init();
 80046ac:	f7fe fff2 	bl	8003694 <MX_ADC1_Init>
  MX_SPI2_Init();
 80046b0:	f000 fd8e 	bl	80051d0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80046b4:	f001 faaa 	bl	8005c0c <MX_TIM1_Init>
  MX_TIM2_Init();
 80046b8:	f001 fba0 	bl	8005dfc <MX_TIM2_Init>
  MX_TIM3_Init();
 80046bc:	f001 fbf2 	bl	8005ea4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80046c0:	f001 fc44 	bl	8005f4c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80046c4:	f002 f8fe 	bl	80068c4 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 80046c8:	f002 f970 	bl	80069ac <MX_USB_PCD_Init>
  MX_FATFS_Init();
 80046cc:	f7ff f938 	bl	8003940 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  TIMER_Init(&TIMER_0);
 80046d0:	4819      	ldr	r0, [pc, #100]	; (8004738 <main+0xa0>)
 80046d2:	f001 fda2 	bl	800621a <TIMER_Init>
  ENCODER_Init();
 80046d6:	f7ff f86f 	bl	80037b8 <ENCODER_Init>
  MOTOR_Init();
 80046da:	f000 fb55 	bl	8004d88 <MOTOR_Init>
  PID_init();
 80046de:	f000 fc6b 	bl	8004fb8 <PID_init>
  TRAJECTORY_Init();
 80046e2:	f001 fde5 	bl	80062b0 <TRAJECTORY_Init>
//  SysTick_Config(SystemCoreClock / 1000);
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80046e6:	213c      	movs	r1, #60	; 0x3c
 80046e8:	4814      	ldr	r0, [pc, #80]	; (800473c <main+0xa4>)
 80046ea:	f7fe f8c0 	bl	800286e <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80046ee:	213c      	movs	r1, #60	; 0x3c
 80046f0:	4813      	ldr	r0, [pc, #76]	; (8004740 <main+0xa8>)
 80046f2:	f7fe f8bc 	bl	800286e <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80046f6:	213c      	movs	r1, #60	; 0x3c
 80046f8:	4812      	ldr	r0, [pc, #72]	; (8004744 <main+0xac>)
 80046fa:	f7fe f8b8 	bl	800286e <HAL_TIM_Encoder_Start>
//  LL_TIM_EnableIT_UPDATE(TIM2);
//  LL_TIM_EnableIT_UPDATE(TIM3);
//  LL_TIM_EnableIT_UPDATE(TIM4);
  LL_TIM_EnableCounter(TIM1);
 80046fe:	4812      	ldr	r0, [pc, #72]	; (8004748 <main+0xb0>)
 8004700:	f7ff ff70 	bl	80045e4 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM1);
 8004704:	4810      	ldr	r0, [pc, #64]	; (8004748 <main+0xb0>)
 8004706:	f7ff ff7c 	bl	8004602 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableIT_CC1(TIM1);
 800470a:	480f      	ldr	r0, [pc, #60]	; (8004748 <main+0xb0>)
 800470c:	f7ff ff88 	bl	8004620 <LL_TIM_EnableIT_CC1>
  LL_TIM_EnableIT_CC2(TIM1);
 8004710:	480d      	ldr	r0, [pc, #52]	; (8004748 <main+0xb0>)
 8004712:	f7ff ff94 	bl	800463e <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableIT_CC3(TIM1);
 8004716:	480c      	ldr	r0, [pc, #48]	; (8004748 <main+0xb0>)
 8004718:	f7ff ffa0 	bl	800465c <LL_TIM_EnableIT_CC3>
  LL_TIM_EnableIT_CC4(TIM1);
 800471c:	480a      	ldr	r0, [pc, #40]	; (8004748 <main+0xb0>)
 800471e:	f7ff ffac 	bl	800467a <LL_TIM_EnableIT_CC4>
  TIMER_Enable(&TIMER_0);
 8004722:	4805      	ldr	r0, [pc, #20]	; (8004738 <main+0xa0>)
 8004724:	f001 fdac 	bl	8006280 <TIMER_Enable>
  /* USER CODE BEGIN WHILE */
//  MOTOR_SetRequiredSpeed(&MOTOR_0,10); // minus ok // plus nie
//  MOTOR_SetRequiredSpeed(&MOTOR_1,10);	//plus ok // minus nie
//  MOTOR_SetRequiredSpeed(&MOTOR_2,10);  //plus ok //minus ok

	  for(int64_t i = 0; i<3000000; i++) 	{asm("nop");}
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	f04f 0400 	mov.w	r4, #0
 8004730:	e9c7 3400 	strd	r3, r4, [r7]
 8004734:	e012      	b.n	800475c <main+0xc4>
 8004736:	bf00      	nop
 8004738:	200007e0 	.word	0x200007e0
 800473c:	200007a0 	.word	0x200007a0
 8004740:	20000760 	.word	0x20000760
 8004744:	20000720 	.word	0x20000720
 8004748:	40012c00 	.word	0x40012c00
 800474c:	bf00      	nop
 800474e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004752:	1c59      	adds	r1, r3, #1
 8004754:	f144 0200 	adc.w	r2, r4, #0
 8004758:	e9c7 1200 	strd	r1, r2, [r7]
 800475c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004760:	49b7      	ldr	r1, [pc, #732]	; (8004a40 <main+0x3a8>)
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	4299      	cmp	r1, r3
 8004768:	eb72 0304 	sbcs.w	r3, r2, r4
 800476c:	daee      	bge.n	800474c <main+0xb4>

	  PID_Enable(&PID_0_Speed);
 800476e:	48b5      	ldr	r0, [pc, #724]	; (8004a44 <main+0x3ac>)
 8004770:	f000 fcfe 	bl	8005170 <PID_Enable>
	  PID_Enable(&PID_1_Speed);
 8004774:	48b4      	ldr	r0, [pc, #720]	; (8004a48 <main+0x3b0>)
 8004776:	f000 fcfb 	bl	8005170 <PID_Enable>
	  PID_Enable(&PID_2_Speed);
 800477a:	48b4      	ldr	r0, [pc, #720]	; (8004a4c <main+0x3b4>)
 800477c:	f000 fcf8 	bl	8005170 <PID_Enable>
  	  PID_SetRequired(&PID_0_Speed, 10);
 8004780:	49b3      	ldr	r1, [pc, #716]	; (8004a50 <main+0x3b8>)
 8004782:	48b0      	ldr	r0, [pc, #704]	; (8004a44 <main+0x3ac>)
 8004784:	f000 fd17 	bl	80051b6 <PID_SetRequired>
  	  PID_SetRequired(&PID_1_Speed, 10);
 8004788:	49b1      	ldr	r1, [pc, #708]	; (8004a50 <main+0x3b8>)
 800478a:	48af      	ldr	r0, [pc, #700]	; (8004a48 <main+0x3b0>)
 800478c:	f000 fd13 	bl	80051b6 <PID_SetRequired>
  	  PID_SetRequired(&PID_2_Speed, 10);
 8004790:	49af      	ldr	r1, [pc, #700]	; (8004a50 <main+0x3b8>)
 8004792:	48ae      	ldr	r0, [pc, #696]	; (8004a4c <main+0x3b4>)
 8004794:	f000 fd0f 	bl	80051b6 <PID_SetRequired>

//  	for(int64_t i = 0; i<30000000; i++) 	{asm("nop");}


  	  while(!PID_IsEnabled(&PID_0_Pos) || !PID_IsEnabled(&PID_1_Pos)  || !PID_IsEnabled(&PID_2_Pos));
 8004798:	bf00      	nop
 800479a:	48ae      	ldr	r0, [pc, #696]	; (8004a54 <main+0x3bc>)
 800479c:	f000 fd00 	bl	80051a0 <PID_IsEnabled>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f083 0301 	eor.w	r3, r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f6      	bne.n	800479a <main+0x102>
 80047ac:	48aa      	ldr	r0, [pc, #680]	; (8004a58 <main+0x3c0>)
 80047ae:	f000 fcf7 	bl	80051a0 <PID_IsEnabled>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f083 0301 	eor.w	r3, r3, #1
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1ed      	bne.n	800479a <main+0x102>
 80047be:	48a7      	ldr	r0, [pc, #668]	; (8004a5c <main+0x3c4>)
 80047c0:	f000 fcee 	bl	80051a0 <PID_IsEnabled>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f083 0301 	eor.w	r3, r3, #1
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e4      	bne.n	800479a <main+0x102>
	  delta_calcForward(-ENCODER_GetAbsoluteAngle(&ENCODER_0),-ENCODER_GetAbsoluteAngle(&ENCODER_1),-ENCODER_GetAbsoluteAngle(&ENCODER_2),&xi,&yi,&zi);
 80047d0:	48a3      	ldr	r0, [pc, #652]	; (8004a60 <main+0x3c8>)
 80047d2:	f7ff f847 	bl	8003864 <ENCODER_GetAbsoluteAngle>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80047dc:	48a1      	ldr	r0, [pc, #644]	; (8004a64 <main+0x3cc>)
 80047de:	f7ff f841 	bl	8003864 <ENCODER_GetAbsoluteAngle>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80047e8:	489f      	ldr	r0, [pc, #636]	; (8004a68 <main+0x3d0>)
 80047ea:	f7ff f83b 	bl	8003864 <ENCODER_GetAbsoluteAngle>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80047f4:	4b9d      	ldr	r3, [pc, #628]	; (8004a6c <main+0x3d4>)
 80047f6:	9301      	str	r3, [sp, #4]
 80047f8:	4b9d      	ldr	r3, [pc, #628]	; (8004a70 <main+0x3d8>)
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	4b9d      	ldr	r3, [pc, #628]	; (8004a74 <main+0x3dc>)
 80047fe:	4629      	mov	r1, r5
 8004800:	4620      	mov	r0, r4
 8004802:	f7ff fafd 	bl	8003e00 <delta_calcForward>
	  TRAJECTORY_SetTrajectory(&TRAJECTORY,xi,yi,zi, 50.0*sin(5*i + 3.14/4), 50.0*sin(4*i), -326.5, 3.0);
 8004806:	4b9b      	ldr	r3, [pc, #620]	; (8004a74 <main+0x3dc>)
 8004808:	681c      	ldr	r4, [r3, #0]
 800480a:	4b99      	ldr	r3, [pc, #612]	; (8004a70 <main+0x3d8>)
 800480c:	681d      	ldr	r5, [r3, #0]
 800480e:	4b97      	ldr	r3, [pc, #604]	; (8004a6c <main+0x3d4>)
 8004810:	681e      	ldr	r6, [r3, #0]
 8004812:	4b99      	ldr	r3, [pc, #612]	; (8004a78 <main+0x3e0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4999      	ldr	r1, [pc, #612]	; (8004a7c <main+0x3e4>)
 8004818:	4618      	mov	r0, r3
 800481a:	f7fc fa8b 	bl	8000d34 <__aeabi_fmul>
 800481e:	4603      	mov	r3, r0
 8004820:	4618      	mov	r0, r3
 8004822:	f7fb fdf9 	bl	8000418 <__aeabi_f2d>
 8004826:	a382      	add	r3, pc, #520	; (adr r3, 8004a30 <main+0x398>)
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f7fb fc96 	bl	800015c <__adddf3>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	f002 fb66 	bl	8006f08 <sin>
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	4b8f      	ldr	r3, [pc, #572]	; (8004a80 <main+0x3e8>)
 8004842:	f7fb fe41 	bl	80004c8 <__aeabi_dmul>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4610      	mov	r0, r2
 800484c:	4619      	mov	r1, r3
 800484e:	f7fc f913 	bl	8000a78 <__aeabi_d2f>
 8004852:	4680      	mov	r8, r0
 8004854:	4b88      	ldr	r3, [pc, #544]	; (8004a78 <main+0x3e0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800485c:	4618      	mov	r0, r3
 800485e:	f7fc fa69 	bl	8000d34 <__aeabi_fmul>
 8004862:	4603      	mov	r3, r0
 8004864:	4618      	mov	r0, r3
 8004866:	f7fb fdd7 	bl	8000418 <__aeabi_f2d>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4610      	mov	r0, r2
 8004870:	4619      	mov	r1, r3
 8004872:	f002 fb49 	bl	8006f08 <sin>
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	4b81      	ldr	r3, [pc, #516]	; (8004a80 <main+0x3e8>)
 800487c:	f7fb fe24 	bl	80004c8 <__aeabi_dmul>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	f7fc f8f6 	bl	8000a78 <__aeabi_d2f>
 800488c:	4602      	mov	r2, r0
 800488e:	4b7d      	ldr	r3, [pc, #500]	; (8004a84 <main+0x3ec>)
 8004890:	9303      	str	r3, [sp, #12]
 8004892:	4b7d      	ldr	r3, [pc, #500]	; (8004a88 <main+0x3f0>)
 8004894:	9302      	str	r3, [sp, #8]
 8004896:	9201      	str	r2, [sp, #4]
 8004898:	f8cd 8000 	str.w	r8, [sp]
 800489c:	4633      	mov	r3, r6
 800489e:	462a      	mov	r2, r5
 80048a0:	4621      	mov	r1, r4
 80048a2:	487a      	ldr	r0, [pc, #488]	; (8004a8c <main+0x3f4>)
 80048a4:	f001 fd78 	bl	8006398 <TRAJECTORY_SetTrajectory>
	  TRAJECTORY_StartTrajectory(&TRAJECTORY);
 80048a8:	4878      	ldr	r0, [pc, #480]	; (8004a8c <main+0x3f4>)
 80048aa:	f001 fdff 	bl	80064ac <TRAJECTORY_StartTrajectory>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  delta_calcForward(-ENCODER_GetAbsoluteAngle(&ENCODER_0),-ENCODER_GetAbsoluteAngle(&ENCODER_1),-ENCODER_GetAbsoluteAngle(&ENCODER_2),&xi,&yi,&zi);
 80048ae:	486c      	ldr	r0, [pc, #432]	; (8004a60 <main+0x3c8>)
 80048b0:	f7fe ffd8 	bl	8003864 <ENCODER_GetAbsoluteAngle>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80048ba:	486a      	ldr	r0, [pc, #424]	; (8004a64 <main+0x3cc>)
 80048bc:	f7fe ffd2 	bl	8003864 <ENCODER_GetAbsoluteAngle>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80048c6:	4868      	ldr	r0, [pc, #416]	; (8004a68 <main+0x3d0>)
 80048c8:	f7fe ffcc 	bl	8003864 <ENCODER_GetAbsoluteAngle>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80048d2:	4b66      	ldr	r3, [pc, #408]	; (8004a6c <main+0x3d4>)
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	4b66      	ldr	r3, [pc, #408]	; (8004a70 <main+0x3d8>)
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	4b66      	ldr	r3, [pc, #408]	; (8004a74 <main+0x3dc>)
 80048dc:	4629      	mov	r1, r5
 80048de:	4620      	mov	r0, r4
 80048e0:	f7ff fa8e 	bl	8003e00 <delta_calcForward>

//	  while(TRAJECTORY_IsBusy(&TRAJECTORY));
//	  TRAJECTORY_SetTrajectory(&TRAJECTORY, 0.0, 0.0, -320.0, 10.0, 0.0,-320.0, 20.0);
//	  TRAJECTORY_StartTrajectory(&TRAJECTORY);

	  old_x =50.0*sin(5*i + 3.14/4);
 80048e4:	4b64      	ldr	r3, [pc, #400]	; (8004a78 <main+0x3e0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4964      	ldr	r1, [pc, #400]	; (8004a7c <main+0x3e4>)
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fc fa22 	bl	8000d34 <__aeabi_fmul>
 80048f0:	4603      	mov	r3, r0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fb fd90 	bl	8000418 <__aeabi_f2d>
 80048f8:	a34d      	add	r3, pc, #308	; (adr r3, 8004a30 <main+0x398>)
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	f7fb fc2d 	bl	800015c <__adddf3>
 8004902:	4603      	mov	r3, r0
 8004904:	460c      	mov	r4, r1
 8004906:	4618      	mov	r0, r3
 8004908:	4621      	mov	r1, r4
 800490a:	f002 fafd 	bl	8006f08 <sin>
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	4b5b      	ldr	r3, [pc, #364]	; (8004a80 <main+0x3e8>)
 8004914:	f7fb fdd8 	bl	80004c8 <__aeabi_dmul>
 8004918:	4603      	mov	r3, r0
 800491a:	460c      	mov	r4, r1
 800491c:	4618      	mov	r0, r3
 800491e:	4621      	mov	r1, r4
 8004920:	f7fc f8aa 	bl	8000a78 <__aeabi_d2f>
 8004924:	4602      	mov	r2, r0
 8004926:	4b5a      	ldr	r3, [pc, #360]	; (8004a90 <main+0x3f8>)
 8004928:	601a      	str	r2, [r3, #0]
	  old_y =50.0*sin(9*i);
 800492a:	4b53      	ldr	r3, [pc, #332]	; (8004a78 <main+0x3e0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4959      	ldr	r1, [pc, #356]	; (8004a94 <main+0x3fc>)
 8004930:	4618      	mov	r0, r3
 8004932:	f7fc f9ff 	bl	8000d34 <__aeabi_fmul>
 8004936:	4603      	mov	r3, r0
 8004938:	4618      	mov	r0, r3
 800493a:	f7fb fd6d 	bl	8000418 <__aeabi_f2d>
 800493e:	4603      	mov	r3, r0
 8004940:	460c      	mov	r4, r1
 8004942:	4618      	mov	r0, r3
 8004944:	4621      	mov	r1, r4
 8004946:	f002 fadf 	bl	8006f08 <sin>
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	4b4c      	ldr	r3, [pc, #304]	; (8004a80 <main+0x3e8>)
 8004950:	f7fb fdba 	bl	80004c8 <__aeabi_dmul>
 8004954:	4603      	mov	r3, r0
 8004956:	460c      	mov	r4, r1
 8004958:	4618      	mov	r0, r3
 800495a:	4621      	mov	r1, r4
 800495c:	f7fc f88c 	bl	8000a78 <__aeabi_d2f>
 8004960:	4602      	mov	r2, r0
 8004962:	4b4d      	ldr	r3, [pc, #308]	; (8004a98 <main+0x400>)
 8004964:	601a      	str	r2, [r3, #0]
	  i+= 0.01;
 8004966:	4b44      	ldr	r3, [pc, #272]	; (8004a78 <main+0x3e0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fb fd54 	bl	8000418 <__aeabi_f2d>
 8004970:	a331      	add	r3, pc, #196	; (adr r3, 8004a38 <main+0x3a0>)
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f7fb fbf1 	bl	800015c <__adddf3>
 800497a:	4603      	mov	r3, r0
 800497c:	460c      	mov	r4, r1
 800497e:	4618      	mov	r0, r3
 8004980:	4621      	mov	r1, r4
 8004982:	f7fc f879 	bl	8000a78 <__aeabi_d2f>
 8004986:	4602      	mov	r2, r0
 8004988:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <main+0x3e0>)
 800498a:	601a      	str	r2, [r3, #0]
	  new_x =50.0*sin(5*i + 3.14/4);
 800498c:	4b3a      	ldr	r3, [pc, #232]	; (8004a78 <main+0x3e0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	493a      	ldr	r1, [pc, #232]	; (8004a7c <main+0x3e4>)
 8004992:	4618      	mov	r0, r3
 8004994:	f7fc f9ce 	bl	8000d34 <__aeabi_fmul>
 8004998:	4603      	mov	r3, r0
 800499a:	4618      	mov	r0, r3
 800499c:	f7fb fd3c 	bl	8000418 <__aeabi_f2d>
 80049a0:	a323      	add	r3, pc, #140	; (adr r3, 8004a30 <main+0x398>)
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	f7fb fbd9 	bl	800015c <__adddf3>
 80049aa:	4603      	mov	r3, r0
 80049ac:	460c      	mov	r4, r1
 80049ae:	4618      	mov	r0, r3
 80049b0:	4621      	mov	r1, r4
 80049b2:	f002 faa9 	bl	8006f08 <sin>
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	4b31      	ldr	r3, [pc, #196]	; (8004a80 <main+0x3e8>)
 80049bc:	f7fb fd84 	bl	80004c8 <__aeabi_dmul>
 80049c0:	4603      	mov	r3, r0
 80049c2:	460c      	mov	r4, r1
 80049c4:	4618      	mov	r0, r3
 80049c6:	4621      	mov	r1, r4
 80049c8:	f7fc f856 	bl	8000a78 <__aeabi_d2f>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <main+0x404>)
 80049d0:	601a      	str	r2, [r3, #0]
	  new_y =50.0*sin(9*i);
 80049d2:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <main+0x3e0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	492f      	ldr	r1, [pc, #188]	; (8004a94 <main+0x3fc>)
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fc f9ab 	bl	8000d34 <__aeabi_fmul>
 80049de:	4603      	mov	r3, r0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fb fd19 	bl	8000418 <__aeabi_f2d>
 80049e6:	4603      	mov	r3, r0
 80049e8:	460c      	mov	r4, r1
 80049ea:	4618      	mov	r0, r3
 80049ec:	4621      	mov	r1, r4
 80049ee:	f002 fa8b 	bl	8006f08 <sin>
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	4b22      	ldr	r3, [pc, #136]	; (8004a80 <main+0x3e8>)
 80049f8:	f7fb fd66 	bl	80004c8 <__aeabi_dmul>
 80049fc:	4603      	mov	r3, r0
 80049fe:	460c      	mov	r4, r1
 8004a00:	4618      	mov	r0, r3
 8004a02:	4621      	mov	r1, r4
 8004a04:	f7fc f838 	bl	8000a78 <__aeabi_d2f>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b25      	ldr	r3, [pc, #148]	; (8004aa0 <main+0x408>)
 8004a0c:	601a      	str	r2, [r3, #0]


	  while(TRAJECTORY_IsBusy(&TRAJECTORY));
 8004a0e:	bf00      	nop
 8004a10:	481e      	ldr	r0, [pc, #120]	; (8004a8c <main+0x3f4>)
 8004a12:	f001 fd61 	bl	80064d8 <TRAJECTORY_IsBusy>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f9      	bne.n	8004a10 <main+0x378>
//	  delta_calcForward(-ENCODER_GetAbsoluteAngle(&ENCODER_0),-ENCODER_GetAbsoluteAngle(&ENCODER_1),-ENCODER_GetAbsoluteAngle(&ENCODER_2),&xi,&yi,&zi);
	  TRAJECTORY_SetTrajectory(&TRAJECTORY, old_x, old_y, -327.5, new_x, new_y,-327.5, 5.0);
 8004a1c:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <main+0x3f8>)
 8004a1e:	6818      	ldr	r0, [r3, #0]
 8004a20:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <main+0x400>)
 8004a22:	681c      	ldr	r4, [r3, #0]
 8004a24:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <main+0x404>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1d      	ldr	r2, [pc, #116]	; (8004aa0 <main+0x408>)
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	e03a      	b.n	8004aa4 <main+0x40c>
 8004a2e:	bf00      	nop
 8004a30:	51eb851f 	.word	0x51eb851f
 8004a34:	3fe91eb8 	.word	0x3fe91eb8
 8004a38:	47ae147b 	.word	0x47ae147b
 8004a3c:	3f847ae1 	.word	0x3f847ae1
 8004a40:	002dc6bf 	.word	0x002dc6bf
 8004a44:	200006a8 	.word	0x200006a8
 8004a48:	20000648 	.word	0x20000648
 8004a4c:	20000608 	.word	0x20000608
 8004a50:	41200000 	.word	0x41200000
 8004a54:	20000628 	.word	0x20000628
 8004a58:	20000688 	.word	0x20000688
 8004a5c:	20000668 	.word	0x20000668
 8004a60:	2000010c 	.word	0x2000010c
 8004a64:	200000fc 	.word	0x200000fc
 8004a68:	200000ec 	.word	0x200000ec
 8004a6c:	20000584 	.word	0x20000584
 8004a70:	20000580 	.word	0x20000580
 8004a74:	200005a0 	.word	0x200005a0
 8004a78:	200000b4 	.word	0x200000b4
 8004a7c:	40a00000 	.word	0x40a00000
 8004a80:	40490000 	.word	0x40490000
 8004a84:	40400000 	.word	0x40400000
 8004a88:	c3a34000 	.word	0xc3a34000
 8004a8c:	200007ec 	.word	0x200007ec
 8004a90:	20000594 	.word	0x20000594
 8004a94:	41100000 	.word	0x41100000
 8004a98:	20000598 	.word	0x20000598
 8004a9c:	20000588 	.word	0x20000588
 8004aa0:	20000590 	.word	0x20000590
 8004aa4:	4907      	ldr	r1, [pc, #28]	; (8004ac4 <main+0x42c>)
 8004aa6:	9103      	str	r1, [sp, #12]
 8004aa8:	4907      	ldr	r1, [pc, #28]	; (8004ac8 <main+0x430>)
 8004aaa:	9102      	str	r1, [sp, #8]
 8004aac:	9201      	str	r2, [sp, #4]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <main+0x430>)
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	4601      	mov	r1, r0
 8004ab6:	4805      	ldr	r0, [pc, #20]	; (8004acc <main+0x434>)
 8004ab8:	f001 fc6e 	bl	8006398 <TRAJECTORY_SetTrajectory>
	  TRAJECTORY_StartTrajectory(&TRAJECTORY);
 8004abc:	4803      	ldr	r0, [pc, #12]	; (8004acc <main+0x434>)
 8004abe:	f001 fcf5 	bl	80064ac <TRAJECTORY_StartTrajectory>
	  delta_calcForward(-ENCODER_GetAbsoluteAngle(&ENCODER_0),-ENCODER_GetAbsoluteAngle(&ENCODER_1),-ENCODER_GetAbsoluteAngle(&ENCODER_2),&xi,&yi,&zi);
 8004ac2:	e6f4      	b.n	80048ae <main+0x216>
 8004ac4:	40a00000 	.word	0x40a00000
 8004ac8:	c3a3c000 	.word	0xc3a3c000
 8004acc:	200007ec 	.word	0x200007ec

08004ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b094      	sub	sp, #80	; 0x50
 8004ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ada:	2228      	movs	r2, #40	; 0x28
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f002 f844 	bl	8006b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ae4:	f107 0314 	add.w	r3, r7, #20
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004af4:	1d3b      	adds	r3, r7, #4
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	605a      	str	r2, [r3, #4]
 8004afc:	609a      	str	r2, [r3, #8]
 8004afe:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004b00:	2301      	movs	r3, #1
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b12:	2302      	movs	r3, #2
 8004b14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004b1c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fd f8e0 	bl	8001cec <HAL_RCC_OscConfig>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004b32:	f000 f82a 	bl	8004b8a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b36:	230f      	movs	r3, #15
 8004b38:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b46:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004b4c:	f107 0314 	add.w	r3, r7, #20
 8004b50:	2102      	movs	r1, #2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fb4a 	bl	80021ec <HAL_RCC_ClockConfig>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8004b5e:	f000 f814 	bl	8004b8a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8004b62:	2312      	movs	r3, #18
 8004b64:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b6a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b70:	1d3b      	adds	r3, r7, #4
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fd fcd6 	bl	8002524 <HAL_RCCEx_PeriphCLKConfig>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004b7e:	f000 f804 	bl	8004b8a <Error_Handler>
  }
}
 8004b82:	bf00      	nop
 8004b84:	3750      	adds	r7, #80	; 0x50
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004b8e:	bf00      	nop
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <LL_TIM_GetAutoReload>:
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr

08004bac <MOTOR_SetRequiredSpeed>:
MOTOR_TypeDef	MOTOR_0;
MOTOR_TypeDef	MOTOR_1;
MOTOR_TypeDef	MOTOR_2;

void MOTOR_SetRequiredSpeed(MOTOR_TypeDef* MOTOR, int16_t speed)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	807b      	strh	r3, [r7, #2]

//	DEAD ZONE
	if(speed > 0)
 8004bb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	dd08      	ble.n	8004bd2 <MOTOR_SetRequiredSpeed+0x26>
	{
		speed+= MOTOR->deadZoneForward;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	887b      	ldrh	r3, [r7, #2]
 8004bca:	4413      	add	r3, r2
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	807b      	strh	r3, [r7, #2]
 8004bd0:	e00b      	b.n	8004bea <MOTOR_SetRequiredSpeed+0x3e>
	}
	else if(speed < 0)
 8004bd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	da07      	bge.n	8004bea <MOTOR_SetRequiredSpeed+0x3e>
	{
			speed-= MOTOR->deadZoneBackward;
 8004bda:	887a      	ldrh	r2, [r7, #2]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	807b      	strh	r3, [r7, #2]
	}

	speed = speed * MOTOR->polarization;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	887a      	ldrh	r2, [r7, #2]
 8004bf4:	fb02 f303 	mul.w	r3, r2, r3
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	807b      	strh	r3, [r7, #2]

	if(speed > 0)
 8004bfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	dd03      	ble.n	8004c0c <MOTOR_SetRequiredSpeed+0x60>
	{
			MOTOR->direction = FORWARD;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	751a      	strb	r2, [r3, #20]
 8004c0a:	e00a      	b.n	8004c22 <MOTOR_SetRequiredSpeed+0x76>
	}
	else if(speed < 0)
 8004c0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	da03      	bge.n	8004c1c <MOTOR_SetRequiredSpeed+0x70>
	{
			MOTOR->direction = BACKWARD;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	751a      	strb	r2, [r3, #20]
 8004c1a:	e002      	b.n	8004c22 <MOTOR_SetRequiredSpeed+0x76>
	}
	else MOTOR->direction = STOP;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	751a      	strb	r2, [r3, #20]


	//SATURATION
	if(speed > 0 && speed >  MOTOR_PULSE_MAX) 		MOTOR->speed =  MOTOR_PULSE_MAX;
 8004c22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	dd07      	ble.n	8004c3a <MOTOR_SetRequiredSpeed+0x8e>
 8004c2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c2e:	2b64      	cmp	r3, #100	; 0x64
 8004c30:	dd03      	ble.n	8004c3a <MOTOR_SetRequiredSpeed+0x8e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2264      	movs	r2, #100	; 0x64
 8004c36:	82da      	strh	r2, [r3, #22]
 8004c38:	e010      	b.n	8004c5c <MOTOR_SetRequiredSpeed+0xb0>
	else if(speed < 0 && (-speed) >  MOTOR_PULSE_MAX) 	MOTOR->speed = -MOTOR_PULSE_MAX;
 8004c3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	da09      	bge.n	8004c56 <MOTOR_SetRequiredSpeed+0xaa>
 8004c42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c46:	425b      	negs	r3, r3
 8004c48:	2b64      	cmp	r3, #100	; 0x64
 8004c4a:	dd04      	ble.n	8004c56 <MOTOR_SetRequiredSpeed+0xaa>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8004c52:	82da      	strh	r2, [r3, #22]
 8004c54:	e002      	b.n	8004c5c <MOTOR_SetRequiredSpeed+0xb0>
	else MOTOR->speed = speed;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	887a      	ldrh	r2, [r7, #2]
 8004c5a:	82da      	strh	r2, [r3, #22]
//	 MOTOR->speed = speed;

}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr
	...

08004c68 <MOTOR_SetCurrentSpeed>:

void MOTOR_SetCurrentSpeed(MOTOR_TypeDef* MOTOR)
{
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	uint16_t pulseLength;

	// AVOIDING H BRIDGE BURN/////////////////////////////////
	if(MOTOR->previousDirection != MOTOR->direction)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	7d5a      	ldrb	r2, [r3, #21]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7d1b      	ldrb	r3, [r3, #20]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d010      	beq.n	8004c9e <MOTOR_SetCurrentSpeed+0x36>
	{
		HAL_GPIO_WritePin(MOTOR->GPIO_Port_B,MOTOR->GPIO_Pin_B,RESET);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6858      	ldr	r0, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	895b      	ldrh	r3, [r3, #10]
 8004c84:	2200      	movs	r2, #0
 8004c86:	4619      	mov	r1, r3
 8004c88:	f7fc ff14 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR->GPIO_Port_A,MOTOR->GPIO_Pin_A,RESET);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	891b      	ldrh	r3, [r3, #8]
 8004c94:	2200      	movs	r2, #0
 8004c96:	4619      	mov	r1, r3
 8004c98:	f7fc ff0c 	bl	8001ab4 <HAL_GPIO_WritePin>
 8004c9c:	e066      	b.n	8004d6c <MOTOR_SetCurrentSpeed+0x104>
	}
	//////////////////////////////////////////////////////////
	else
	{
		if(MOTOR->direction == FORWARD)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	7d1b      	ldrb	r3, [r3, #20]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d123      	bne.n	8004cee <MOTOR_SetCurrentSpeed+0x86>
		{
			pulseLength = (MOTOR->speed * LL_TIM_GetAutoReload(MOTOR->TIM)/ MOTOR_PULSE_MAX)-1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004cac:	461c      	mov	r4, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff ff6f 	bl	8004b96 <LL_TIM_GetAutoReload>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	fb03 f304 	mul.w	r3, r3, r4
 8004cbe:	4a31      	ldr	r2, [pc, #196]	; (8004d84 <MOTOR_SetCurrentSpeed+0x11c>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	81fb      	strh	r3, [r7, #14]
			HAL_GPIO_WritePin(MOTOR->GPIO_Port_B,MOTOR->GPIO_Pin_B,RESET);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6858      	ldr	r0, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	895b      	ldrh	r3, [r3, #10]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	f7fc feec 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR->GPIO_Port_A,MOTOR->GPIO_Pin_A,SET);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	891b      	ldrh	r3, [r3, #8]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	f7fc fee4 	bl	8001ab4 <HAL_GPIO_WritePin>
 8004cec:	e03e      	b.n	8004d6c <MOTOR_SetCurrentSpeed+0x104>
		}
		else if(MOTOR->direction == BACKWARD)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	7d1b      	ldrb	r3, [r3, #20]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d124      	bne.n	8004d40 <MOTOR_SetCurrentSpeed+0xd8>
		{
			pulseLength = ((-MOTOR->speed) * LL_TIM_GetAutoReload(MOTOR->TIM)/ MOTOR_PULSE_MAX)-1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004cfc:	425b      	negs	r3, r3
 8004cfe:	461c      	mov	r4, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff ff46 	bl	8004b96 <LL_TIM_GetAutoReload>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	fb03 f304 	mul.w	r3, r3, r4
 8004d10:	4a1c      	ldr	r2, [pc, #112]	; (8004d84 <MOTOR_SetCurrentSpeed+0x11c>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	81fb      	strh	r3, [r7, #14]
			HAL_GPIO_WritePin(MOTOR->GPIO_Port_A,MOTOR->GPIO_Pin_A,RESET);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	891b      	ldrh	r3, [r3, #8]
 8004d26:	2200      	movs	r2, #0
 8004d28:	4619      	mov	r1, r3
 8004d2a:	f7fc fec3 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR->GPIO_Port_B,MOTOR->GPIO_Pin_B,SET);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6858      	ldr	r0, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	895b      	ldrh	r3, [r3, #10]
 8004d36:	2201      	movs	r2, #1
 8004d38:	4619      	mov	r1, r3
 8004d3a:	f7fc febb 	bl	8001ab4 <HAL_GPIO_WritePin>
 8004d3e:	e015      	b.n	8004d6c <MOTOR_SetCurrentSpeed+0x104>
		}
		else if(MOTOR->direction == STOP)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	7d1b      	ldrb	r3, [r3, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d111      	bne.n	8004d6c <MOTOR_SetCurrentSpeed+0x104>
		{
			pulseLength = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	81fb      	strh	r3, [r7, #14]
			HAL_GPIO_WritePin(MOTOR->GPIO_Port_A,MOTOR->GPIO_Pin_A,RESET);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	891b      	ldrh	r3, [r3, #8]
 8004d54:	2200      	movs	r2, #0
 8004d56:	4619      	mov	r1, r3
 8004d58:	f7fc feac 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR->GPIO_Port_B,MOTOR->GPIO_Pin_B,RESET);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6858      	ldr	r0, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	895b      	ldrh	r3, [r3, #10]
 8004d64:	2200      	movs	r2, #0
 8004d66:	4619      	mov	r1, r3
 8004d68:	f7fc fea4 	bl	8001ab4 <HAL_GPIO_WritePin>
		}
	}
//	LL_TIM_SetCounter(MOTOR->TIM, 0);
	WRITE_REG(*MOTOR->CCR,pulseLength);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	89fa      	ldrh	r2, [r7, #14]
 8004d72:	601a      	str	r2, [r3, #0]

	MOTOR->previousDirection = MOTOR->direction;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	7d1a      	ldrb	r2, [r3, #20]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	755a      	strb	r2, [r3, #21]
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd90      	pop	{r4, r7, pc}
 8004d84:	51eb851f 	.word	0x51eb851f

08004d88 <MOTOR_Init>:

void MOTOR_Init()
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
	MOTOR_0.GPIO_Port_A = MOTOR_0A_GPIO_Port;
 8004d8c:	4b39      	ldr	r3, [pc, #228]	; (8004e74 <MOTOR_Init+0xec>)
 8004d8e:	4a3a      	ldr	r2, [pc, #232]	; (8004e78 <MOTOR_Init+0xf0>)
 8004d90:	601a      	str	r2, [r3, #0]
	MOTOR_0.GPIO_Pin_A = MOTOR_0A_Pin;
 8004d92:	4b38      	ldr	r3, [pc, #224]	; (8004e74 <MOTOR_Init+0xec>)
 8004d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d98:	811a      	strh	r2, [r3, #8]
	MOTOR_0.GPIO_Port_B = MOTOR_0B_GPIO_Port;
 8004d9a:	4b36      	ldr	r3, [pc, #216]	; (8004e74 <MOTOR_Init+0xec>)
 8004d9c:	4a36      	ldr	r2, [pc, #216]	; (8004e78 <MOTOR_Init+0xf0>)
 8004d9e:	605a      	str	r2, [r3, #4]
	MOTOR_0.GPIO_Pin_B =  MOTOR_0B_Pin;
 8004da0:	4b34      	ldr	r3, [pc, #208]	; (8004e74 <MOTOR_Init+0xec>)
 8004da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004da6:	815a      	strh	r2, [r3, #10]
	MOTOR_0.TIM = TIM1;
 8004da8:	4b32      	ldr	r3, [pc, #200]	; (8004e74 <MOTOR_Init+0xec>)
 8004daa:	4a34      	ldr	r2, [pc, #208]	; (8004e7c <MOTOR_Init+0xf4>)
 8004dac:	60da      	str	r2, [r3, #12]
	MOTOR_0.CCR = &(TIM1->CCR1);
 8004dae:	4b31      	ldr	r3, [pc, #196]	; (8004e74 <MOTOR_Init+0xec>)
 8004db0:	4a33      	ldr	r2, [pc, #204]	; (8004e80 <MOTOR_Init+0xf8>)
 8004db2:	611a      	str	r2, [r3, #16]
	MOTOR_0.direction = FORWARD;
 8004db4:	4b2f      	ldr	r3, [pc, #188]	; (8004e74 <MOTOR_Init+0xec>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	751a      	strb	r2, [r3, #20]
	MOTOR_0.previousDirection = FORWARD;
 8004dba:	4b2e      	ldr	r3, [pc, #184]	; (8004e74 <MOTOR_Init+0xec>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	755a      	strb	r2, [r3, #21]
	MOTOR_0.speed = 0;
 8004dc0:	4b2c      	ldr	r3, [pc, #176]	; (8004e74 <MOTOR_Init+0xec>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	82da      	strh	r2, [r3, #22]
	MOTOR_0.polarization = MOTOR_0_POLARIZATION;
 8004dc6:	4b2b      	ldr	r3, [pc, #172]	; (8004e74 <MOTOR_Init+0xec>)
 8004dc8:	22ff      	movs	r2, #255	; 0xff
 8004dca:	761a      	strb	r2, [r3, #24]
	MOTOR_0.deadZoneForward = 20;
 8004dcc:	4b29      	ldr	r3, [pc, #164]	; (8004e74 <MOTOR_Init+0xec>)
 8004dce:	2214      	movs	r2, #20
 8004dd0:	835a      	strh	r2, [r3, #26]
	MOTOR_0.deadZoneBackward = 5;
 8004dd2:	4b28      	ldr	r3, [pc, #160]	; (8004e74 <MOTOR_Init+0xec>)
 8004dd4:	2205      	movs	r2, #5
 8004dd6:	839a      	strh	r2, [r3, #28]

	MOTOR_1.GPIO_Port_A = MOTOR_1A_GPIO_Port;
 8004dd8:	4b2a      	ldr	r3, [pc, #168]	; (8004e84 <MOTOR_Init+0xfc>)
 8004dda:	4a27      	ldr	r2, [pc, #156]	; (8004e78 <MOTOR_Init+0xf0>)
 8004ddc:	601a      	str	r2, [r3, #0]
	MOTOR_1.GPIO_Pin_A = MOTOR_1A_Pin;
 8004dde:	4b29      	ldr	r3, [pc, #164]	; (8004e84 <MOTOR_Init+0xfc>)
 8004de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004de4:	811a      	strh	r2, [r3, #8]
	MOTOR_1.GPIO_Port_B = MOTOR_1B_GPIO_Port;
 8004de6:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <MOTOR_Init+0xfc>)
 8004de8:	4a23      	ldr	r2, [pc, #140]	; (8004e78 <MOTOR_Init+0xf0>)
 8004dea:	605a      	str	r2, [r3, #4]
	MOTOR_1.GPIO_Pin_B =  MOTOR_1B_Pin;
 8004dec:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <MOTOR_Init+0xfc>)
 8004dee:	2280      	movs	r2, #128	; 0x80
 8004df0:	815a      	strh	r2, [r3, #10]
	MOTOR_1.TIM = TIM1;
 8004df2:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <MOTOR_Init+0xfc>)
 8004df4:	4a21      	ldr	r2, [pc, #132]	; (8004e7c <MOTOR_Init+0xf4>)
 8004df6:	60da      	str	r2, [r3, #12]
	MOTOR_1.CCR = &(TIM1->CCR2);
 8004df8:	4b22      	ldr	r3, [pc, #136]	; (8004e84 <MOTOR_Init+0xfc>)
 8004dfa:	4a23      	ldr	r2, [pc, #140]	; (8004e88 <MOTOR_Init+0x100>)
 8004dfc:	611a      	str	r2, [r3, #16]
	MOTOR_1.direction = FORWARD;
 8004dfe:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <MOTOR_Init+0xfc>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	751a      	strb	r2, [r3, #20]
	MOTOR_1.previousDirection = FORWARD;
 8004e04:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <MOTOR_Init+0xfc>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	755a      	strb	r2, [r3, #21]
	MOTOR_1.speed = 0;
 8004e0a:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <MOTOR_Init+0xfc>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	82da      	strh	r2, [r3, #22]
	MOTOR_1.polarization = MOTOR_1_POLARIZATION;
 8004e10:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <MOTOR_Init+0xfc>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	761a      	strb	r2, [r3, #24]
	MOTOR_1.deadZoneForward = 20;
 8004e16:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <MOTOR_Init+0xfc>)
 8004e18:	2214      	movs	r2, #20
 8004e1a:	835a      	strh	r2, [r3, #26]
	MOTOR_1.deadZoneBackward = 5;
 8004e1c:	4b19      	ldr	r3, [pc, #100]	; (8004e84 <MOTOR_Init+0xfc>)
 8004e1e:	2205      	movs	r2, #5
 8004e20:	839a      	strh	r2, [r3, #28]

	MOTOR_2.GPIO_Port_A = MOTOR_2A_GPIO_Port;
 8004e22:	4b1a      	ldr	r3, [pc, #104]	; (8004e8c <MOTOR_Init+0x104>)
 8004e24:	4a1a      	ldr	r2, [pc, #104]	; (8004e90 <MOTOR_Init+0x108>)
 8004e26:	601a      	str	r2, [r3, #0]
	MOTOR_2.GPIO_Pin_A = MOTOR_2A_Pin;
 8004e28:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <MOTOR_Init+0x104>)
 8004e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e2e:	811a      	strh	r2, [r3, #8]
	MOTOR_2.GPIO_Port_B = MOTOR_2B_GPIO_Port;
 8004e30:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <MOTOR_Init+0x104>)
 8004e32:	4a11      	ldr	r2, [pc, #68]	; (8004e78 <MOTOR_Init+0xf0>)
 8004e34:	605a      	str	r2, [r3, #4]
	MOTOR_2.GPIO_Pin_B =  MOTOR_2B_Pin;
 8004e36:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <MOTOR_Init+0x104>)
 8004e38:	2240      	movs	r2, #64	; 0x40
 8004e3a:	815a      	strh	r2, [r3, #10]
	MOTOR_2.TIM = TIM1;
 8004e3c:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <MOTOR_Init+0x104>)
 8004e3e:	4a0f      	ldr	r2, [pc, #60]	; (8004e7c <MOTOR_Init+0xf4>)
 8004e40:	60da      	str	r2, [r3, #12]
	MOTOR_2.CCR = &(TIM1->CCR3);
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <MOTOR_Init+0x104>)
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <MOTOR_Init+0x10c>)
 8004e46:	611a      	str	r2, [r3, #16]
	MOTOR_2.direction = FORWARD;
 8004e48:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <MOTOR_Init+0x104>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	751a      	strb	r2, [r3, #20]
	MOTOR_2.previousDirection = FORWARD;
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <MOTOR_Init+0x104>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	755a      	strb	r2, [r3, #21]
	MOTOR_2.speed = 0;
 8004e54:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <MOTOR_Init+0x104>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	82da      	strh	r2, [r3, #22]
	MOTOR_2.polarization = MOTOR_2_POLARIZATION;
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <MOTOR_Init+0x104>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	761a      	strb	r2, [r3, #24]
	MOTOR_2.deadZoneForward = 20;
 8004e60:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <MOTOR_Init+0x104>)
 8004e62:	2214      	movs	r2, #20
 8004e64:	835a      	strh	r2, [r3, #26]
	MOTOR_2.deadZoneBackward = 5;
 8004e66:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <MOTOR_Init+0x104>)
 8004e68:	2205      	movs	r2, #5
 8004e6a:	839a      	strh	r2, [r3, #28]
}
 8004e6c:	bf00      	nop
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr
 8004e74:	200005e8 	.word	0x200005e8
 8004e78:	40010800 	.word	0x40010800
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40012c34 	.word	0x40012c34
 8004e84:	200005a8 	.word	0x200005a8
 8004e88:	40012c38 	.word	0x40012c38
 8004e8c:	200005c8 	.word	0x200005c8
 8004e90:	40011000 	.word	0x40011000
 8004e94:	40012c3c 	.word	0x40012c3c

08004e98 <PID_Calc>:
PID_TypeDef PID_0_Speed;
PID_TypeDef PID_1_Speed;
PID_TypeDef PID_2_Speed;

int16_t	PID_Calc(PID_TypeDef* PID, float y)
{
 8004e98:	b5b0      	push	{r4, r5, r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
	PID->e = PID->r - y;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6839      	ldr	r1, [r7, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fb fe39 	bl	8000b20 <__aeabi_fsub>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	605a      	str	r2, [r3, #4]
	PID->integral += PID->e  * PID->Ki * dt;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb faac 	bl	8000418 <__aeabi_f2d>
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	460d      	mov	r5, r1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f7fb ff30 	bl	8000d34 <__aeabi_fmul>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fb fa9e 	bl	8000418 <__aeabi_f2d>
 8004edc:	a332      	add	r3, pc, #200	; (adr r3, 8004fa8 <PID_Calc+0x110>)
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	f7fb faf1 	bl	80004c8 <__aeabi_dmul>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4620      	mov	r0, r4
 8004eec:	4629      	mov	r1, r5
 8004eee:	f7fb f935 	bl	800015c <__adddf3>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	4621      	mov	r1, r4
 8004efa:	f7fb fdbd 	bl	8000a78 <__aeabi_d2f>
 8004efe:	4602      	mov	r2, r0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	615a      	str	r2, [r3, #20]
	PID->u = (int16_t)(PID->e  * PID->Kp  + PID->integral);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f7fb ff10 	bl	8000d34 <__aeabi_fmul>
 8004f14:	4603      	mov	r3, r0
 8004f16:	461a      	mov	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f7fb fe00 	bl	8000b24 <__addsf3>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fc f8ca 	bl	80010c0 <__aeabi_f2iz>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	b21a      	sxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	83da      	strh	r2, [r3, #30]

	if(PID->u >  MOTOR_PULSE_MAX) PID->u = MOTOR_PULSE_MAX;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004f3a:	2b64      	cmp	r3, #100	; 0x64
 8004f3c:	dd03      	ble.n	8004f46 <PID_Calc+0xae>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2264      	movs	r2, #100	; 0x64
 8004f42:	83da      	strh	r2, [r3, #30]
 8004f44:	e009      	b.n	8004f5a <PID_Calc+0xc2>
	else if(PID->u <  -MOTOR_PULSE_MAX)	PID->u = -MOTOR_PULSE_MAX;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004f4c:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004f50:	da03      	bge.n	8004f5a <PID_Calc+0xc2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8004f58:	83da      	strh	r2, [r3, #30]

	if(PID->integral > MOTOR_PULSE_MAX) PID->integral = MOTOR_PULSE_MAX;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	4914      	ldr	r1, [pc, #80]	; (8004fb0 <PID_Calc+0x118>)
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fc f8a3 	bl	80010ac <__aeabi_fcmpgt>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <PID_Calc+0xdc>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a10      	ldr	r2, [pc, #64]	; (8004fb0 <PID_Calc+0x118>)
 8004f70:	615a      	str	r2, [r3, #20]
 8004f72:	e00b      	b.n	8004f8c <PID_Calc+0xf4>
	else if(PID->integral < -MOTOR_PULSE_MAX) PID->integral = -MOTOR_PULSE_MAX;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	490e      	ldr	r1, [pc, #56]	; (8004fb4 <PID_Calc+0x11c>)
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fc f878 	bl	8001070 <__aeabi_fcmplt>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <PID_Calc+0xf4>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <PID_Calc+0x11c>)
 8004f8a:	615a      	str	r2, [r3, #20]

	PID->previousErrorValue = PID->e;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	619a      	str	r2, [r3, #24]
	return PID->u;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	f3af 8000 	nop.w
 8004fa8:	47ae147b 	.word	0x47ae147b
 8004fac:	3f847ae1 	.word	0x3f847ae1
 8004fb0:	42c80000 	.word	0x42c80000
 8004fb4:	c2c80000 	.word	0xc2c80000

08004fb8 <PID_init>:

void PID_init()
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0

	// POS
	PID_0_Pos.r = 0;
 8004fbc:	4b64      	ldr	r3, [pc, #400]	; (8005150 <PID_init+0x198>)
 8004fbe:	f04f 0200 	mov.w	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
	PID_0_Pos.Kp = 20.0;
 8004fc4:	4b62      	ldr	r3, [pc, #392]	; (8005150 <PID_init+0x198>)
 8004fc6:	4a63      	ldr	r2, [pc, #396]	; (8005154 <PID_init+0x19c>)
 8004fc8:	609a      	str	r2, [r3, #8]
	PID_0_Pos.Kd = 0.0;
 8004fca:	4b61      	ldr	r3, [pc, #388]	; (8005150 <PID_init+0x198>)
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	60da      	str	r2, [r3, #12]
	PID_0_Pos.Ki = 10.0;
 8004fd2:	4b5f      	ldr	r3, [pc, #380]	; (8005150 <PID_init+0x198>)
 8004fd4:	4a60      	ldr	r2, [pc, #384]	; (8005158 <PID_init+0x1a0>)
 8004fd6:	611a      	str	r2, [r3, #16]
	PID_0_Pos.integral = 0;
 8004fd8:	4b5d      	ldr	r3, [pc, #372]	; (8005150 <PID_init+0x198>)
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	615a      	str	r2, [r3, #20]
	PID_0_Pos.previousErrorValue = 0;
 8004fe0:	4b5b      	ldr	r3, [pc, #364]	; (8005150 <PID_init+0x198>)
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	619a      	str	r2, [r3, #24]
	PID_0_Pos.enable = false;
 8004fe8:	4b59      	ldr	r3, [pc, #356]	; (8005150 <PID_init+0x198>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	771a      	strb	r2, [r3, #28]
	PID_0_Pos.u = 0;
 8004fee:	4b58      	ldr	r3, [pc, #352]	; (8005150 <PID_init+0x198>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	83da      	strh	r2, [r3, #30]
	PID_0_Pos.e = 0;
 8004ff4:	4b56      	ldr	r3, [pc, #344]	; (8005150 <PID_init+0x198>)
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	605a      	str	r2, [r3, #4]

	PID_1_Pos.r = 0;
 8004ffc:	4b57      	ldr	r3, [pc, #348]	; (800515c <PID_init+0x1a4>)
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
	PID_1_Pos.Kp = 20.0;
 8005004:	4b55      	ldr	r3, [pc, #340]	; (800515c <PID_init+0x1a4>)
 8005006:	4a53      	ldr	r2, [pc, #332]	; (8005154 <PID_init+0x19c>)
 8005008:	609a      	str	r2, [r3, #8]
	PID_1_Pos.Kd = 0.0;
 800500a:	4b54      	ldr	r3, [pc, #336]	; (800515c <PID_init+0x1a4>)
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	60da      	str	r2, [r3, #12]
	PID_1_Pos.Ki = 10.0;
 8005012:	4b52      	ldr	r3, [pc, #328]	; (800515c <PID_init+0x1a4>)
 8005014:	4a50      	ldr	r2, [pc, #320]	; (8005158 <PID_init+0x1a0>)
 8005016:	611a      	str	r2, [r3, #16]
	PID_1_Pos.integral = 0;
 8005018:	4b50      	ldr	r3, [pc, #320]	; (800515c <PID_init+0x1a4>)
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	615a      	str	r2, [r3, #20]
	PID_1_Pos.previousErrorValue = 0;
 8005020:	4b4e      	ldr	r3, [pc, #312]	; (800515c <PID_init+0x1a4>)
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	619a      	str	r2, [r3, #24]
	PID_1_Pos.enable = false;
 8005028:	4b4c      	ldr	r3, [pc, #304]	; (800515c <PID_init+0x1a4>)
 800502a:	2200      	movs	r2, #0
 800502c:	771a      	strb	r2, [r3, #28]
	PID_1_Pos.u = 0;
 800502e:	4b4b      	ldr	r3, [pc, #300]	; (800515c <PID_init+0x1a4>)
 8005030:	2200      	movs	r2, #0
 8005032:	83da      	strh	r2, [r3, #30]
	PID_1_Pos.e = 0;
 8005034:	4b49      	ldr	r3, [pc, #292]	; (800515c <PID_init+0x1a4>)
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	605a      	str	r2, [r3, #4]

	PID_2_Pos.r = 0;
 800503c:	4b48      	ldr	r3, [pc, #288]	; (8005160 <PID_init+0x1a8>)
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
	PID_2_Pos.Kp = 20.0;
 8005044:	4b46      	ldr	r3, [pc, #280]	; (8005160 <PID_init+0x1a8>)
 8005046:	4a43      	ldr	r2, [pc, #268]	; (8005154 <PID_init+0x19c>)
 8005048:	609a      	str	r2, [r3, #8]
	PID_2_Pos.Kd = 0.0;
 800504a:	4b45      	ldr	r3, [pc, #276]	; (8005160 <PID_init+0x1a8>)
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	60da      	str	r2, [r3, #12]
	PID_2_Pos.Ki = 10.0;
 8005052:	4b43      	ldr	r3, [pc, #268]	; (8005160 <PID_init+0x1a8>)
 8005054:	4a40      	ldr	r2, [pc, #256]	; (8005158 <PID_init+0x1a0>)
 8005056:	611a      	str	r2, [r3, #16]
	PID_2_Pos.integral = 0;
 8005058:	4b41      	ldr	r3, [pc, #260]	; (8005160 <PID_init+0x1a8>)
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	615a      	str	r2, [r3, #20]
	PID_2_Pos.previousErrorValue = 0;
 8005060:	4b3f      	ldr	r3, [pc, #252]	; (8005160 <PID_init+0x1a8>)
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	619a      	str	r2, [r3, #24]
	PID_2_Pos.enable = false;
 8005068:	4b3d      	ldr	r3, [pc, #244]	; (8005160 <PID_init+0x1a8>)
 800506a:	2200      	movs	r2, #0
 800506c:	771a      	strb	r2, [r3, #28]
	PID_2_Pos.u = 0;
 800506e:	4b3c      	ldr	r3, [pc, #240]	; (8005160 <PID_init+0x1a8>)
 8005070:	2200      	movs	r2, #0
 8005072:	83da      	strh	r2, [r3, #30]
	PID_2_Pos.e = 0;
 8005074:	4b3a      	ldr	r3, [pc, #232]	; (8005160 <PID_init+0x1a8>)
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	605a      	str	r2, [r3, #4]

	//SPEED
	PID_0_Speed.r = 0;
 800507c:	4b39      	ldr	r3, [pc, #228]	; (8005164 <PID_init+0x1ac>)
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
	PID_0_Speed.Kp = 1.0;
 8005084:	4b37      	ldr	r3, [pc, #220]	; (8005164 <PID_init+0x1ac>)
 8005086:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800508a:	609a      	str	r2, [r3, #8]
	PID_0_Speed.Kd = 0.0;
 800508c:	4b35      	ldr	r3, [pc, #212]	; (8005164 <PID_init+0x1ac>)
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	60da      	str	r2, [r3, #12]
	PID_0_Speed.Ki = 1.0;
 8005094:	4b33      	ldr	r3, [pc, #204]	; (8005164 <PID_init+0x1ac>)
 8005096:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800509a:	611a      	str	r2, [r3, #16]
	PID_0_Speed.integral = 0;
 800509c:	4b31      	ldr	r3, [pc, #196]	; (8005164 <PID_init+0x1ac>)
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	615a      	str	r2, [r3, #20]
	PID_0_Speed.previousErrorValue = 0;
 80050a4:	4b2f      	ldr	r3, [pc, #188]	; (8005164 <PID_init+0x1ac>)
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	619a      	str	r2, [r3, #24]
	PID_0_Speed.enable = false;
 80050ac:	4b2d      	ldr	r3, [pc, #180]	; (8005164 <PID_init+0x1ac>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	771a      	strb	r2, [r3, #28]
	PID_0_Speed.u = 0;
 80050b2:	4b2c      	ldr	r3, [pc, #176]	; (8005164 <PID_init+0x1ac>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	83da      	strh	r2, [r3, #30]
	PID_0_Speed.e = 0;
 80050b8:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <PID_init+0x1ac>)
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	605a      	str	r2, [r3, #4]

	PID_1_Speed.r = 0;
 80050c0:	4b29      	ldr	r3, [pc, #164]	; (8005168 <PID_init+0x1b0>)
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
	PID_1_Speed.Kp = 1.0;
 80050c8:	4b27      	ldr	r3, [pc, #156]	; (8005168 <PID_init+0x1b0>)
 80050ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80050ce:	609a      	str	r2, [r3, #8]
	PID_1_Speed.Kd = 0.0;
 80050d0:	4b25      	ldr	r3, [pc, #148]	; (8005168 <PID_init+0x1b0>)
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	60da      	str	r2, [r3, #12]
	PID_1_Speed.Ki = 1.0;
 80050d8:	4b23      	ldr	r3, [pc, #140]	; (8005168 <PID_init+0x1b0>)
 80050da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80050de:	611a      	str	r2, [r3, #16]
	PID_1_Speed.integral = 0;
 80050e0:	4b21      	ldr	r3, [pc, #132]	; (8005168 <PID_init+0x1b0>)
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	615a      	str	r2, [r3, #20]
	PID_1_Speed.previousErrorValue = 0;
 80050e8:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <PID_init+0x1b0>)
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	619a      	str	r2, [r3, #24]
	PID_1_Speed.enable = false;
 80050f0:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <PID_init+0x1b0>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	771a      	strb	r2, [r3, #28]
	PID_1_Speed.u = 0;
 80050f6:	4b1c      	ldr	r3, [pc, #112]	; (8005168 <PID_init+0x1b0>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	83da      	strh	r2, [r3, #30]
	PID_1_Speed.e = 0;
 80050fc:	4b1a      	ldr	r3, [pc, #104]	; (8005168 <PID_init+0x1b0>)
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	605a      	str	r2, [r3, #4]

	PID_2_Speed.r = 0;
 8005104:	4b19      	ldr	r3, [pc, #100]	; (800516c <PID_init+0x1b4>)
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
	PID_2_Speed.Kp = 1.0;
 800510c:	4b17      	ldr	r3, [pc, #92]	; (800516c <PID_init+0x1b4>)
 800510e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005112:	609a      	str	r2, [r3, #8]
	PID_2_Speed.Kd = 0.0;
 8005114:	4b15      	ldr	r3, [pc, #84]	; (800516c <PID_init+0x1b4>)
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	60da      	str	r2, [r3, #12]
	PID_2_Speed.Ki = 1.0;
 800511c:	4b13      	ldr	r3, [pc, #76]	; (800516c <PID_init+0x1b4>)
 800511e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005122:	611a      	str	r2, [r3, #16]
	PID_2_Speed.integral = 0;
 8005124:	4b11      	ldr	r3, [pc, #68]	; (800516c <PID_init+0x1b4>)
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	615a      	str	r2, [r3, #20]
	PID_2_Speed.previousErrorValue = 0;
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <PID_init+0x1b4>)
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	619a      	str	r2, [r3, #24]
	PID_2_Speed.enable = false;
 8005134:	4b0d      	ldr	r3, [pc, #52]	; (800516c <PID_init+0x1b4>)
 8005136:	2200      	movs	r2, #0
 8005138:	771a      	strb	r2, [r3, #28]
	PID_2_Speed.u = 0;
 800513a:	4b0c      	ldr	r3, [pc, #48]	; (800516c <PID_init+0x1b4>)
 800513c:	2200      	movs	r2, #0
 800513e:	83da      	strh	r2, [r3, #30]
	PID_2_Speed.e = 0;
 8005140:	4b0a      	ldr	r3, [pc, #40]	; (800516c <PID_init+0x1b4>)
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	605a      	str	r2, [r3, #4]
}
 8005148:	bf00      	nop
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	20000628 	.word	0x20000628
 8005154:	41a00000 	.word	0x41a00000
 8005158:	41200000 	.word	0x41200000
 800515c:	20000688 	.word	0x20000688
 8005160:	20000668 	.word	0x20000668
 8005164:	200006a8 	.word	0x200006a8
 8005168:	20000648 	.word	0x20000648
 800516c:	20000608 	.word	0x20000608

08005170 <PID_Enable>:

void PID_Enable(PID_TypeDef* PID)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
	PID->enable = true;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	771a      	strb	r2, [r3, #28]
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr

08005188 <PID_Disable>:

void PID_Disable(PID_TypeDef* PID)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	PID->enable = false;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	771a      	strb	r2, [r3, #28]
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <PID_IsEnabled>:

bool PID_IsEnabled(PID_TypeDef* PID)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
	return PID->enable;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	7f1b      	ldrb	r3, [r3, #28]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr

080051b6 <PID_SetRequired>:

void PID_SetRequired(PID_TypeDef* PID, float position)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
	PID->r = position;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	601a      	str	r2, [r3, #0]
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr

080051d0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80051d4:	4b17      	ldr	r3, [pc, #92]	; (8005234 <MX_SPI2_Init+0x64>)
 80051d6:	4a18      	ldr	r2, [pc, #96]	; (8005238 <MX_SPI2_Init+0x68>)
 80051d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80051da:	4b16      	ldr	r3, [pc, #88]	; (8005234 <MX_SPI2_Init+0x64>)
 80051dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80051e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80051e2:	4b14      	ldr	r3, [pc, #80]	; (8005234 <MX_SPI2_Init+0x64>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80051e8:	4b12      	ldr	r3, [pc, #72]	; (8005234 <MX_SPI2_Init+0x64>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80051ee:	4b11      	ldr	r3, [pc, #68]	; (8005234 <MX_SPI2_Init+0x64>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80051f4:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <MX_SPI2_Init+0x64>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80051fa:	4b0e      	ldr	r3, [pc, #56]	; (8005234 <MX_SPI2_Init+0x64>)
 80051fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005200:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005202:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <MX_SPI2_Init+0x64>)
 8005204:	2200      	movs	r2, #0
 8005206:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <MX_SPI2_Init+0x64>)
 800520a:	2200      	movs	r2, #0
 800520c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <MX_SPI2_Init+0x64>)
 8005210:	2200      	movs	r2, #0
 8005212:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005214:	4b07      	ldr	r3, [pc, #28]	; (8005234 <MX_SPI2_Init+0x64>)
 8005216:	2200      	movs	r2, #0
 8005218:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <MX_SPI2_Init+0x64>)
 800521c:	220a      	movs	r2, #10
 800521e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005220:	4804      	ldr	r0, [pc, #16]	; (8005234 <MX_SPI2_Init+0x64>)
 8005222:	f7fd fa35 	bl	8002690 <HAL_SPI_Init>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800522c:	f7ff fcad 	bl	8004b8a <Error_Handler>
  }

}
 8005230:	bf00      	nop
 8005232:	bd80      	pop	{r7, pc}
 8005234:	200006c8 	.word	0x200006c8
 8005238:	40003800 	.word	0x40003800

0800523c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005244:	f107 0310 	add.w	r3, r7, #16
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	609a      	str	r2, [r3, #8]
 8005250:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1c      	ldr	r2, [pc, #112]	; (80052c8 <HAL_SPI_MspInit+0x8c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d131      	bne.n	80052c0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800525c:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <HAL_SPI_MspInit+0x90>)
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	4a1a      	ldr	r2, [pc, #104]	; (80052cc <HAL_SPI_MspInit+0x90>)
 8005262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005266:	61d3      	str	r3, [r2, #28]
 8005268:	4b18      	ldr	r3, [pc, #96]	; (80052cc <HAL_SPI_MspInit+0x90>)
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005274:	4b15      	ldr	r3, [pc, #84]	; (80052cc <HAL_SPI_MspInit+0x90>)
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	4a14      	ldr	r2, [pc, #80]	; (80052cc <HAL_SPI_MspInit+0x90>)
 800527a:	f043 0308 	orr.w	r3, r3, #8
 800527e:	6193      	str	r3, [r2, #24]
 8005280:	4b12      	ldr	r3, [pc, #72]	; (80052cc <HAL_SPI_MspInit+0x90>)
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800528c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005290:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005292:	2302      	movs	r3, #2
 8005294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005296:	2303      	movs	r3, #3
 8005298:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800529a:	f107 0310 	add.w	r3, r7, #16
 800529e:	4619      	mov	r1, r3
 80052a0:	480b      	ldr	r0, [pc, #44]	; (80052d0 <HAL_SPI_MspInit+0x94>)
 80052a2:	f7fc faad 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80052a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052b4:	f107 0310 	add.w	r3, r7, #16
 80052b8:	4619      	mov	r1, r3
 80052ba:	4805      	ldr	r0, [pc, #20]	; (80052d0 <HAL_SPI_MspInit+0x94>)
 80052bc:	f7fc faa0 	bl	8001800 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80052c0:	bf00      	nop
 80052c2:	3720      	adds	r7, #32
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40003800 	.word	0x40003800
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40010c00 	.word	0x40010c00

080052d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80052da:	4b15      	ldr	r3, [pc, #84]	; (8005330 <HAL_MspInit+0x5c>)
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	4a14      	ldr	r2, [pc, #80]	; (8005330 <HAL_MspInit+0x5c>)
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	6193      	str	r3, [r2, #24]
 80052e6:	4b12      	ldr	r3, [pc, #72]	; (8005330 <HAL_MspInit+0x5c>)
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	60bb      	str	r3, [r7, #8]
 80052f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052f2:	4b0f      	ldr	r3, [pc, #60]	; (8005330 <HAL_MspInit+0x5c>)
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	4a0e      	ldr	r2, [pc, #56]	; (8005330 <HAL_MspInit+0x5c>)
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fc:	61d3      	str	r3, [r2, #28]
 80052fe:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <HAL_MspInit+0x5c>)
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005306:	607b      	str	r3, [r7, #4]
 8005308:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800530a:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <HAL_MspInit+0x60>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	4a04      	ldr	r2, [pc, #16]	; (8005334 <HAL_MspInit+0x60>)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr
 8005330:	40021000 	.word	0x40021000
 8005334:	40010000 	.word	0x40010000

08005338 <LL_TIM_EnableCounter>:
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f043 0201 	orr.w	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	601a      	str	r2, [r3, #0]
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr

08005356 <LL_TIM_DisableCounter>:
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 0201 	bic.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr

08005374 <LL_TIM_ClearFlag_UPDATE>:
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f06f 0201 	mvn.w	r2, #1
 8005382:	611a      	str	r2, [r3, #16]
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr

0800538e <LL_TIM_ClearFlag_CC1>:
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f06f 0202 	mvn.w	r2, #2
 800539c:	611a      	str	r2, [r3, #16]
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr

080053a8 <LL_TIM_IsActiveFlag_CC1>:
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d101      	bne.n	80053c0 <LL_TIM_IsActiveFlag_CC1+0x18>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <LL_TIM_IsActiveFlag_CC1+0x1a>
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <LL_TIM_ClearFlag_CC2>:
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f06f 0204 	mvn.w	r2, #4
 80053da:	611a      	str	r2, [r3, #16]
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <LL_TIM_IsActiveFlag_CC2>:
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d101      	bne.n	80053fe <LL_TIM_IsActiveFlag_CC2+0x18>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <LL_TIM_IsActiveFlag_CC2+0x1a>
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr

0800540a <LL_TIM_ClearFlag_CC3>:
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f06f 0208 	mvn.w	r2, #8
 8005418:	611a      	str	r2, [r3, #16]
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr

08005424 <LL_TIM_IsActiveFlag_CC3>:
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b08      	cmp	r3, #8
 8005436:	d101      	bne.n	800543c <LL_TIM_IsActiveFlag_CC3+0x18>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <LL_TIM_IsActiveFlag_CC3+0x1a>
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <LL_TIM_ClearFlag_CC4>:
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f06f 0210 	mvn.w	r2, #16
 8005456:	611a      	str	r2, [r3, #16]
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr

08005462 <LL_TIM_IsActiveFlag_CC4>:
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b10      	cmp	r3, #16
 8005474:	d101      	bne.n	800547a <LL_TIM_IsActiveFlag_CC4+0x18>
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <LL_TIM_IsActiveFlag_CC4+0x1a>
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005486:	b480      	push	{r7}
 8005488:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800548a:	bf00      	nop
 800548c:	46bd      	mov	sp, r7
 800548e:	bc80      	pop	{r7}
 8005490:	4770      	bx	lr

08005492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005492:	b480      	push	{r7}
 8005494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005496:	e7fe      	b.n	8005496 <HardFault_Handler+0x4>

08005498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800549c:	e7fe      	b.n	800549c <MemManage_Handler+0x4>

0800549e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800549e:	b480      	push	{r7}
 80054a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054a2:	e7fe      	b.n	80054a2 <BusFault_Handler+0x4>

080054a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054a8:	e7fe      	b.n	80054a8 <UsageFault_Handler+0x4>

080054aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054aa:	b480      	push	{r7}
 80054ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054ae:	bf00      	nop
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr

080054b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054b6:	b480      	push	{r7}
 80054b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054ba:	bf00      	nop
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr

080054c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054c2:	b480      	push	{r7}
 80054c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054c6:	bf00      	nop
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr

080054ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054d2:	f7fb fe61 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054d6:	bf00      	nop
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	ENCODER_SetZero(&ENCODER_1);
 80054e0:	4808      	ldr	r0, [pc, #32]	; (8005504 <EXTI0_IRQHandler+0x28>)
 80054e2:	f7fe f9af 	bl	8003844 <ENCODER_SetZero>
	MOTOR_SetRequiredSpeed(&MOTOR_1,0);
 80054e6:	2100      	movs	r1, #0
 80054e8:	4807      	ldr	r0, [pc, #28]	; (8005508 <EXTI0_IRQHandler+0x2c>)
 80054ea:	f7ff fb5f 	bl	8004bac <MOTOR_SetRequiredSpeed>
	PID_Enable(&PID_1_Pos);
 80054ee:	4807      	ldr	r0, [pc, #28]	; (800550c <EXTI0_IRQHandler+0x30>)
 80054f0:	f7ff fe3e 	bl	8005170 <PID_Enable>
	PID_Disable(&PID_1_Speed);
 80054f4:	4806      	ldr	r0, [pc, #24]	; (8005510 <EXTI0_IRQHandler+0x34>)
 80054f6:	f7ff fe47 	bl	8005188 <PID_Disable>


  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80054fa:	2001      	movs	r0, #1
 80054fc:	f7fc faf2 	bl	8001ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005500:	bf00      	nop
 8005502:	bd80      	pop	{r7, pc}
 8005504:	200000fc 	.word	0x200000fc
 8005508:	200005a8 	.word	0x200005a8
 800550c:	20000688 	.word	0x20000688
 8005510:	20000648 	.word	0x20000648

08005514 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	ENCODER_SetZero(&ENCODER_0);
 8005518:	4808      	ldr	r0, [pc, #32]	; (800553c <EXTI1_IRQHandler+0x28>)
 800551a:	f7fe f993 	bl	8003844 <ENCODER_SetZero>
	MOTOR_SetRequiredSpeed(&MOTOR_0,0);
 800551e:	2100      	movs	r1, #0
 8005520:	4807      	ldr	r0, [pc, #28]	; (8005540 <EXTI1_IRQHandler+0x2c>)
 8005522:	f7ff fb43 	bl	8004bac <MOTOR_SetRequiredSpeed>
	PID_Enable(&PID_0_Pos);
 8005526:	4807      	ldr	r0, [pc, #28]	; (8005544 <EXTI1_IRQHandler+0x30>)
 8005528:	f7ff fe22 	bl	8005170 <PID_Enable>
	PID_Disable(&PID_0_Speed);
 800552c:	4806      	ldr	r0, [pc, #24]	; (8005548 <EXTI1_IRQHandler+0x34>)
 800552e:	f7ff fe2b 	bl	8005188 <PID_Disable>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005532:	2002      	movs	r0, #2
 8005534:	f7fc fad6 	bl	8001ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005538:	bf00      	nop
 800553a:	bd80      	pop	{r7, pc}
 800553c:	2000010c 	.word	0x2000010c
 8005540:	200005e8 	.word	0x200005e8
 8005544:	20000628 	.word	0x20000628
 8005548:	200006a8 	.word	0x200006a8

0800554c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	ENCODER_SetZero(&ENCODER_2);
 8005550:	4808      	ldr	r0, [pc, #32]	; (8005574 <EXTI9_5_IRQHandler+0x28>)
 8005552:	f7fe f977 	bl	8003844 <ENCODER_SetZero>
	MOTOR_SetRequiredSpeed(&MOTOR_2,0);
 8005556:	2100      	movs	r1, #0
 8005558:	4807      	ldr	r0, [pc, #28]	; (8005578 <EXTI9_5_IRQHandler+0x2c>)
 800555a:	f7ff fb27 	bl	8004bac <MOTOR_SetRequiredSpeed>
	PID_Enable(&PID_2_Pos);
 800555e:	4807      	ldr	r0, [pc, #28]	; (800557c <EXTI9_5_IRQHandler+0x30>)
 8005560:	f7ff fe06 	bl	8005170 <PID_Enable>
	PID_Disable(&PID_2_Speed);
 8005564:	4806      	ldr	r0, [pc, #24]	; (8005580 <EXTI9_5_IRQHandler+0x34>)
 8005566:	f7ff fe0f 	bl	8005188 <PID_Disable>

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800556a:	2020      	movs	r0, #32
 800556c:	f7fc faba 	bl	8001ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005570:	bf00      	nop
 8005572:	bd80      	pop	{r7, pc}
 8005574:	200000ec 	.word	0x200000ec
 8005578:	200005c8 	.word	0x200005c8
 800557c:	20000668 	.word	0x20000668
 8005580:	20000608 	.word	0x20000608

08005584 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_BRK_IRQn 0 */
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	LL_TIM_DisableCounter(TIM1);
 8005594:	4809      	ldr	r0, [pc, #36]	; (80055bc <TIM1_UP_IRQHandler+0x2c>)
 8005596:	f7ff fede 	bl	8005356 <LL_TIM_DisableCounter>
	MOTOR_SetCurrentSpeed(&MOTOR_0);
 800559a:	4809      	ldr	r0, [pc, #36]	; (80055c0 <TIM1_UP_IRQHandler+0x30>)
 800559c:	f7ff fb64 	bl	8004c68 <MOTOR_SetCurrentSpeed>
	MOTOR_SetCurrentSpeed(&MOTOR_1);
 80055a0:	4808      	ldr	r0, [pc, #32]	; (80055c4 <TIM1_UP_IRQHandler+0x34>)
 80055a2:	f7ff fb61 	bl	8004c68 <MOTOR_SetCurrentSpeed>
	MOTOR_SetCurrentSpeed(&MOTOR_2);
 80055a6:	4808      	ldr	r0, [pc, #32]	; (80055c8 <TIM1_UP_IRQHandler+0x38>)
 80055a8:	f7ff fb5e 	bl	8004c68 <MOTOR_SetCurrentSpeed>

	LL_TIM_EnableCounter(TIM1);
 80055ac:	4803      	ldr	r0, [pc, #12]	; (80055bc <TIM1_UP_IRQHandler+0x2c>)
 80055ae:	f7ff fec3 	bl	8005338 <LL_TIM_EnableCounter>
	LL_TIM_ClearFlag_UPDATE(TIM1);
 80055b2:	4802      	ldr	r0, [pc, #8]	; (80055bc <TIM1_UP_IRQHandler+0x2c>)
 80055b4:	f7ff fede 	bl	8005374 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM1_UP_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80055b8:	bf00      	nop
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40012c00 	.word	0x40012c00
 80055c0:	200005e8 	.word	0x200005e8
 80055c4:	200005a8 	.word	0x200005a8
 80055c8:	200005c8 	.word	0x200005c8

080055cc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80055d0:	bf00      	nop
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

	if(LL_TIM_IsActiveFlag_CC1(TIM1))
 80055dc:	4899      	ldr	r0, [pc, #612]	; (8005844 <TIM1_CC_IRQHandler+0x26c>)
 80055de:	f7ff fee3 	bl	80053a8 <LL_TIM_IsActiveFlag_CC1>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d012      	beq.n	800560e <TIM1_CC_IRQHandler+0x36>
	{
		HAL_GPIO_WritePin(MOTOR_0.GPIO_Port_A,MOTOR_0.GPIO_Pin_A,RESET);
 80055e8:	4b97      	ldr	r3, [pc, #604]	; (8005848 <TIM1_CC_IRQHandler+0x270>)
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	4b96      	ldr	r3, [pc, #600]	; (8005848 <TIM1_CC_IRQHandler+0x270>)
 80055ee:	891b      	ldrh	r3, [r3, #8]
 80055f0:	2200      	movs	r2, #0
 80055f2:	4619      	mov	r1, r3
 80055f4:	f7fc fa5e 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_0.GPIO_Port_B,MOTOR_0.GPIO_Pin_B,RESET);
 80055f8:	4b93      	ldr	r3, [pc, #588]	; (8005848 <TIM1_CC_IRQHandler+0x270>)
 80055fa:	6858      	ldr	r0, [r3, #4]
 80055fc:	4b92      	ldr	r3, [pc, #584]	; (8005848 <TIM1_CC_IRQHandler+0x270>)
 80055fe:	895b      	ldrh	r3, [r3, #10]
 8005600:	2200      	movs	r2, #0
 8005602:	4619      	mov	r1, r3
 8005604:	f7fc fa56 	bl	8001ab4 <HAL_GPIO_WritePin>
		LL_TIM_ClearFlag_CC1(TIM1);
 8005608:	488e      	ldr	r0, [pc, #568]	; (8005844 <TIM1_CC_IRQHandler+0x26c>)
 800560a:	f7ff fec0 	bl	800538e <LL_TIM_ClearFlag_CC1>
	}

	if(LL_TIM_IsActiveFlag_CC2(TIM1))
 800560e:	488d      	ldr	r0, [pc, #564]	; (8005844 <TIM1_CC_IRQHandler+0x26c>)
 8005610:	f7ff fee9 	bl	80053e6 <LL_TIM_IsActiveFlag_CC2>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d012      	beq.n	8005640 <TIM1_CC_IRQHandler+0x68>
	{
		HAL_GPIO_WritePin(MOTOR_1.GPIO_Port_A,MOTOR_1.GPIO_Pin_A,RESET);
 800561a:	4b8c      	ldr	r3, [pc, #560]	; (800584c <TIM1_CC_IRQHandler+0x274>)
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	4b8b      	ldr	r3, [pc, #556]	; (800584c <TIM1_CC_IRQHandler+0x274>)
 8005620:	891b      	ldrh	r3, [r3, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	4619      	mov	r1, r3
 8005626:	f7fc fa45 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_1.GPIO_Port_B,MOTOR_1.GPIO_Pin_B,RESET);
 800562a:	4b88      	ldr	r3, [pc, #544]	; (800584c <TIM1_CC_IRQHandler+0x274>)
 800562c:	6858      	ldr	r0, [r3, #4]
 800562e:	4b87      	ldr	r3, [pc, #540]	; (800584c <TIM1_CC_IRQHandler+0x274>)
 8005630:	895b      	ldrh	r3, [r3, #10]
 8005632:	2200      	movs	r2, #0
 8005634:	4619      	mov	r1, r3
 8005636:	f7fc fa3d 	bl	8001ab4 <HAL_GPIO_WritePin>
		LL_TIM_ClearFlag_CC2(TIM1);
 800563a:	4882      	ldr	r0, [pc, #520]	; (8005844 <TIM1_CC_IRQHandler+0x26c>)
 800563c:	f7ff fec6 	bl	80053cc <LL_TIM_ClearFlag_CC2>
	}

	if(LL_TIM_IsActiveFlag_CC3(TIM1))
 8005640:	4880      	ldr	r0, [pc, #512]	; (8005844 <TIM1_CC_IRQHandler+0x26c>)
 8005642:	f7ff feef 	bl	8005424 <LL_TIM_IsActiveFlag_CC3>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d012      	beq.n	8005672 <TIM1_CC_IRQHandler+0x9a>
	{
		HAL_GPIO_WritePin(MOTOR_2.GPIO_Port_A,MOTOR_2.GPIO_Pin_A,RESET);
 800564c:	4b80      	ldr	r3, [pc, #512]	; (8005850 <TIM1_CC_IRQHandler+0x278>)
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	4b7f      	ldr	r3, [pc, #508]	; (8005850 <TIM1_CC_IRQHandler+0x278>)
 8005652:	891b      	ldrh	r3, [r3, #8]
 8005654:	2200      	movs	r2, #0
 8005656:	4619      	mov	r1, r3
 8005658:	f7fc fa2c 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_2.GPIO_Port_B,MOTOR_2.GPIO_Pin_B,RESET);
 800565c:	4b7c      	ldr	r3, [pc, #496]	; (8005850 <TIM1_CC_IRQHandler+0x278>)
 800565e:	6858      	ldr	r0, [r3, #4]
 8005660:	4b7b      	ldr	r3, [pc, #492]	; (8005850 <TIM1_CC_IRQHandler+0x278>)
 8005662:	895b      	ldrh	r3, [r3, #10]
 8005664:	2200      	movs	r2, #0
 8005666:	4619      	mov	r1, r3
 8005668:	f7fc fa24 	bl	8001ab4 <HAL_GPIO_WritePin>
		LL_TIM_ClearFlag_CC3(TIM1);
 800566c:	4875      	ldr	r0, [pc, #468]	; (8005844 <TIM1_CC_IRQHandler+0x26c>)
 800566e:	f7ff fecc 	bl	800540a <LL_TIM_ClearFlag_CC3>
	}
	if(LL_TIM_IsActiveFlag_CC4(TIM1))
 8005672:	4874      	ldr	r0, [pc, #464]	; (8005844 <TIM1_CC_IRQHandler+0x26c>)
 8005674:	f7ff fef5 	bl	8005462 <LL_TIM_IsActiveFlag_CC4>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 80e0 	beq.w	8005840 <TIM1_CC_IRQHandler+0x268>
	{
		if(TIMER_IsEnabled(&TIMER_0))
 8005680:	4874      	ldr	r0, [pc, #464]	; (8005854 <TIM1_CC_IRQHandler+0x27c>)
 8005682:	f000 fe09 	bl	8006298 <TIMER_IsEnabled>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <TIM1_CC_IRQHandler+0xc0>
		{
			TIMER_IncTimer(&TIMER_0);
 800568c:	4871      	ldr	r0, [pc, #452]	; (8005854 <TIM1_CC_IRQHandler+0x27c>)
 800568e:	f000 fd9f 	bl	80061d0 <TIMER_IncTimer>
			TIMER_UpdateTime(&TIMER_0);
 8005692:	4870      	ldr	r0, [pc, #448]	; (8005854 <TIM1_CC_IRQHandler+0x27c>)
 8005694:	f000 fdd0 	bl	8006238 <TIMER_UpdateTime>
		}

		TRAJECTORY_MakeStep(&TRAJECTORY);
 8005698:	486f      	ldr	r0, [pc, #444]	; (8005858 <TIM1_CC_IRQHandler+0x280>)
 800569a:	f000 ff29 	bl	80064f0 <TRAJECTORY_MakeStep>

//		delta_calcForward(-ENCODER_GetAbsoluteAngle(&ENCODER_0),-ENCODER_GetAbsoluteAngle(&ENCODER_1),-ENCODER_GetAbsoluteAngle(&ENCODER_2),&xi,&yi,&zi);
//		delta_calcInverse(0.0,0.0,-248.92,&thetai1,&thetai2,&thetai3);

		ENCODER_UpdateAbsoluteAngle(&ENCODER_0);
 800569e:	486f      	ldr	r0, [pc, #444]	; (800585c <TIM1_CC_IRQHandler+0x284>)
 80056a0:	f7fe f906 	bl	80038b0 <ENCODER_UpdateAbsoluteAngle>
		ENCODER_UpdateAbsoluteAngle(&ENCODER_1);
 80056a4:	486e      	ldr	r0, [pc, #440]	; (8005860 <TIM1_CC_IRQHandler+0x288>)
 80056a6:	f7fe f903 	bl	80038b0 <ENCODER_UpdateAbsoluteAngle>
		ENCODER_UpdateAbsoluteAngle(&ENCODER_2);
 80056aa:	486e      	ldr	r0, [pc, #440]	; (8005864 <TIM1_CC_IRQHandler+0x28c>)
 80056ac:	f7fe f900 	bl	80038b0 <ENCODER_UpdateAbsoluteAngle>

		ENCODER_UpdateAbsoluteAngularVelocity(&ENCODER_0);
 80056b0:	486a      	ldr	r0, [pc, #424]	; (800585c <TIM1_CC_IRQHandler+0x284>)
 80056b2:	f7fe f911 	bl	80038d8 <ENCODER_UpdateAbsoluteAngularVelocity>
		ENCODER_UpdateAbsoluteAngularVelocity(&ENCODER_1);
 80056b6:	486a      	ldr	r0, [pc, #424]	; (8005860 <TIM1_CC_IRQHandler+0x288>)
 80056b8:	f7fe f90e 	bl	80038d8 <ENCODER_UpdateAbsoluteAngularVelocity>
		ENCODER_UpdateAbsoluteAngularVelocity(&ENCODER_2);
 80056bc:	4869      	ldr	r0, [pc, #420]	; (8005864 <TIM1_CC_IRQHandler+0x28c>)
 80056be:	f7fe f90b 	bl	80038d8 <ENCODER_UpdateAbsoluteAngularVelocity>

		if(PID_IsEnabled(&PID_0_Pos) && PID_IsEnabled(&PID_1_Pos) && PID_IsEnabled(&PID_2_Pos))
 80056c2:	4869      	ldr	r0, [pc, #420]	; (8005868 <TIM1_CC_IRQHandler+0x290>)
 80056c4:	f7ff fd6c 	bl	80051a0 <PID_IsEnabled>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d04e      	beq.n	800576c <TIM1_CC_IRQHandler+0x194>
 80056ce:	4867      	ldr	r0, [pc, #412]	; (800586c <TIM1_CC_IRQHandler+0x294>)
 80056d0:	f7ff fd66 	bl	80051a0 <PID_IsEnabled>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d048      	beq.n	800576c <TIM1_CC_IRQHandler+0x194>
 80056da:	4865      	ldr	r0, [pc, #404]	; (8005870 <TIM1_CC_IRQHandler+0x298>)
 80056dc:	f7ff fd60 	bl	80051a0 <PID_IsEnabled>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d042      	beq.n	800576c <TIM1_CC_IRQHandler+0x194>
		{
			PID_Disable(&PID_0_Speed);
 80056e6:	4863      	ldr	r0, [pc, #396]	; (8005874 <TIM1_CC_IRQHandler+0x29c>)
 80056e8:	f7ff fd4e 	bl	8005188 <PID_Disable>
			PID_Disable(&PID_1_Speed);
 80056ec:	4862      	ldr	r0, [pc, #392]	; (8005878 <TIM1_CC_IRQHandler+0x2a0>)
 80056ee:	f7ff fd4b 	bl	8005188 <PID_Disable>
			PID_Disable(&PID_2_Speed);
 80056f2:	4862      	ldr	r0, [pc, #392]	; (800587c <TIM1_CC_IRQHandler+0x2a4>)
 80056f4:	f7ff fd48 	bl	8005188 <PID_Disable>

			if(PID_IsEnabled(&PID_0_Pos)) MOTOR_SetRequiredSpeed(&MOTOR_0,PID_Calc(&PID_0_Pos,ENCODER_GetAbsoluteAngle(&ENCODER_0)));
 80056f8:	485b      	ldr	r0, [pc, #364]	; (8005868 <TIM1_CC_IRQHandler+0x290>)
 80056fa:	f7ff fd51 	bl	80051a0 <PID_IsEnabled>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00c      	beq.n	800571e <TIM1_CC_IRQHandler+0x146>
 8005704:	4855      	ldr	r0, [pc, #340]	; (800585c <TIM1_CC_IRQHandler+0x284>)
 8005706:	f7fe f8ad 	bl	8003864 <ENCODER_GetAbsoluteAngle>
 800570a:	4603      	mov	r3, r0
 800570c:	4619      	mov	r1, r3
 800570e:	4856      	ldr	r0, [pc, #344]	; (8005868 <TIM1_CC_IRQHandler+0x290>)
 8005710:	f7ff fbc2 	bl	8004e98 <PID_Calc>
 8005714:	4603      	mov	r3, r0
 8005716:	4619      	mov	r1, r3
 8005718:	484b      	ldr	r0, [pc, #300]	; (8005848 <TIM1_CC_IRQHandler+0x270>)
 800571a:	f7ff fa47 	bl	8004bac <MOTOR_SetRequiredSpeed>
			if(PID_IsEnabled(&PID_1_Pos)) MOTOR_SetRequiredSpeed(&MOTOR_1,PID_Calc(&PID_1_Pos,ENCODER_GetAbsoluteAngle(&ENCODER_1)));
 800571e:	4853      	ldr	r0, [pc, #332]	; (800586c <TIM1_CC_IRQHandler+0x294>)
 8005720:	f7ff fd3e 	bl	80051a0 <PID_IsEnabled>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00c      	beq.n	8005744 <TIM1_CC_IRQHandler+0x16c>
 800572a:	484d      	ldr	r0, [pc, #308]	; (8005860 <TIM1_CC_IRQHandler+0x288>)
 800572c:	f7fe f89a 	bl	8003864 <ENCODER_GetAbsoluteAngle>
 8005730:	4603      	mov	r3, r0
 8005732:	4619      	mov	r1, r3
 8005734:	484d      	ldr	r0, [pc, #308]	; (800586c <TIM1_CC_IRQHandler+0x294>)
 8005736:	f7ff fbaf 	bl	8004e98 <PID_Calc>
 800573a:	4603      	mov	r3, r0
 800573c:	4619      	mov	r1, r3
 800573e:	4843      	ldr	r0, [pc, #268]	; (800584c <TIM1_CC_IRQHandler+0x274>)
 8005740:	f7ff fa34 	bl	8004bac <MOTOR_SetRequiredSpeed>
			if(PID_IsEnabled(&PID_2_Pos)) MOTOR_SetRequiredSpeed(&MOTOR_2,PID_Calc(&PID_2_Pos,ENCODER_GetAbsoluteAngle(&ENCODER_2)));
 8005744:	484a      	ldr	r0, [pc, #296]	; (8005870 <TIM1_CC_IRQHandler+0x298>)
 8005746:	f7ff fd2b 	bl	80051a0 <PID_IsEnabled>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d046      	beq.n	80057de <TIM1_CC_IRQHandler+0x206>
 8005750:	4844      	ldr	r0, [pc, #272]	; (8005864 <TIM1_CC_IRQHandler+0x28c>)
 8005752:	f7fe f887 	bl	8003864 <ENCODER_GetAbsoluteAngle>
 8005756:	4603      	mov	r3, r0
 8005758:	4619      	mov	r1, r3
 800575a:	4845      	ldr	r0, [pc, #276]	; (8005870 <TIM1_CC_IRQHandler+0x298>)
 800575c:	f7ff fb9c 	bl	8004e98 <PID_Calc>
 8005760:	4603      	mov	r3, r0
 8005762:	4619      	mov	r1, r3
 8005764:	483a      	ldr	r0, [pc, #232]	; (8005850 <TIM1_CC_IRQHandler+0x278>)
 8005766:	f7ff fa21 	bl	8004bac <MOTOR_SetRequiredSpeed>
 800576a:	e038      	b.n	80057de <TIM1_CC_IRQHandler+0x206>
		}
		else
		{
			if(PID_IsEnabled(&PID_0_Speed)) MOTOR_SetRequiredSpeed(&MOTOR_0,PID_Calc(&PID_0_Speed,	ENCODER_GetAbsoluteAngularVelocity(&ENCODER_0)));
 800576c:	4841      	ldr	r0, [pc, #260]	; (8005874 <TIM1_CC_IRQHandler+0x29c>)
 800576e:	f7ff fd17 	bl	80051a0 <PID_IsEnabled>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <TIM1_CC_IRQHandler+0x1ba>
 8005778:	4838      	ldr	r0, [pc, #224]	; (800585c <TIM1_CC_IRQHandler+0x284>)
 800577a:	f7fe f8d5 	bl	8003928 <ENCODER_GetAbsoluteAngularVelocity>
 800577e:	4603      	mov	r3, r0
 8005780:	4619      	mov	r1, r3
 8005782:	483c      	ldr	r0, [pc, #240]	; (8005874 <TIM1_CC_IRQHandler+0x29c>)
 8005784:	f7ff fb88 	bl	8004e98 <PID_Calc>
 8005788:	4603      	mov	r3, r0
 800578a:	4619      	mov	r1, r3
 800578c:	482e      	ldr	r0, [pc, #184]	; (8005848 <TIM1_CC_IRQHandler+0x270>)
 800578e:	f7ff fa0d 	bl	8004bac <MOTOR_SetRequiredSpeed>
		    if(PID_IsEnabled(&PID_1_Speed)) MOTOR_SetRequiredSpeed(&MOTOR_1,PID_Calc(&PID_1_Speed,	ENCODER_GetAbsoluteAngularVelocity(&ENCODER_1)));
 8005792:	4839      	ldr	r0, [pc, #228]	; (8005878 <TIM1_CC_IRQHandler+0x2a0>)
 8005794:	f7ff fd04 	bl	80051a0 <PID_IsEnabled>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00c      	beq.n	80057b8 <TIM1_CC_IRQHandler+0x1e0>
 800579e:	4830      	ldr	r0, [pc, #192]	; (8005860 <TIM1_CC_IRQHandler+0x288>)
 80057a0:	f7fe f8c2 	bl	8003928 <ENCODER_GetAbsoluteAngularVelocity>
 80057a4:	4603      	mov	r3, r0
 80057a6:	4619      	mov	r1, r3
 80057a8:	4833      	ldr	r0, [pc, #204]	; (8005878 <TIM1_CC_IRQHandler+0x2a0>)
 80057aa:	f7ff fb75 	bl	8004e98 <PID_Calc>
 80057ae:	4603      	mov	r3, r0
 80057b0:	4619      	mov	r1, r3
 80057b2:	4826      	ldr	r0, [pc, #152]	; (800584c <TIM1_CC_IRQHandler+0x274>)
 80057b4:	f7ff f9fa 	bl	8004bac <MOTOR_SetRequiredSpeed>
			if(PID_IsEnabled(&PID_2_Speed)) MOTOR_SetRequiredSpeed(&MOTOR_2,PID_Calc(&PID_2_Speed,	ENCODER_GetAbsoluteAngularVelocity(&ENCODER_2)));
 80057b8:	4830      	ldr	r0, [pc, #192]	; (800587c <TIM1_CC_IRQHandler+0x2a4>)
 80057ba:	f7ff fcf1 	bl	80051a0 <PID_IsEnabled>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00c      	beq.n	80057de <TIM1_CC_IRQHandler+0x206>
 80057c4:	4827      	ldr	r0, [pc, #156]	; (8005864 <TIM1_CC_IRQHandler+0x28c>)
 80057c6:	f7fe f8af 	bl	8003928 <ENCODER_GetAbsoluteAngularVelocity>
 80057ca:	4603      	mov	r3, r0
 80057cc:	4619      	mov	r1, r3
 80057ce:	482b      	ldr	r0, [pc, #172]	; (800587c <TIM1_CC_IRQHandler+0x2a4>)
 80057d0:	f7ff fb62 	bl	8004e98 <PID_Calc>
 80057d4:	4603      	mov	r3, r0
 80057d6:	4619      	mov	r1, r3
 80057d8:	481d      	ldr	r0, [pc, #116]	; (8005850 <TIM1_CC_IRQHandler+0x278>)
 80057da:	f7ff f9e7 	bl	8004bac <MOTOR_SetRequiredSpeed>
		}
		LL_TIM_ClearFlag_CC4(TIM1);
 80057de:	4819      	ldr	r0, [pc, #100]	; (8005844 <TIM1_CC_IRQHandler+0x26c>)
 80057e0:	f7ff fe32 	bl	8005448 <LL_TIM_ClearFlag_CC4>


			if(ENCODER_GetAbsoluteAngle(&ENCODER_0)<-45.0)
 80057e4:	481d      	ldr	r0, [pc, #116]	; (800585c <TIM1_CC_IRQHandler+0x284>)
 80057e6:	f7fe f83d 	bl	8003864 <ENCODER_GetAbsoluteAngle>
 80057ea:	4603      	mov	r3, r0
 80057ec:	4924      	ldr	r1, [pc, #144]	; (8005880 <TIM1_CC_IRQHandler+0x2a8>)
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fb fc3e 	bl	8001070 <__aeabi_fcmplt>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <TIM1_CC_IRQHandler+0x22a>
			{
				MOTOR_SetRequiredSpeed(&MOTOR_0,0);
 80057fa:	2100      	movs	r1, #0
 80057fc:	4812      	ldr	r0, [pc, #72]	; (8005848 <TIM1_CC_IRQHandler+0x270>)
 80057fe:	f7ff f9d5 	bl	8004bac <MOTOR_SetRequiredSpeed>

			}
			if(ENCODER_GetAbsoluteAngle(&ENCODER_1)<-45.0)
 8005802:	4817      	ldr	r0, [pc, #92]	; (8005860 <TIM1_CC_IRQHandler+0x288>)
 8005804:	f7fe f82e 	bl	8003864 <ENCODER_GetAbsoluteAngle>
 8005808:	4603      	mov	r3, r0
 800580a:	491d      	ldr	r1, [pc, #116]	; (8005880 <TIM1_CC_IRQHandler+0x2a8>)
 800580c:	4618      	mov	r0, r3
 800580e:	f7fb fc2f 	bl	8001070 <__aeabi_fcmplt>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <TIM1_CC_IRQHandler+0x248>
			{
				MOTOR_SetRequiredSpeed(&MOTOR_1,0);
 8005818:	2100      	movs	r1, #0
 800581a:	480c      	ldr	r0, [pc, #48]	; (800584c <TIM1_CC_IRQHandler+0x274>)
 800581c:	f7ff f9c6 	bl	8004bac <MOTOR_SetRequiredSpeed>

			}
			if(ENCODER_GetAbsoluteAngle(&ENCODER_2)<-45.0)
 8005820:	4810      	ldr	r0, [pc, #64]	; (8005864 <TIM1_CC_IRQHandler+0x28c>)
 8005822:	f7fe f81f 	bl	8003864 <ENCODER_GetAbsoluteAngle>
 8005826:	4603      	mov	r3, r0
 8005828:	4915      	ldr	r1, [pc, #84]	; (8005880 <TIM1_CC_IRQHandler+0x2a8>)
 800582a:	4618      	mov	r0, r3
 800582c:	f7fb fc20 	bl	8001070 <__aeabi_fcmplt>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d100      	bne.n	8005838 <TIM1_CC_IRQHandler+0x260>
	}
  /* USER CODE END TIM1_CC_IRQn 0 */
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005836:	e003      	b.n	8005840 <TIM1_CC_IRQHandler+0x268>
				MOTOR_SetRequiredSpeed(&MOTOR_2,0);
 8005838:	2100      	movs	r1, #0
 800583a:	4805      	ldr	r0, [pc, #20]	; (8005850 <TIM1_CC_IRQHandler+0x278>)
 800583c:	f7ff f9b6 	bl	8004bac <MOTOR_SetRequiredSpeed>
}
 8005840:	bf00      	nop
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40012c00 	.word	0x40012c00
 8005848:	200005e8 	.word	0x200005e8
 800584c:	200005a8 	.word	0x200005a8
 8005850:	200005c8 	.word	0x200005c8
 8005854:	200007e0 	.word	0x200007e0
 8005858:	200007ec 	.word	0x200007ec
 800585c:	2000010c 	.word	0x2000010c
 8005860:	200000fc 	.word	0x200000fc
 8005864:	200000ec 	.word	0x200000ec
 8005868:	20000628 	.word	0x20000628
 800586c:	20000688 	.word	0x20000688
 8005870:	20000668 	.word	0x20000668
 8005874:	200006a8 	.word	0x200006a8
 8005878:	20000648 	.word	0x20000648
 800587c:	20000608 	.word	0x20000608
 8005880:	c2340000 	.word	0xc2340000

08005884 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005888:	4802      	ldr	r0, [pc, #8]	; (8005894 <TIM2_IRQHandler+0x10>)
 800588a:	f7fd f827 	bl	80028dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800588e:	bf00      	nop
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	200007a0 	.word	0x200007a0

08005898 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800589c:	4802      	ldr	r0, [pc, #8]	; (80058a8 <TIM3_IRQHandler+0x10>)
 800589e:	f7fd f81d 	bl	80028dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80058a2:	bf00      	nop
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000760 	.word	0x20000760

080058ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80058b0:	4802      	ldr	r0, [pc, #8]	; (80058bc <TIM4_IRQHandler+0x10>)
 80058b2:	f7fd f813 	bl	80028dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80058b6:	bf00      	nop
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000720 	.word	0x20000720

080058c0 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  int test;
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	4770      	bx	lr
	...

080058d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80058d8:	4b15      	ldr	r3, [pc, #84]	; (8005930 <SystemInit+0x5c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a14      	ldr	r2, [pc, #80]	; (8005930 <SystemInit+0x5c>)
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80058e4:	4b12      	ldr	r3, [pc, #72]	; (8005930 <SystemInit+0x5c>)
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	4911      	ldr	r1, [pc, #68]	; (8005930 <SystemInit+0x5c>)
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <SystemInit+0x60>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80058f0:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <SystemInit+0x5c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a0e      	ldr	r2, [pc, #56]	; (8005930 <SystemInit+0x5c>)
 80058f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80058fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <SystemInit+0x5c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <SystemInit+0x5c>)
 8005906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800590c:	4b08      	ldr	r3, [pc, #32]	; (8005930 <SystemInit+0x5c>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	4a07      	ldr	r2, [pc, #28]	; (8005930 <SystemInit+0x5c>)
 8005912:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005916:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005918:	4b05      	ldr	r3, [pc, #20]	; (8005930 <SystemInit+0x5c>)
 800591a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800591e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005920:	4b05      	ldr	r3, [pc, #20]	; (8005938 <SystemInit+0x64>)
 8005922:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005926:	609a      	str	r2, [r3, #8]
#endif 
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr
 8005930:	40021000 	.word	0x40021000
 8005934:	f8ff0000 	.word	0xf8ff0000
 8005938:	e000ed00 	.word	0xe000ed00

0800593c <__NVIC_GetPriorityGrouping>:
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005940:	4b04      	ldr	r3, [pc, #16]	; (8005954 <__NVIC_GetPriorityGrouping+0x18>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	0a1b      	lsrs	r3, r3, #8
 8005946:	f003 0307 	and.w	r3, r3, #7
}
 800594a:	4618      	mov	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	e000ed00 	.word	0xe000ed00

08005958 <__NVIC_EnableIRQ>:
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005966:	2b00      	cmp	r3, #0
 8005968:	db0b      	blt.n	8005982 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	f003 021f 	and.w	r2, r3, #31
 8005970:	4906      	ldr	r1, [pc, #24]	; (800598c <__NVIC_EnableIRQ+0x34>)
 8005972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2001      	movs	r0, #1
 800597a:	fa00 f202 	lsl.w	r2, r0, r2
 800597e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr
 800598c:	e000e100 	.word	0xe000e100

08005990 <__NVIC_SetPriority>:
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	6039      	str	r1, [r7, #0]
 800599a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800599c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	db0a      	blt.n	80059ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	490c      	ldr	r1, [pc, #48]	; (80059dc <__NVIC_SetPriority+0x4c>)
 80059aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ae:	0112      	lsls	r2, r2, #4
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	440b      	add	r3, r1
 80059b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80059b8:	e00a      	b.n	80059d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	4908      	ldr	r1, [pc, #32]	; (80059e0 <__NVIC_SetPriority+0x50>)
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	3b04      	subs	r3, #4
 80059c8:	0112      	lsls	r2, r2, #4
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	440b      	add	r3, r1
 80059ce:	761a      	strb	r2, [r3, #24]
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	e000e100 	.word	0xe000e100
 80059e0:	e000ed00 	.word	0xe000ed00

080059e4 <NVIC_EncodePriority>:
{
 80059e4:	b480      	push	{r7}
 80059e6:	b089      	sub	sp, #36	; 0x24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f1c3 0307 	rsb	r3, r3, #7
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	bf28      	it	cs
 8005a02:	2304      	movcs	r3, #4
 8005a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	2b06      	cmp	r3, #6
 8005a0c:	d902      	bls.n	8005a14 <NVIC_EncodePriority+0x30>
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	3b03      	subs	r3, #3
 8005a12:	e000      	b.n	8005a16 <NVIC_EncodePriority+0x32>
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a18:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	43da      	mvns	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	401a      	ands	r2, r3
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	fa01 f303 	lsl.w	r3, r1, r3
 8005a36:	43d9      	mvns	r1, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a3c:	4313      	orrs	r3, r2
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3724      	adds	r7, #36	; 0x24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr

08005a48 <LL_TIM_DisableARRPreload>:
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	601a      	str	r2, [r3, #0]
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr
	...

08005a68 <LL_TIM_OC_DisableFast>:
{
 8005a68:	b4b0      	push	{r4, r5, r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d01c      	beq.n	8005ab2 <LL_TIM_OC_DisableFast+0x4a>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d017      	beq.n	8005aae <LL_TIM_OC_DisableFast+0x46>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d012      	beq.n	8005aaa <LL_TIM_OC_DisableFast+0x42>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d00d      	beq.n	8005aa6 <LL_TIM_OC_DisableFast+0x3e>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a90:	d007      	beq.n	8005aa2 <LL_TIM_OC_DisableFast+0x3a>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a98:	d101      	bne.n	8005a9e <LL_TIM_OC_DisableFast+0x36>
 8005a9a:	2305      	movs	r3, #5
 8005a9c:	e00a      	b.n	8005ab4 <LL_TIM_OC_DisableFast+0x4c>
 8005a9e:	2306      	movs	r3, #6
 8005aa0:	e008      	b.n	8005ab4 <LL_TIM_OC_DisableFast+0x4c>
 8005aa2:	2304      	movs	r3, #4
 8005aa4:	e006      	b.n	8005ab4 <LL_TIM_OC_DisableFast+0x4c>
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e004      	b.n	8005ab4 <LL_TIM_OC_DisableFast+0x4c>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e002      	b.n	8005ab4 <LL_TIM_OC_DisableFast+0x4c>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <LL_TIM_OC_DisableFast+0x4c>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3318      	adds	r3, #24
 8005aba:	461a      	mov	r2, r3
 8005abc:	4629      	mov	r1, r5
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <LL_TIM_OC_DisableFast+0x7c>)
 8005ac0:	5c5b      	ldrb	r3, [r3, r1]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8005ac6:	6822      	ldr	r2, [r4, #0]
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4b07      	ldr	r3, [pc, #28]	; (8005ae8 <LL_TIM_OC_DisableFast+0x80>)
 8005acc:	5c5b      	ldrb	r3, [r3, r1]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	408b      	lsls	r3, r1
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	6023      	str	r3, [r4, #0]
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bcb0      	pop	{r4, r5, r7}
 8005ae2:	4770      	bx	lr
 8005ae4:	08008124 	.word	0x08008124
 8005ae8:	0800812c 	.word	0x0800812c

08005aec <LL_TIM_OC_EnablePreload>:
{
 8005aec:	b4b0      	push	{r4, r5, r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d01c      	beq.n	8005b36 <LL_TIM_OC_EnablePreload+0x4a>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d017      	beq.n	8005b32 <LL_TIM_OC_EnablePreload+0x46>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d012      	beq.n	8005b2e <LL_TIM_OC_EnablePreload+0x42>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b40      	cmp	r3, #64	; 0x40
 8005b0c:	d00d      	beq.n	8005b2a <LL_TIM_OC_EnablePreload+0x3e>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b14:	d007      	beq.n	8005b26 <LL_TIM_OC_EnablePreload+0x3a>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1c:	d101      	bne.n	8005b22 <LL_TIM_OC_EnablePreload+0x36>
 8005b1e:	2305      	movs	r3, #5
 8005b20:	e00a      	b.n	8005b38 <LL_TIM_OC_EnablePreload+0x4c>
 8005b22:	2306      	movs	r3, #6
 8005b24:	e008      	b.n	8005b38 <LL_TIM_OC_EnablePreload+0x4c>
 8005b26:	2304      	movs	r3, #4
 8005b28:	e006      	b.n	8005b38 <LL_TIM_OC_EnablePreload+0x4c>
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e004      	b.n	8005b38 <LL_TIM_OC_EnablePreload+0x4c>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e002      	b.n	8005b38 <LL_TIM_OC_EnablePreload+0x4c>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <LL_TIM_OC_EnablePreload+0x4c>
 8005b36:	2300      	movs	r3, #0
 8005b38:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3318      	adds	r3, #24
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4629      	mov	r1, r5
 8005b42:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <LL_TIM_OC_EnablePreload+0x7c>)
 8005b44:	5c5b      	ldrb	r3, [r3, r1]
 8005b46:	4413      	add	r3, r2
 8005b48:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005b4a:	6822      	ldr	r2, [r4, #0]
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <LL_TIM_OC_EnablePreload+0x80>)
 8005b50:	5c5b      	ldrb	r3, [r3, r1]
 8005b52:	4619      	mov	r1, r3
 8005b54:	2308      	movs	r3, #8
 8005b56:	408b      	lsls	r3, r1
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	6023      	str	r3, [r4, #0]
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bcb0      	pop	{r4, r5, r7}
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	08008124 	.word	0x08008124
 8005b6c:	0800812c 	.word	0x0800812c

08005b70 <LL_TIM_SetClockSource>:
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b82:	f023 0307 	bic.w	r3, r3, #7
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	609a      	str	r2, [r3, #8]
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr

08005b98 <LL_TIM_SetTriggerOutput>:
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	605a      	str	r2, [r3, #4]
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc80      	pop	{r7}
 8005bba:	4770      	bx	lr

08005bbc <LL_TIM_DisableMasterSlaveMode>:
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	609a      	str	r2, [r3, #8]
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr
	...

08005bdc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005be4:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005be6:	699a      	ldr	r2, [r3, #24]
 8005be8:	4907      	ldr	r1, [pc, #28]	; (8005c08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005bf0:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005bf2:	699a      	ldr	r2, [r3, #24]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40021000 	.word	0x40021000

08005c0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b094      	sub	sp, #80	; 0x50
 8005c10:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005c12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	605a      	str	r2, [r3, #4]
 8005c1c:	609a      	str	r2, [r3, #8]
 8005c1e:	60da      	str	r2, [r3, #12]
 8005c20:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005c22:	f107 031c 	add.w	r3, r7, #28
 8005c26:	2220      	movs	r2, #32
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 ff9e 	bl	8006b6c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8005c30:	1d3b      	adds	r3, r7, #4
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	605a      	str	r2, [r3, #4]
 8005c38:	609a      	str	r2, [r3, #8]
 8005c3a:	60da      	str	r2, [r3, #12]
 8005c3c:	611a      	str	r2, [r3, #16]
 8005c3e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8005c40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c44:	f7ff ffca 	bl	8005bdc <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8005c48:	f7ff fe78 	bl	800593c <__NVIC_GetPriorityGrouping>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2101      	movs	r1, #1
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff fec6 	bl	80059e4 <NVIC_EncodePriority>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	2018      	movs	r0, #24
 8005c5e:	f7ff fe97 	bl	8005990 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8005c62:	2018      	movs	r0, #24
 8005c64:	f7ff fe78 	bl	8005958 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8005c68:	f7ff fe68 	bl	800593c <__NVIC_GetPriorityGrouping>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2101      	movs	r1, #1
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff feb6 	bl	80059e4 <NVIC_EncodePriority>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	2019      	movs	r0, #25
 8005c7e:	f7ff fe87 	bl	8005990 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005c82:	2019      	movs	r0, #25
 8005c84:	f7ff fe68 	bl	8005958 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_TRG_COM_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8005c88:	f7ff fe58 	bl	800593c <__NVIC_GetPriorityGrouping>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2101      	movs	r1, #1
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff fea6 	bl	80059e4 <NVIC_EncodePriority>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	201a      	movs	r0, #26
 8005c9e:	f7ff fe77 	bl	8005990 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8005ca2:	201a      	movs	r0, #26
 8005ca4:	f7ff fe58 	bl	8005958 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8005ca8:	f7ff fe48 	bl	800593c <__NVIC_GetPriorityGrouping>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff fe96 	bl	80059e4 <NVIC_EncodePriority>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4619      	mov	r1, r3
 8005cbc:	201b      	movs	r0, #27
 8005cbe:	f7ff fe67 	bl	8005990 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005cc2:	201b      	movs	r0, #27
 8005cc4:	f7ff fe48 	bl	8005958 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 7199;
 8005cc8:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8005ccc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8005cd2:	2363      	movs	r3, #99	; 0x63
 8005cd4:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_InitStruct.RepetitionCounter = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8005ce0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4844      	ldr	r0, [pc, #272]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005ce8:	f7fd f992 	bl	8003010 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8005cec:	4842      	ldr	r0, [pc, #264]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005cee:	f7ff feab 	bl	8005a48 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4840      	ldr	r0, [pc, #256]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005cf6:	f7ff ff3b 	bl	8005b70 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	483e      	ldr	r0, [pc, #248]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005cfe:	f7ff fef5 	bl	8005aec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005d02:	2360      	movs	r3, #96	; 0x60
 8005d04:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005d06:	2300      	movs	r3, #0
 8005d08:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005d12:	2300      	movs	r3, #0
 8005d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005d16:	2300      	movs	r3, #0
 8005d18:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005d22:	f107 031c 	add.w	r3, r7, #28
 8005d26:	461a      	mov	r2, r3
 8005d28:	2101      	movs	r1, #1
 8005d2a:	4833      	ldr	r0, [pc, #204]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005d2c:	f7fd f9ce 	bl	80030cc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8005d30:	2101      	movs	r1, #1
 8005d32:	4831      	ldr	r0, [pc, #196]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005d34:	f7ff fe98 	bl	8005a68 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8005d38:	2110      	movs	r1, #16
 8005d3a:	482f      	ldr	r0, [pc, #188]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005d3c:	f7ff fed6 	bl	8005aec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005d40:	2300      	movs	r3, #0
 8005d42:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005d44:	2300      	movs	r3, #0
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8005d48:	f107 031c 	add.w	r3, r7, #28
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	2110      	movs	r1, #16
 8005d50:	4829      	ldr	r0, [pc, #164]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005d52:	f7fd f9bb 	bl	80030cc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8005d56:	2110      	movs	r1, #16
 8005d58:	4827      	ldr	r0, [pc, #156]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005d5a:	f7ff fe85 	bl	8005a68 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8005d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d62:	4825      	ldr	r0, [pc, #148]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005d64:	f7ff fec2 	bl	8005aec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8005d70:	f107 031c 	add.w	r3, r7, #28
 8005d74:	461a      	mov	r2, r3
 8005d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d7a:	481f      	ldr	r0, [pc, #124]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005d7c:	f7fd f9a6 	bl	80030cc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8005d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d84:	481c      	ldr	r0, [pc, #112]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005d86:	f7ff fe6f 	bl	8005a68 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8005d8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d8e:	481a      	ldr	r0, [pc, #104]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005d90:	f7ff feac 	bl	8005aec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 98;
 8005d9c:	2362      	movs	r3, #98	; 0x62
 8005d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005da0:	f107 031c 	add.w	r3, r7, #28
 8005da4:	461a      	mov	r2, r3
 8005da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005daa:	4813      	ldr	r0, [pc, #76]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005dac:	f7fd f98e 	bl	80030cc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8005db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005db4:	4810      	ldr	r0, [pc, #64]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005db6:	f7ff fe57 	bl	8005a68 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8005dba:	2100      	movs	r1, #0
 8005dbc:	480e      	ldr	r0, [pc, #56]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005dbe:	f7ff feeb 	bl	8005b98 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8005dc2:	480d      	ldr	r0, [pc, #52]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005dc4:	f7ff fefa 	bl	8005bbc <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	607b      	str	r3, [r7, #4]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60bb      	str	r3, [r7, #8]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
  TIM_BDTRInitStruct.DeadTime = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	743b      	strb	r3, [r7, #16]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	827b      	strh	r3, [r7, #18]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8005ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005de0:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8005de6:	1d3b      	adds	r3, r7, #4
 8005de8:	4619      	mov	r1, r3
 8005dea:	4803      	ldr	r0, [pc, #12]	; (8005df8 <MX_TIM1_Init+0x1ec>)
 8005dec:	f7fd f9a6 	bl	800313c <LL_TIM_BDTR_Init>

}
 8005df0:	bf00      	nop
 8005df2:	3750      	adds	r7, #80	; 0x50
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40012c00 	.word	0x40012c00

08005dfc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08c      	sub	sp, #48	; 0x30
 8005e00:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005e02:	f107 030c 	add.w	r3, r7, #12
 8005e06:	2224      	movs	r2, #36	; 0x24
 8005e08:	2100      	movs	r1, #0
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 feae 	bl	8006b6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e10:	1d3b      	adds	r3, r7, #4
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8005e18:	4b21      	ldr	r3, [pc, #132]	; (8005ea0 <MX_TIM2_Init+0xa4>)
 8005e1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005e20:	4b1f      	ldr	r3, [pc, #124]	; (8005ea0 <MX_TIM2_Init+0xa4>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e26:	4b1e      	ldr	r3, [pc, #120]	; (8005ea0 <MX_TIM2_Init+0xa4>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005e2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ea0 <MX_TIM2_Init+0xa4>)
 8005e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e34:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <MX_TIM2_Init+0xa4>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e3a:	4b19      	ldr	r3, [pc, #100]	; (8005ea0 <MX_TIM2_Init+0xa4>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005e40:	2303      	movs	r3, #3
 8005e42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005e54:	2300      	movs	r3, #0
 8005e56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005e64:	f107 030c 	add.w	r3, r7, #12
 8005e68:	4619      	mov	r1, r3
 8005e6a:	480d      	ldr	r0, [pc, #52]	; (8005ea0 <MX_TIM2_Init+0xa4>)
 8005e6c:	f7fc fc71 	bl	8002752 <HAL_TIM_Encoder_Init>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005e76:	f7fe fe88 	bl	8004b8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e82:	1d3b      	adds	r3, r7, #4
 8005e84:	4619      	mov	r1, r3
 8005e86:	4806      	ldr	r0, [pc, #24]	; (8005ea0 <MX_TIM2_Init+0xa4>)
 8005e88:	f7fc feda 	bl	8002c40 <HAL_TIMEx_MasterConfigSynchronization>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005e92:	f7fe fe7a 	bl	8004b8a <Error_Handler>
  }

}
 8005e96:	bf00      	nop
 8005e98:	3730      	adds	r7, #48	; 0x30
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	200007a0 	.word	0x200007a0

08005ea4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08c      	sub	sp, #48	; 0x30
 8005ea8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005eaa:	f107 030c 	add.w	r3, r7, #12
 8005eae:	2224      	movs	r2, #36	; 0x24
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fe5a 	bl	8006b6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005eb8:	1d3b      	adds	r3, r7, #4
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8005ec0:	4b20      	ldr	r3, [pc, #128]	; (8005f44 <MX_TIM3_Init+0xa0>)
 8005ec2:	4a21      	ldr	r2, [pc, #132]	; (8005f48 <MX_TIM3_Init+0xa4>)
 8005ec4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005ec6:	4b1f      	ldr	r3, [pc, #124]	; (8005f44 <MX_TIM3_Init+0xa0>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ecc:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <MX_TIM3_Init+0xa0>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005ed2:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <MX_TIM3_Init+0xa0>)
 8005ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ed8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005eda:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <MX_TIM3_Init+0xa0>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ee0:	4b18      	ldr	r3, [pc, #96]	; (8005f44 <MX_TIM3_Init+0xa0>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005eea:	2300      	movs	r3, #0
 8005eec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005efa:	2300      	movs	r3, #0
 8005efc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005efe:	2301      	movs	r3, #1
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005f02:	2300      	movs	r3, #0
 8005f04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005f0a:	f107 030c 	add.w	r3, r7, #12
 8005f0e:	4619      	mov	r1, r3
 8005f10:	480c      	ldr	r0, [pc, #48]	; (8005f44 <MX_TIM3_Init+0xa0>)
 8005f12:	f7fc fc1e 	bl	8002752 <HAL_TIM_Encoder_Init>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005f1c:	f7fe fe35 	bl	8004b8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f20:	2300      	movs	r3, #0
 8005f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005f28:	1d3b      	adds	r3, r7, #4
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4805      	ldr	r0, [pc, #20]	; (8005f44 <MX_TIM3_Init+0xa0>)
 8005f2e:	f7fc fe87 	bl	8002c40 <HAL_TIMEx_MasterConfigSynchronization>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005f38:	f7fe fe27 	bl	8004b8a <Error_Handler>
  }

}
 8005f3c:	bf00      	nop
 8005f3e:	3730      	adds	r7, #48	; 0x30
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20000760 	.word	0x20000760
 8005f48:	40000400 	.word	0x40000400

08005f4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08c      	sub	sp, #48	; 0x30
 8005f50:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005f52:	f107 030c 	add.w	r3, r7, #12
 8005f56:	2224      	movs	r2, #36	; 0x24
 8005f58:	2100      	movs	r1, #0
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 fe06 	bl	8006b6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f60:	1d3b      	adds	r3, r7, #4
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8005f68:	4b20      	ldr	r3, [pc, #128]	; (8005fec <MX_TIM4_Init+0xa0>)
 8005f6a:	4a21      	ldr	r2, [pc, #132]	; (8005ff0 <MX_TIM4_Init+0xa4>)
 8005f6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005f6e:	4b1f      	ldr	r3, [pc, #124]	; (8005fec <MX_TIM4_Init+0xa0>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f74:	4b1d      	ldr	r3, [pc, #116]	; (8005fec <MX_TIM4_Init+0xa0>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005f7a:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <MX_TIM4_Init+0xa0>)
 8005f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f82:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <MX_TIM4_Init+0xa0>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f88:	4b18      	ldr	r3, [pc, #96]	; (8005fec <MX_TIM4_Init+0xa0>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005f96:	2301      	movs	r3, #1
 8005f98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005faa:	2300      	movs	r3, #0
 8005fac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005fb2:	f107 030c 	add.w	r3, r7, #12
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	480c      	ldr	r0, [pc, #48]	; (8005fec <MX_TIM4_Init+0xa0>)
 8005fba:	f7fc fbca 	bl	8002752 <HAL_TIM_Encoder_Init>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8005fc4:	f7fe fde1 	bl	8004b8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005fd0:	1d3b      	adds	r3, r7, #4
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4805      	ldr	r0, [pc, #20]	; (8005fec <MX_TIM4_Init+0xa0>)
 8005fd6:	f7fc fe33 	bl	8002c40 <HAL_TIMEx_MasterConfigSynchronization>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8005fe0:	f7fe fdd3 	bl	8004b8a <Error_Handler>
  }

}
 8005fe4:	bf00      	nop
 8005fe6:	3730      	adds	r7, #48	; 0x30
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20000720 	.word	0x20000720
 8005ff0:	40000800 	.word	0x40000800

08005ff4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b090      	sub	sp, #64	; 0x40
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ffc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	605a      	str	r2, [r3, #4]
 8006006:	609a      	str	r2, [r3, #8]
 8006008:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006012:	d157      	bne.n	80060c4 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006014:	4b68      	ldr	r3, [pc, #416]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	4a67      	ldr	r2, [pc, #412]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	61d3      	str	r3, [r2, #28]
 8006020:	4b65      	ldr	r3, [pc, #404]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800602c:	4b62      	ldr	r3, [pc, #392]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	4a61      	ldr	r2, [pc, #388]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006032:	f043 0304 	orr.w	r3, r3, #4
 8006036:	6193      	str	r3, [r2, #24]
 8006038:	4b5f      	ldr	r3, [pc, #380]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	623b      	str	r3, [r7, #32]
 8006042:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006044:	4b5c      	ldr	r3, [pc, #368]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	4a5b      	ldr	r2, [pc, #364]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800604a:	f043 0308 	orr.w	r3, r3, #8
 800604e:	6193      	str	r3, [r2, #24]
 8006050:	4b59      	ldr	r3, [pc, #356]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENCODER_0A_Pin;
 800605c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006062:	2300      	movs	r3, #0
 8006064:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006066:	2300      	movs	r3, #0
 8006068:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(ENCODER_0A_GPIO_Port, &GPIO_InitStruct);
 800606a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800606e:	4619      	mov	r1, r3
 8006070:	4852      	ldr	r0, [pc, #328]	; (80061bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8006072:	f7fb fbc5 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_0B_Pin;
 8006076:	2308      	movs	r3, #8
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800607a:	2300      	movs	r3, #0
 800607c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800607e:	2300      	movs	r3, #0
 8006080:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(ENCODER_0B_GPIO_Port, &GPIO_InitStruct);
 8006082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006086:	4619      	mov	r1, r3
 8006088:	484d      	ldr	r0, [pc, #308]	; (80061c0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800608a:	f7fb fbb9 	bl	8001800 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800608e:	4b4d      	ldr	r3, [pc, #308]	; (80061c4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	63bb      	str	r3, [r7, #56]	; 0x38
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800609a:	63bb      	str	r3, [r7, #56]	; 0x38
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80060a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80060ac:	4a45      	ldr	r2, [pc, #276]	; (80061c4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80060b2:	2200      	movs	r2, #0
 80060b4:	2100      	movs	r1, #0
 80060b6:	201c      	movs	r0, #28
 80060b8:	f7fb fb6b 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80060bc:	201c      	movs	r0, #28
 80060be:	f7fb fb84 	bl	80017ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80060c2:	e074      	b.n	80061ae <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM3)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a3f      	ldr	r2, [pc, #252]	; (80061c8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d13e      	bne.n	800614c <HAL_TIM_Encoder_MspInit+0x158>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80060ce:	4b3a      	ldr	r3, [pc, #232]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	4a39      	ldr	r2, [pc, #228]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060d4:	f043 0302 	orr.w	r3, r3, #2
 80060d8:	61d3      	str	r3, [r2, #28]
 80060da:	4b37      	ldr	r3, [pc, #220]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	61bb      	str	r3, [r7, #24]
 80060e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060e6:	4b34      	ldr	r3, [pc, #208]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	4a33      	ldr	r2, [pc, #204]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060ec:	f043 0308 	orr.w	r3, r3, #8
 80060f0:	6193      	str	r3, [r2, #24]
 80060f2:	4b31      	ldr	r3, [pc, #196]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	f003 0308 	and.w	r3, r3, #8
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENCODER_1A_Pin|ENCODER_1B_Pin;
 80060fe:	2330      	movs	r3, #48	; 0x30
 8006100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006102:	2300      	movs	r3, #0
 8006104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006106:	2300      	movs	r3, #0
 8006108:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800610a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800610e:	4619      	mov	r1, r3
 8006110:	482b      	ldr	r0, [pc, #172]	; (80061c0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006112:	f7fb fb75 	bl	8001800 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8006116:	4b2b      	ldr	r3, [pc, #172]	; (80061c4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800611c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006126:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800612a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800612c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006134:	4a23      	ldr	r2, [pc, #140]	; (80061c4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8006136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006138:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800613a:	2200      	movs	r2, #0
 800613c:	2100      	movs	r1, #0
 800613e:	201d      	movs	r0, #29
 8006140:	f7fb fb27 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006144:	201d      	movs	r0, #29
 8006146:	f7fb fb40 	bl	80017ca <HAL_NVIC_EnableIRQ>
}
 800614a:	e030      	b.n	80061ae <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM4)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d12b      	bne.n	80061ae <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006156:	4b18      	ldr	r3, [pc, #96]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800615c:	f043 0304 	orr.w	r3, r3, #4
 8006160:	61d3      	str	r3, [r2, #28]
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800616e:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	4a11      	ldr	r2, [pc, #68]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006174:	f043 0308 	orr.w	r3, r3, #8
 8006178:	6193      	str	r3, [r2, #24]
 800617a:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_2A_Pin|ENCODER_2B_Pin;
 8006186:	23c0      	movs	r3, #192	; 0xc0
 8006188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800618a:	2300      	movs	r3, #0
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618e:	2300      	movs	r3, #0
 8006190:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006196:	4619      	mov	r1, r3
 8006198:	4809      	ldr	r0, [pc, #36]	; (80061c0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800619a:	f7fb fb31 	bl	8001800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800619e:	2200      	movs	r2, #0
 80061a0:	2100      	movs	r1, #0
 80061a2:	201e      	movs	r0, #30
 80061a4:	f7fb faf5 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80061a8:	201e      	movs	r0, #30
 80061aa:	f7fb fb0e 	bl	80017ca <HAL_NVIC_EnableIRQ>
}
 80061ae:	bf00      	nop
 80061b0:	3740      	adds	r7, #64	; 0x40
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40021000 	.word	0x40021000
 80061bc:	40010800 	.word	0x40010800
 80061c0:	40010c00 	.word	0x40010c00
 80061c4:	40010000 	.word	0x40010000
 80061c8:	40000400 	.word	0x40000400
 80061cc:	40000800 	.word	0x40000800

080061d0 <TIMER_IncTimer>:
#include "timer.h"

TIMER_TypeDef TIMER_0;

void TIMER_IncTimer(TIMER_TypeDef* TIMER)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	TIMER->ticks++;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	601a      	str	r2, [r3, #0]
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <TIMER_SetZero>:

void TIMER_SetZero(TIMER_TypeDef* TIMER)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	TIMER->ticks = 0;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <TIMER_GetTime>:
{
	return TIMER->ticks;
}

float TIMER_GetTime(TIMER_TypeDef* TIMER)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	return TIMER->time;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
}
 8006210:	4618      	mov	r0, r3
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	bc80      	pop	{r7}
 8006218:	4770      	bx	lr

0800621a <TIMER_Init>:

void TIMER_Init(TIMER_TypeDef* TIMER)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b082      	sub	sp, #8
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
	TIMER_SetZero(TIMER);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff ffe2 	bl	80061ec <TIMER_SetZero>
	TIMER->enable = false;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	721a      	strb	r2, [r3, #8]
}
 800622e:	bf00      	nop
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <TIMER_UpdateTime>:

void     TIMER_UpdateTime(TIMER_TypeDef* TIMER)
{
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	TIMER->time = (float)TIMER->ticks * dt;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f7fa fd1d 	bl	8000c84 <__aeabi_ui2f>
 800624a:	4603      	mov	r3, r0
 800624c:	4618      	mov	r0, r3
 800624e:	f7fa f8e3 	bl	8000418 <__aeabi_f2d>
 8006252:	a309      	add	r3, pc, #36	; (adr r3, 8006278 <TIMER_UpdateTime+0x40>)
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	f7fa f936 	bl	80004c8 <__aeabi_dmul>
 800625c:	4603      	mov	r3, r0
 800625e:	460c      	mov	r4, r1
 8006260:	4618      	mov	r0, r3
 8006262:	4621      	mov	r1, r4
 8006264:	f7fa fc08 	bl	8000a78 <__aeabi_d2f>
 8006268:	4602      	mov	r2, r0
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	605a      	str	r2, [r3, #4]
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	bd90      	pop	{r4, r7, pc}
 8006276:	bf00      	nop
 8006278:	47ae147b 	.word	0x47ae147b
 800627c:	3f847ae1 	.word	0x3f847ae1

08006280 <TIMER_Enable>:

void     TIMER_Enable(TIMER_TypeDef* TIMER)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	TIMER->enable = true;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	721a      	strb	r2, [r3, #8]
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr

08006298 <TIMER_IsEnabled>:
{
	TIMER->enable = false;
}

bool	 TIMER_IsEnabled(TIMER_TypeDef* TIMER)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	return TIMER->enable;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7a1b      	ldrb	r3, [r3, #8]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr
	...

080062b0 <TRAJECTORY_Init>:
#include <stdbool.h>

TRAJECTORY_TypeDef TRAJECTORY;

void TRAJECTORY_Init()
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
	TRAJECTORY.xCurrent = 0.0;
 80062b4:	4b37      	ldr	r3, [pc, #220]	; (8006394 <TRAJECTORY_Init+0xe4>)
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
	TRAJECTORY.yCurrent = 0.0;
 80062bc:	4b35      	ldr	r3, [pc, #212]	; (8006394 <TRAJECTORY_Init+0xe4>)
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	605a      	str	r2, [r3, #4]
	TRAJECTORY.zCurrent = 0.0;
 80062c4:	4b33      	ldr	r3, [pc, #204]	; (8006394 <TRAJECTORY_Init+0xe4>)
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	609a      	str	r2, [r3, #8]

	TRAJECTORY.xTarget = 0.0;
 80062cc:	4b31      	ldr	r3, [pc, #196]	; (8006394 <TRAJECTORY_Init+0xe4>)
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	619a      	str	r2, [r3, #24]
	TRAJECTORY.yTarget = 0.0;
 80062d4:	4b2f      	ldr	r3, [pc, #188]	; (8006394 <TRAJECTORY_Init+0xe4>)
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	61da      	str	r2, [r3, #28]
	TRAJECTORY.zTarget = 0.0;
 80062dc:	4b2d      	ldr	r3, [pc, #180]	; (8006394 <TRAJECTORY_Init+0xe4>)
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	621a      	str	r2, [r3, #32]

	TRAJECTORY.xStart = 0,0;
 80062e4:	4b2b      	ldr	r3, [pc, #172]	; (8006394 <TRAJECTORY_Init+0xe4>)
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24
	TRAJECTORY.yStart = 0.0;
 80062ec:	4b29      	ldr	r3, [pc, #164]	; (8006394 <TRAJECTORY_Init+0xe4>)
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	629a      	str	r2, [r3, #40]	; 0x28
	TRAJECTORY.zStart = 0.0;
 80062f4:	4b27      	ldr	r3, [pc, #156]	; (8006394 <TRAJECTORY_Init+0xe4>)
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	62da      	str	r2, [r3, #44]	; 0x2c

	TRAJECTORY.xLength = 0.0;
 80062fc:	4b25      	ldr	r3, [pc, #148]	; (8006394 <TRAJECTORY_Init+0xe4>)
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
	TRAJECTORY.yLength = 0.0;
 8006304:	4b23      	ldr	r3, [pc, #140]	; (8006394 <TRAJECTORY_Init+0xe4>)
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	635a      	str	r2, [r3, #52]	; 0x34
	TRAJECTORY.zLength = 0.0;
 800630c:	4b21      	ldr	r3, [pc, #132]	; (8006394 <TRAJECTORY_Init+0xe4>)
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	639a      	str	r2, [r3, #56]	; 0x38

	TRAJECTORY.velocity = 0.0;
 8006314:	4b1f      	ldr	r3, [pc, #124]	; (8006394 <TRAJECTORY_Init+0xe4>)
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	63da      	str	r2, [r3, #60]	; 0x3c
	TRAJECTORY.totalTime = 0.0;
 800631c:	4b1d      	ldr	r3, [pc, #116]	; (8006394 <TRAJECTORY_Init+0xe4>)
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	641a      	str	r2, [r3, #64]	; 0x40
	TRAJECTORY.trackLength = 0.0;
 8006324:	4b1b      	ldr	r3, [pc, #108]	; (8006394 <TRAJECTORY_Init+0xe4>)
 8006326:	f04f 0200 	mov.w	r2, #0
 800632a:	645a      	str	r2, [r3, #68]	; 0x44

	TRAJECTORY.timeStart = 0.0;
 800632c:	4b19      	ldr	r3, [pc, #100]	; (8006394 <TRAJECTORY_Init+0xe4>)
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	649a      	str	r2, [r3, #72]	; 0x48
	TRAJECTORY.time = 0.0;
 8006334:	4b17      	ldr	r3, [pc, #92]	; (8006394 <TRAJECTORY_Init+0xe4>)
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	64da      	str	r2, [r3, #76]	; 0x4c

	TRAJECTORY.theta0 = 0.0;
 800633c:	4b15      	ldr	r3, [pc, #84]	; (8006394 <TRAJECTORY_Init+0xe4>)
 800633e:	f04f 0200 	mov.w	r2, #0
 8006342:	651a      	str	r2, [r3, #80]	; 0x50
	TRAJECTORY.theta1 = 0.0;
 8006344:	4b13      	ldr	r3, [pc, #76]	; (8006394 <TRAJECTORY_Init+0xe4>)
 8006346:	f04f 0200 	mov.w	r2, #0
 800634a:	655a      	str	r2, [r3, #84]	; 0x54
	TRAJECTORY.theta2 = 0.0;
 800634c:	4b11      	ldr	r3, [pc, #68]	; (8006394 <TRAJECTORY_Init+0xe4>)
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	659a      	str	r2, [r3, #88]	; 0x58

	TRAJECTORY.theta0Next = 0.0;
 8006354:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <TRAJECTORY_Init+0xe4>)
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	65da      	str	r2, [r3, #92]	; 0x5c
	TRAJECTORY.theta1Next = 0.0;
 800635c:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <TRAJECTORY_Init+0xe4>)
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	661a      	str	r2, [r3, #96]	; 0x60
	TRAJECTORY.theta2Next = 0.0;
 8006364:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <TRAJECTORY_Init+0xe4>)
 8006366:	f04f 0200 	mov.w	r2, #0
 800636a:	665a      	str	r2, [r3, #100]	; 0x64

	TRAJECTORY.theta0Velocity = 0.0;
 800636c:	4b09      	ldr	r3, [pc, #36]	; (8006394 <TRAJECTORY_Init+0xe4>)
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	669a      	str	r2, [r3, #104]	; 0x68
	TRAJECTORY.theta1Velocity = 0.0;
 8006374:	4b07      	ldr	r3, [pc, #28]	; (8006394 <TRAJECTORY_Init+0xe4>)
 8006376:	f04f 0200 	mov.w	r2, #0
 800637a:	66da      	str	r2, [r3, #108]	; 0x6c
	TRAJECTORY.theta2Velocity = 0.0;
 800637c:	4b05      	ldr	r3, [pc, #20]	; (8006394 <TRAJECTORY_Init+0xe4>)
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	671a      	str	r2, [r3, #112]	; 0x70

	TRAJECTORY.busy = false;
 8006384:	4b03      	ldr	r3, [pc, #12]	; (8006394 <TRAJECTORY_Init+0xe4>)
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
}
 800638c:	bf00      	nop
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr
 8006394:	200007ec 	.word	0x200007ec

08006398 <TRAJECTORY_SetTrajectory>:

void TRAJECTORY_SetTrajectory(TRAJECTORY_TypeDef* TRAJECTORY, float x0, float y0, float z0, float xk, float yk, float zk, float velocity)
{
 8006398:	b590      	push	{r4, r7, lr}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
	TRAJECTORY->xStart = x0;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	625a      	str	r2, [r3, #36]	; 0x24
	TRAJECTORY->yStart = y0;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	629a      	str	r2, [r3, #40]	; 0x28
	TRAJECTORY->zStart = z0;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	62da      	str	r2, [r3, #44]	; 0x2c
	TRAJECTORY->xTarget = xk;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a3a      	ldr	r2, [r7, #32]
 80063bc:	619a      	str	r2, [r3, #24]
	TRAJECTORY->yTarget = yk;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c2:	61da      	str	r2, [r3, #28]
	TRAJECTORY->zTarget = zk;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c8:	621a      	str	r2, [r3, #32]
	TRAJECTORY->velocity = velocity;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ce:	63da      	str	r2, [r3, #60]	; 0x3c

	TRAJECTORY->xLength = (TRAJECTORY->xTarget - TRAJECTORY->xStart);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	699a      	ldr	r2, [r3, #24]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	4619      	mov	r1, r3
 80063da:	4610      	mov	r0, r2
 80063dc:	f7fa fba0 	bl	8000b20 <__aeabi_fsub>
 80063e0:	4603      	mov	r3, r0
 80063e2:	461a      	mov	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
	TRAJECTORY->yLength = (TRAJECTORY->yTarget - TRAJECTORY->yStart);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	69da      	ldr	r2, [r3, #28]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f0:	4619      	mov	r1, r3
 80063f2:	4610      	mov	r0, r2
 80063f4:	f7fa fb94 	bl	8000b20 <__aeabi_fsub>
 80063f8:	4603      	mov	r3, r0
 80063fa:	461a      	mov	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	635a      	str	r2, [r3, #52]	; 0x34
	TRAJECTORY->zLength = (TRAJECTORY->zTarget - TRAJECTORY->zStart);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	4619      	mov	r1, r3
 800640a:	4610      	mov	r0, r2
 800640c:	f7fa fb88 	bl	8000b20 <__aeabi_fsub>
 8006410:	4603      	mov	r3, r0
 8006412:	461a      	mov	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	639a      	str	r2, [r3, #56]	; 0x38
	TRAJECTORY->trackLength = sqrt(TRAJECTORY->xLength * TRAJECTORY->xLength + TRAJECTORY->yLength * TRAJECTORY->yLength + TRAJECTORY->zLength * TRAJECTORY->zLength);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f7fa fc86 	bl	8000d34 <__aeabi_fmul>
 8006428:	4603      	mov	r3, r0
 800642a:	461c      	mov	r4, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006434:	4619      	mov	r1, r3
 8006436:	4610      	mov	r0, r2
 8006438:	f7fa fc7c 	bl	8000d34 <__aeabi_fmul>
 800643c:	4603      	mov	r3, r0
 800643e:	4619      	mov	r1, r3
 8006440:	4620      	mov	r0, r4
 8006442:	f7fa fb6f 	bl	8000b24 <__addsf3>
 8006446:	4603      	mov	r3, r0
 8006448:	461c      	mov	r4, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f7fa fc6d 	bl	8000d34 <__aeabi_fmul>
 800645a:	4603      	mov	r3, r0
 800645c:	4619      	mov	r1, r3
 800645e:	4620      	mov	r0, r4
 8006460:	f7fa fb60 	bl	8000b24 <__addsf3>
 8006464:	4603      	mov	r3, r0
 8006466:	4618      	mov	r0, r3
 8006468:	f7f9 ffd6 	bl	8000418 <__aeabi_f2d>
 800646c:	4603      	mov	r3, r0
 800646e:	460c      	mov	r4, r1
 8006470:	4618      	mov	r0, r3
 8006472:	4621      	mov	r1, r4
 8006474:	f000 fd82 	bl	8006f7c <sqrt>
 8006478:	4603      	mov	r3, r0
 800647a:	460c      	mov	r4, r1
 800647c:	4618      	mov	r0, r3
 800647e:	4621      	mov	r1, r4
 8006480:	f7fa fafa 	bl	8000a78 <__aeabi_d2f>
 8006484:	4602      	mov	r2, r0
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
	TRAJECTORY->totalTime = TRAJECTORY->trackLength/TRAJECTORY->velocity;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006492:	4619      	mov	r1, r3
 8006494:	4610      	mov	r0, r2
 8006496:	f7fa fd01 	bl	8000e9c <__aeabi_fdiv>
 800649a:	4603      	mov	r3, r0
 800649c:	461a      	mov	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80064a2:	bf00      	nop
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd90      	pop	{r4, r7, pc}
	...

080064ac <TRAJECTORY_StartTrajectory>:

bool TRAJECTORY_StartTrajectory(TRAJECTORY_TypeDef* TRAJECTORY)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
	TRAJECTORY->busy = true;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	TRAJECTORY->timeStart = TIMER_GetTime(&TIMER_0);
 80064bc:	4805      	ldr	r0, [pc, #20]	; (80064d4 <TRAJECTORY_StartTrajectory+0x28>)
 80064be:	f7ff fea1 	bl	8006204 <TIMER_GetTime>
 80064c2:	4602      	mov	r2, r0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80064c8:	bf00      	nop
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	200007e0 	.word	0x200007e0

080064d8 <TRAJECTORY_IsBusy>:

bool TRAJECTORY_IsBusy(TRAJECTORY_TypeDef* TRAJECTORY)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
	return TRAJECTORY->busy;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr

080064f0 <TRAJECTORY_MakeStep>:

bool TRAJECTORY_MakeStep(TRAJECTORY_TypeDef* TRAJECTORY)
{
 80064f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af02      	add	r7, sp, #8
 80064f8:	6078      	str	r0, [r7, #4]

TRAJECTORY->time = TIMER_GetTime(&TIMER_0) - TRAJECTORY->timeStart;
 80064fa:	481d      	ldr	r0, [pc, #116]	; (8006570 <TRAJECTORY_MakeStep+0x80>)
 80064fc:	f7ff fe82 	bl	8006204 <TIMER_GetTime>
 8006500:	4602      	mov	r2, r0
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f7fa fb09 	bl	8000b20 <__aeabi_fsub>
 800650e:	4603      	mov	r3, r0
 8006510:	461a      	mov	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	64da      	str	r2, [r3, #76]	; 0x4c

if(TRAJECTORY->busy)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 81bf 	beq.w	80068a0 <TRAJECTORY_MakeStep+0x3b0>
{
	if(TRAJECTORY->time > (TRAJECTORY->totalTime -dt))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006526:	4618      	mov	r0, r3
 8006528:	f7f9 ff76 	bl	8000418 <__aeabi_f2d>
 800652c:	4604      	mov	r4, r0
 800652e:	460d      	mov	r5, r1
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006534:	4618      	mov	r0, r3
 8006536:	f7f9 ff6f 	bl	8000418 <__aeabi_f2d>
 800653a:	a30b      	add	r3, pc, #44	; (adr r3, 8006568 <TRAJECTORY_MakeStep+0x78>)
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f7f9 fe0a 	bl	8000158 <__aeabi_dsub>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4620      	mov	r0, r4
 800654a:	4629      	mov	r1, r5
 800654c:	f7fa fa4c 	bl	80009e8 <__aeabi_dcmpgt>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00e      	beq.n	8006574 <TRAJECTORY_MakeStep+0x84>
	{
		TRAJECTORY->busy = false;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		return false;
 800655e:	2300      	movs	r3, #0
 8006560:	e1a0      	b.n	80068a4 <TRAJECTORY_MakeStep+0x3b4>
 8006562:	bf00      	nop
 8006564:	f3af 8000 	nop.w
 8006568:	47ae147b 	.word	0x47ae147b
 800656c:	3f847ae1 	.word	0x3f847ae1
 8006570:	200007e0 	.word	0x200007e0
	}
	else
	{
		TRAJECTORY->xCurrent = TRAJECTORY->xStart + TRAJECTORY->xLength * (TRAJECTORY->time/TRAJECTORY->totalTime);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f7fa fc88 	bl	8000e9c <__aeabi_fdiv>
 800658c:	4603      	mov	r3, r0
 800658e:	4619      	mov	r1, r3
 8006590:	4628      	mov	r0, r5
 8006592:	f7fa fbcf 	bl	8000d34 <__aeabi_fmul>
 8006596:	4603      	mov	r3, r0
 8006598:	4619      	mov	r1, r3
 800659a:	4620      	mov	r0, r4
 800659c:	f7fa fac2 	bl	8000b24 <__addsf3>
 80065a0:	4603      	mov	r3, r0
 80065a2:	461a      	mov	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	601a      	str	r2, [r3, #0]
		TRAJECTORY->yCurrent = TRAJECTORY->yStart + TRAJECTORY->yLength * (TRAJECTORY->time/TRAJECTORY->totalTime);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	4619      	mov	r1, r3
 80065ba:	4610      	mov	r0, r2
 80065bc:	f7fa fc6e 	bl	8000e9c <__aeabi_fdiv>
 80065c0:	4603      	mov	r3, r0
 80065c2:	4619      	mov	r1, r3
 80065c4:	4628      	mov	r0, r5
 80065c6:	f7fa fbb5 	bl	8000d34 <__aeabi_fmul>
 80065ca:	4603      	mov	r3, r0
 80065cc:	4619      	mov	r1, r3
 80065ce:	4620      	mov	r0, r4
 80065d0:	f7fa faa8 	bl	8000b24 <__addsf3>
 80065d4:	4603      	mov	r3, r0
 80065d6:	461a      	mov	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	605a      	str	r2, [r3, #4]
		TRAJECTORY->zCurrent = TRAJECTORY->zStart + TRAJECTORY->zLength * (TRAJECTORY->time/TRAJECTORY->totalTime);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	4619      	mov	r1, r3
 80065ee:	4610      	mov	r0, r2
 80065f0:	f7fa fc54 	bl	8000e9c <__aeabi_fdiv>
 80065f4:	4603      	mov	r3, r0
 80065f6:	4619      	mov	r1, r3
 80065f8:	4628      	mov	r0, r5
 80065fa:	f7fa fb9b 	bl	8000d34 <__aeabi_fmul>
 80065fe:	4603      	mov	r3, r0
 8006600:	4619      	mov	r1, r3
 8006602:	4620      	mov	r0, r4
 8006604:	f7fa fa8e 	bl	8000b24 <__addsf3>
 8006608:	4603      	mov	r3, r0
 800660a:	461a      	mov	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	609a      	str	r2, [r3, #8]

		TRAJECTORY->xNext = TRAJECTORY->xStart + TRAJECTORY->xLength * ((TRAJECTORY->time + dt)/TRAJECTORY->totalTime);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	4618      	mov	r0, r3
 8006616:	f7f9 feff 	bl	8000418 <__aeabi_f2d>
 800661a:	4604      	mov	r4, r0
 800661c:	460d      	mov	r5, r1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	4618      	mov	r0, r3
 8006624:	f7f9 fef8 	bl	8000418 <__aeabi_f2d>
 8006628:	4680      	mov	r8, r0
 800662a:	4689      	mov	r9, r1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006630:	4618      	mov	r0, r3
 8006632:	f7f9 fef1 	bl	8000418 <__aeabi_f2d>
 8006636:	a39e      	add	r3, pc, #632	; (adr r3, 80068b0 <TRAJECTORY_MakeStep+0x3c0>)
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	f7f9 fd8e 	bl	800015c <__adddf3>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4692      	mov	sl, r2
 8006646:	469b      	mov	fp, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	4618      	mov	r0, r3
 800664e:	f7f9 fee3 	bl	8000418 <__aeabi_f2d>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4650      	mov	r0, sl
 8006658:	4659      	mov	r1, fp
 800665a:	f7fa f85f 	bl	800071c <__aeabi_ddiv>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4640      	mov	r0, r8
 8006664:	4649      	mov	r1, r9
 8006666:	f7f9 ff2f 	bl	80004c8 <__aeabi_dmul>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4620      	mov	r0, r4
 8006670:	4629      	mov	r1, r5
 8006672:	f7f9 fd73 	bl	800015c <__adddf3>
 8006676:	4603      	mov	r3, r0
 8006678:	460c      	mov	r4, r1
 800667a:	4618      	mov	r0, r3
 800667c:	4621      	mov	r1, r4
 800667e:	f7fa f9fb 	bl	8000a78 <__aeabi_d2f>
 8006682:	4602      	mov	r2, r0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60da      	str	r2, [r3, #12]
		TRAJECTORY->yNext = TRAJECTORY->yStart + TRAJECTORY->yLength * ((TRAJECTORY->time + dt)/TRAJECTORY->totalTime);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	4618      	mov	r0, r3
 800668e:	f7f9 fec3 	bl	8000418 <__aeabi_f2d>
 8006692:	4604      	mov	r4, r0
 8006694:	460d      	mov	r5, r1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669a:	4618      	mov	r0, r3
 800669c:	f7f9 febc 	bl	8000418 <__aeabi_f2d>
 80066a0:	4680      	mov	r8, r0
 80066a2:	4689      	mov	r9, r1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7f9 feb5 	bl	8000418 <__aeabi_f2d>
 80066ae:	a380      	add	r3, pc, #512	; (adr r3, 80068b0 <TRAJECTORY_MakeStep+0x3c0>)
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	f7f9 fd52 	bl	800015c <__adddf3>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4692      	mov	sl, r2
 80066be:	469b      	mov	fp, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7f9 fea7 	bl	8000418 <__aeabi_f2d>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4650      	mov	r0, sl
 80066d0:	4659      	mov	r1, fp
 80066d2:	f7fa f823 	bl	800071c <__aeabi_ddiv>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4640      	mov	r0, r8
 80066dc:	4649      	mov	r1, r9
 80066de:	f7f9 fef3 	bl	80004c8 <__aeabi_dmul>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4620      	mov	r0, r4
 80066e8:	4629      	mov	r1, r5
 80066ea:	f7f9 fd37 	bl	800015c <__adddf3>
 80066ee:	4603      	mov	r3, r0
 80066f0:	460c      	mov	r4, r1
 80066f2:	4618      	mov	r0, r3
 80066f4:	4621      	mov	r1, r4
 80066f6:	f7fa f9bf 	bl	8000a78 <__aeabi_d2f>
 80066fa:	4602      	mov	r2, r0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	611a      	str	r2, [r3, #16]
		TRAJECTORY->zNext = TRAJECTORY->zStart + TRAJECTORY->zLength * ((TRAJECTORY->time + dt)/TRAJECTORY->totalTime);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	4618      	mov	r0, r3
 8006706:	f7f9 fe87 	bl	8000418 <__aeabi_f2d>
 800670a:	4604      	mov	r4, r0
 800670c:	460d      	mov	r5, r1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	4618      	mov	r0, r3
 8006714:	f7f9 fe80 	bl	8000418 <__aeabi_f2d>
 8006718:	4680      	mov	r8, r0
 800671a:	4689      	mov	r9, r1
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006720:	4618      	mov	r0, r3
 8006722:	f7f9 fe79 	bl	8000418 <__aeabi_f2d>
 8006726:	a362      	add	r3, pc, #392	; (adr r3, 80068b0 <TRAJECTORY_MakeStep+0x3c0>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	f7f9 fd16 	bl	800015c <__adddf3>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4692      	mov	sl, r2
 8006736:	469b      	mov	fp, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	4618      	mov	r0, r3
 800673e:	f7f9 fe6b 	bl	8000418 <__aeabi_f2d>
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	4650      	mov	r0, sl
 8006748:	4659      	mov	r1, fp
 800674a:	f7f9 ffe7 	bl	800071c <__aeabi_ddiv>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4640      	mov	r0, r8
 8006754:	4649      	mov	r1, r9
 8006756:	f7f9 feb7 	bl	80004c8 <__aeabi_dmul>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4620      	mov	r0, r4
 8006760:	4629      	mov	r1, r5
 8006762:	f7f9 fcfb 	bl	800015c <__adddf3>
 8006766:	4603      	mov	r3, r0
 8006768:	460c      	mov	r4, r1
 800676a:	4618      	mov	r0, r3
 800676c:	4621      	mov	r1, r4
 800676e:	f7fa f983 	bl	8000a78 <__aeabi_d2f>
 8006772:	4602      	mov	r2, r0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	615a      	str	r2, [r3, #20]

		if(delta_calcInverse(TRAJECTORY->xCurrent, TRAJECTORY->yCurrent, TRAJECTORY->zCurrent, &TRAJECTORY->theta0, &TRAJECTORY->theta1, &TRAJECTORY->theta2) == 0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6818      	ldr	r0, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6859      	ldr	r1, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689c      	ldr	r4, [r3, #8]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3354      	adds	r3, #84	; 0x54
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	3258      	adds	r2, #88	; 0x58
 8006792:	9201      	str	r2, [sp, #4]
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	462b      	mov	r3, r5
 8006798:	4622      	mov	r2, r4
 800679a:	f7fd fe65 	bl	8004468 <delta_calcInverse>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d17f      	bne.n	80068a4 <TRAJECTORY_MakeStep+0x3b4>
		&& delta_calcInverse(TRAJECTORY->xNext, TRAJECTORY->yNext, TRAJECTORY->zNext, &TRAJECTORY->theta0Next, &TRAJECTORY->theta1Next, &TRAJECTORY->theta2Next) == 0)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68d8      	ldr	r0, [r3, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6919      	ldr	r1, [r3, #16]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	695c      	ldr	r4, [r3, #20]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3360      	adds	r3, #96	; 0x60
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	3264      	adds	r2, #100	; 0x64
 80067be:	9201      	str	r2, [sp, #4]
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	462b      	mov	r3, r5
 80067c4:	4622      	mov	r2, r4
 80067c6:	f7fd fe4f 	bl	8004468 <delta_calcInverse>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d169      	bne.n	80068a4 <TRAJECTORY_MakeStep+0x3b4>
		{

			TRAJECTORY->theta0Velocity =(TRAJECTORY->theta0Next - TRAJECTORY->theta0)/dt;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d8:	4619      	mov	r1, r3
 80067da:	4610      	mov	r0, r2
 80067dc:	f7fa f9a0 	bl	8000b20 <__aeabi_fsub>
 80067e0:	4603      	mov	r3, r0
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7f9 fe18 	bl	8000418 <__aeabi_f2d>
 80067e8:	a331      	add	r3, pc, #196	; (adr r3, 80068b0 <TRAJECTORY_MakeStep+0x3c0>)
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	f7f9 ff95 	bl	800071c <__aeabi_ddiv>
 80067f2:	4603      	mov	r3, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	4618      	mov	r0, r3
 80067f8:	4621      	mov	r1, r4
 80067fa:	f7fa f93d 	bl	8000a78 <__aeabi_d2f>
 80067fe:	4602      	mov	r2, r0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	669a      	str	r2, [r3, #104]	; 0x68
			TRAJECTORY->theta1Velocity =(TRAJECTORY->theta1Next - TRAJECTORY->theta1)/dt;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f7fa f986 	bl	8000b20 <__aeabi_fsub>
 8006814:	4603      	mov	r3, r0
 8006816:	4618      	mov	r0, r3
 8006818:	f7f9 fdfe 	bl	8000418 <__aeabi_f2d>
 800681c:	a324      	add	r3, pc, #144	; (adr r3, 80068b0 <TRAJECTORY_MakeStep+0x3c0>)
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f7f9 ff7b 	bl	800071c <__aeabi_ddiv>
 8006826:	4603      	mov	r3, r0
 8006828:	460c      	mov	r4, r1
 800682a:	4618      	mov	r0, r3
 800682c:	4621      	mov	r1, r4
 800682e:	f7fa f923 	bl	8000a78 <__aeabi_d2f>
 8006832:	4602      	mov	r2, r0
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	66da      	str	r2, [r3, #108]	; 0x6c
			TRAJECTORY->theta2Velocity =(TRAJECTORY->theta2Next - TRAJECTORY->theta2)/dt;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f7fa f96c 	bl	8000b20 <__aeabi_fsub>
 8006848:	4603      	mov	r3, r0
 800684a:	4618      	mov	r0, r3
 800684c:	f7f9 fde4 	bl	8000418 <__aeabi_f2d>
 8006850:	a317      	add	r3, pc, #92	; (adr r3, 80068b0 <TRAJECTORY_MakeStep+0x3c0>)
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	f7f9 ff61 	bl	800071c <__aeabi_ddiv>
 800685a:	4603      	mov	r3, r0
 800685c:	460c      	mov	r4, r1
 800685e:	4618      	mov	r0, r3
 8006860:	4621      	mov	r1, r4
 8006862:	f7fa f909 	bl	8000a78 <__aeabi_d2f>
 8006866:	4602      	mov	r2, r0
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	671a      	str	r2, [r3, #112]	; 0x70

			PID_SetRequired(&PID_0_Pos, -TRAJECTORY->theta0);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006870:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006874:	4619      	mov	r1, r3
 8006876:	4810      	ldr	r0, [pc, #64]	; (80068b8 <TRAJECTORY_MakeStep+0x3c8>)
 8006878:	f7fe fc9d 	bl	80051b6 <PID_SetRequired>
			PID_SetRequired(&PID_1_Pos, -TRAJECTORY->theta1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006880:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006884:	4619      	mov	r1, r3
 8006886:	480d      	ldr	r0, [pc, #52]	; (80068bc <TRAJECTORY_MakeStep+0x3cc>)
 8006888:	f7fe fc95 	bl	80051b6 <PID_SetRequired>
			PID_SetRequired(&PID_2_Pos, -TRAJECTORY->theta2);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006890:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006894:	4619      	mov	r1, r3
 8006896:	480a      	ldr	r0, [pc, #40]	; (80068c0 <TRAJECTORY_MakeStep+0x3d0>)
 8006898:	f7fe fc8d 	bl	80051b6 <PID_SetRequired>

//			PID_SetRequired(&PID_0_Speed, -TRAJECTORY->theta0Velocity);
//			PID_SetRequired(&PID_1_Speed, -TRAJECTORY->theta1Velocity);
//			PID_SetRequired(&PID_2_Speed, -TRAJECTORY->theta2Velocity);

			return true;
 800689c:	2301      	movs	r3, #1
 800689e:	e001      	b.n	80068a4 <TRAJECTORY_MakeStep+0x3b4>
		}
	}
}
else return false;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e7ff      	b.n	80068a4 <TRAJECTORY_MakeStep+0x3b4>
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ae:	bf00      	nop
 80068b0:	47ae147b 	.word	0x47ae147b
 80068b4:	3f847ae1 	.word	0x3f847ae1
 80068b8:	20000628 	.word	0x20000628
 80068bc:	20000688 	.word	0x20000688
 80068c0:	20000668 	.word	0x20000668

080068c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80068c8:	4b11      	ldr	r3, [pc, #68]	; (8006910 <MX_USART2_UART_Init+0x4c>)
 80068ca:	4a12      	ldr	r2, [pc, #72]	; (8006914 <MX_USART2_UART_Init+0x50>)
 80068cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80068ce:	4b10      	ldr	r3, [pc, #64]	; (8006910 <MX_USART2_UART_Init+0x4c>)
 80068d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80068d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80068d6:	4b0e      	ldr	r3, [pc, #56]	; (8006910 <MX_USART2_UART_Init+0x4c>)
 80068d8:	2200      	movs	r2, #0
 80068da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80068dc:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <MX_USART2_UART_Init+0x4c>)
 80068de:	2200      	movs	r2, #0
 80068e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80068e2:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <MX_USART2_UART_Init+0x4c>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80068e8:	4b09      	ldr	r3, [pc, #36]	; (8006910 <MX_USART2_UART_Init+0x4c>)
 80068ea:	220c      	movs	r2, #12
 80068ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068ee:	4b08      	ldr	r3, [pc, #32]	; (8006910 <MX_USART2_UART_Init+0x4c>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80068f4:	4b06      	ldr	r3, [pc, #24]	; (8006910 <MX_USART2_UART_Init+0x4c>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80068fa:	4805      	ldr	r0, [pc, #20]	; (8006910 <MX_USART2_UART_Init+0x4c>)
 80068fc:	f7fc f9f6 	bl	8002cec <HAL_UART_Init>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006906:	f7fe f940 	bl	8004b8a <Error_Handler>
  }

}
 800690a:	bf00      	nop
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20000864 	.word	0x20000864
 8006914:	40004400 	.word	0x40004400

08006918 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006920:	f107 0310 	add.w	r3, r7, #16
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	609a      	str	r2, [r3, #8]
 800692c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a1b      	ldr	r2, [pc, #108]	; (80069a0 <HAL_UART_MspInit+0x88>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d12f      	bne.n	8006998 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006938:	4b1a      	ldr	r3, [pc, #104]	; (80069a4 <HAL_UART_MspInit+0x8c>)
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	4a19      	ldr	r2, [pc, #100]	; (80069a4 <HAL_UART_MspInit+0x8c>)
 800693e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006942:	61d3      	str	r3, [r2, #28]
 8006944:	4b17      	ldr	r3, [pc, #92]	; (80069a4 <HAL_UART_MspInit+0x8c>)
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006950:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <HAL_UART_MspInit+0x8c>)
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	4a13      	ldr	r2, [pc, #76]	; (80069a4 <HAL_UART_MspInit+0x8c>)
 8006956:	f043 0304 	orr.w	r3, r3, #4
 800695a:	6193      	str	r3, [r2, #24]
 800695c:	4b11      	ldr	r3, [pc, #68]	; (80069a4 <HAL_UART_MspInit+0x8c>)
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006968:	2304      	movs	r3, #4
 800696a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800696c:	2302      	movs	r3, #2
 800696e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006970:	2303      	movs	r3, #3
 8006972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006974:	f107 0310 	add.w	r3, r7, #16
 8006978:	4619      	mov	r1, r3
 800697a:	480b      	ldr	r0, [pc, #44]	; (80069a8 <HAL_UART_MspInit+0x90>)
 800697c:	f7fa ff40 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006980:	2308      	movs	r3, #8
 8006982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006988:	2300      	movs	r3, #0
 800698a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800698c:	f107 0310 	add.w	r3, r7, #16
 8006990:	4619      	mov	r1, r3
 8006992:	4805      	ldr	r0, [pc, #20]	; (80069a8 <HAL_UART_MspInit+0x90>)
 8006994:	f7fa ff34 	bl	8001800 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006998:	bf00      	nop
 800699a:	3720      	adds	r7, #32
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40004400 	.word	0x40004400
 80069a4:	40021000 	.word	0x40021000
 80069a8:	40010800 	.word	0x40010800

080069ac <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 80069b0:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <MX_USB_PCD_Init+0x3c>)
 80069b2:	4a0e      	ldr	r2, [pc, #56]	; (80069ec <MX_USB_PCD_Init+0x40>)
 80069b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80069b6:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <MX_USB_PCD_Init+0x3c>)
 80069b8:	2208      	movs	r2, #8
 80069ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80069bc:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <MX_USB_PCD_Init+0x3c>)
 80069be:	2202      	movs	r2, #2
 80069c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80069c2:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <MX_USB_PCD_Init+0x3c>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80069c8:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <MX_USB_PCD_Init+0x3c>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80069ce:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <MX_USB_PCD_Init+0x3c>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80069d4:	4804      	ldr	r0, [pc, #16]	; (80069e8 <MX_USB_PCD_Init+0x3c>)
 80069d6:	f7fb f8a7 	bl	8001b28 <HAL_PCD_Init>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80069e0:	f7fe f8d3 	bl	8004b8a <Error_Handler>
  }

}
 80069e4:	bf00      	nop
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	200008a4 	.word	0x200008a4
 80069ec:	40005c00 	.word	0x40005c00

080069f0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <HAL_PCD_MspInit+0x34>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d10b      	bne.n	8006a1a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006a02:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <HAL_PCD_MspInit+0x38>)
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	4a08      	ldr	r2, [pc, #32]	; (8006a28 <HAL_PCD_MspInit+0x38>)
 8006a08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a0c:	61d3      	str	r3, [r2, #28]
 8006a0e:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <HAL_PCD_MspInit+0x38>)
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006a1a:	bf00      	nop
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr
 8006a24:	40005c00 	.word	0x40005c00
 8006a28:	40021000 	.word	0x40021000

08006a2c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	4603      	mov	r3, r0
 8006a34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006a36:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <USER_initialize+0x20>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006a3c:	4b03      	ldr	r3, [pc, #12]	; (8006a4c <USER_initialize+0x20>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr
 8006a4c:	2000000c 	.word	0x2000000c

08006a50 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006a5a:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <USER_status+0x20>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006a60:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <USER_status+0x20>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr
 8006a70:	2000000c 	.word	0x2000000c

08006a74 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	4603      	mov	r3, r0
 8006a82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006a84:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006aa0:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr

08006aac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	603a      	str	r2, [r7, #0]
 8006ab6:	71fb      	strb	r3, [r7, #7]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	73fb      	strb	r3, [r7, #15]
    return res;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006acc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006ace:	e003      	b.n	8006ad8 <LoopCopyDataInit>

08006ad0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006ad2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006ad4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006ad6:	3104      	adds	r1, #4

08006ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006ad8:	480a      	ldr	r0, [pc, #40]	; (8006b04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006ada:	4b0b      	ldr	r3, [pc, #44]	; (8006b08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006adc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006ade:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006ae0:	d3f6      	bcc.n	8006ad0 <CopyDataInit>
  ldr r2, =_sbss
 8006ae2:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006ae4:	e002      	b.n	8006aec <LoopFillZerobss>

08006ae6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006ae6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006ae8:	f842 3b04 	str.w	r3, [r2], #4

08006aec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006aec:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006aee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006af0:	d3f9      	bcc.n	8006ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006af2:	f7fe feef 	bl	80058d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006af6:	f000 f815 	bl	8006b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006afa:	f7fd fdcd 	bl	8004698 <main>
  bx lr
 8006afe:	4770      	bx	lr
  ldr r3, =_sidata
 8006b00:	08008360 	.word	0x08008360
  ldr r0, =_sdata
 8006b04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006b08:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 8006b0c:	2000008c 	.word	0x2000008c
  ldr r3, = _ebss
 8006b10:	20000b10 	.word	0x20000b10

08006b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006b14:	e7fe      	b.n	8006b14 <ADC1_2_IRQHandler>
	...

08006b18 <__errno>:
 8006b18:	4b01      	ldr	r3, [pc, #4]	; (8006b20 <__errno+0x8>)
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20000024 	.word	0x20000024

08006b24 <__libc_init_array>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	2500      	movs	r5, #0
 8006b28:	4e0c      	ldr	r6, [pc, #48]	; (8006b5c <__libc_init_array+0x38>)
 8006b2a:	4c0d      	ldr	r4, [pc, #52]	; (8006b60 <__libc_init_array+0x3c>)
 8006b2c:	1ba4      	subs	r4, r4, r6
 8006b2e:	10a4      	asrs	r4, r4, #2
 8006b30:	42a5      	cmp	r5, r4
 8006b32:	d109      	bne.n	8006b48 <__libc_init_array+0x24>
 8006b34:	f001 fad4 	bl	80080e0 <_init>
 8006b38:	2500      	movs	r5, #0
 8006b3a:	4e0a      	ldr	r6, [pc, #40]	; (8006b64 <__libc_init_array+0x40>)
 8006b3c:	4c0a      	ldr	r4, [pc, #40]	; (8006b68 <__libc_init_array+0x44>)
 8006b3e:	1ba4      	subs	r4, r4, r6
 8006b40:	10a4      	asrs	r4, r4, #2
 8006b42:	42a5      	cmp	r5, r4
 8006b44:	d105      	bne.n	8006b52 <__libc_init_array+0x2e>
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b4c:	4798      	blx	r3
 8006b4e:	3501      	adds	r5, #1
 8006b50:	e7ee      	b.n	8006b30 <__libc_init_array+0xc>
 8006b52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b56:	4798      	blx	r3
 8006b58:	3501      	adds	r5, #1
 8006b5a:	e7f2      	b.n	8006b42 <__libc_init_array+0x1e>
 8006b5c:	08008358 	.word	0x08008358
 8006b60:	08008358 	.word	0x08008358
 8006b64:	08008358 	.word	0x08008358
 8006b68:	0800835c 	.word	0x0800835c

08006b6c <memset>:
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	4402      	add	r2, r0
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d100      	bne.n	8006b76 <memset+0xa>
 8006b74:	4770      	bx	lr
 8006b76:	f803 1b01 	strb.w	r1, [r3], #1
 8006b7a:	e7f9      	b.n	8006b70 <memset+0x4>
 8006b7c:	0000      	movs	r0, r0
	...

08006b80 <atan>:
 8006b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	4bb6      	ldr	r3, [pc, #728]	; (8006e60 <atan+0x2e0>)
 8006b86:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006b8a:	429e      	cmp	r6, r3
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	460d      	mov	r5, r1
 8006b90:	468b      	mov	fp, r1
 8006b92:	dd17      	ble.n	8006bc4 <atan+0x44>
 8006b94:	4bb3      	ldr	r3, [pc, #716]	; (8006e64 <atan+0x2e4>)
 8006b96:	429e      	cmp	r6, r3
 8006b98:	dc01      	bgt.n	8006b9e <atan+0x1e>
 8006b9a:	d109      	bne.n	8006bb0 <atan+0x30>
 8006b9c:	b140      	cbz	r0, 8006bb0 <atan+0x30>
 8006b9e:	4622      	mov	r2, r4
 8006ba0:	462b      	mov	r3, r5
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	f7f9 fad9 	bl	800015c <__adddf3>
 8006baa:	4604      	mov	r4, r0
 8006bac:	460d      	mov	r5, r1
 8006bae:	e005      	b.n	8006bbc <atan+0x3c>
 8006bb0:	f1bb 0f00 	cmp.w	fp, #0
 8006bb4:	4cac      	ldr	r4, [pc, #688]	; (8006e68 <atan+0x2e8>)
 8006bb6:	f340 8121 	ble.w	8006dfc <atan+0x27c>
 8006bba:	4dac      	ldr	r5, [pc, #688]	; (8006e6c <atan+0x2ec>)
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc4:	4baa      	ldr	r3, [pc, #680]	; (8006e70 <atan+0x2f0>)
 8006bc6:	429e      	cmp	r6, r3
 8006bc8:	dc11      	bgt.n	8006bee <atan+0x6e>
 8006bca:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006bce:	429e      	cmp	r6, r3
 8006bd0:	dc0a      	bgt.n	8006be8 <atan+0x68>
 8006bd2:	a38b      	add	r3, pc, #556	; (adr r3, 8006e00 <atan+0x280>)
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	f7f9 fac0 	bl	800015c <__adddf3>
 8006bdc:	2200      	movs	r2, #0
 8006bde:	4ba5      	ldr	r3, [pc, #660]	; (8006e74 <atan+0x2f4>)
 8006be0:	f7f9 ff02 	bl	80009e8 <__aeabi_dcmpgt>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d1e9      	bne.n	8006bbc <atan+0x3c>
 8006be8:	f04f 3aff 	mov.w	sl, #4294967295
 8006bec:	e027      	b.n	8006c3e <atan+0xbe>
 8006bee:	f000 f987 	bl	8006f00 <fabs>
 8006bf2:	4ba1      	ldr	r3, [pc, #644]	; (8006e78 <atan+0x2f8>)
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	429e      	cmp	r6, r3
 8006bf8:	460d      	mov	r5, r1
 8006bfa:	f300 80b8 	bgt.w	8006d6e <atan+0x1ee>
 8006bfe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006c02:	429e      	cmp	r6, r3
 8006c04:	f300 809c 	bgt.w	8006d40 <atan+0x1c0>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	f7f9 faa6 	bl	800015c <__adddf3>
 8006c10:	2200      	movs	r2, #0
 8006c12:	4b98      	ldr	r3, [pc, #608]	; (8006e74 <atan+0x2f4>)
 8006c14:	f7f9 faa0 	bl	8000158 <__aeabi_dsub>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	460f      	mov	r7, r1
 8006c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c22:	4620      	mov	r0, r4
 8006c24:	4629      	mov	r1, r5
 8006c26:	f7f9 fa99 	bl	800015c <__adddf3>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4630      	mov	r0, r6
 8006c30:	4639      	mov	r1, r7
 8006c32:	f7f9 fd73 	bl	800071c <__aeabi_ddiv>
 8006c36:	f04f 0a00 	mov.w	sl, #0
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	460d      	mov	r5, r1
 8006c3e:	4622      	mov	r2, r4
 8006c40:	462b      	mov	r3, r5
 8006c42:	4620      	mov	r0, r4
 8006c44:	4629      	mov	r1, r5
 8006c46:	f7f9 fc3f 	bl	80004c8 <__aeabi_dmul>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4680      	mov	r8, r0
 8006c50:	4689      	mov	r9, r1
 8006c52:	f7f9 fc39 	bl	80004c8 <__aeabi_dmul>
 8006c56:	a36c      	add	r3, pc, #432	; (adr r3, 8006e08 <atan+0x288>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	460f      	mov	r7, r1
 8006c60:	f7f9 fc32 	bl	80004c8 <__aeabi_dmul>
 8006c64:	a36a      	add	r3, pc, #424	; (adr r3, 8006e10 <atan+0x290>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	f7f9 fa77 	bl	800015c <__adddf3>
 8006c6e:	4632      	mov	r2, r6
 8006c70:	463b      	mov	r3, r7
 8006c72:	f7f9 fc29 	bl	80004c8 <__aeabi_dmul>
 8006c76:	a368      	add	r3, pc, #416	; (adr r3, 8006e18 <atan+0x298>)
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	f7f9 fa6e 	bl	800015c <__adddf3>
 8006c80:	4632      	mov	r2, r6
 8006c82:	463b      	mov	r3, r7
 8006c84:	f7f9 fc20 	bl	80004c8 <__aeabi_dmul>
 8006c88:	a365      	add	r3, pc, #404	; (adr r3, 8006e20 <atan+0x2a0>)
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	f7f9 fa65 	bl	800015c <__adddf3>
 8006c92:	4632      	mov	r2, r6
 8006c94:	463b      	mov	r3, r7
 8006c96:	f7f9 fc17 	bl	80004c8 <__aeabi_dmul>
 8006c9a:	a363      	add	r3, pc, #396	; (adr r3, 8006e28 <atan+0x2a8>)
 8006c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca0:	f7f9 fa5c 	bl	800015c <__adddf3>
 8006ca4:	4632      	mov	r2, r6
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	f7f9 fc0e 	bl	80004c8 <__aeabi_dmul>
 8006cac:	a360      	add	r3, pc, #384	; (adr r3, 8006e30 <atan+0x2b0>)
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	f7f9 fa53 	bl	800015c <__adddf3>
 8006cb6:	4642      	mov	r2, r8
 8006cb8:	464b      	mov	r3, r9
 8006cba:	f7f9 fc05 	bl	80004c8 <__aeabi_dmul>
 8006cbe:	a35e      	add	r3, pc, #376	; (adr r3, 8006e38 <atan+0x2b8>)
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	4689      	mov	r9, r1
 8006cc8:	4630      	mov	r0, r6
 8006cca:	4639      	mov	r1, r7
 8006ccc:	f7f9 fbfc 	bl	80004c8 <__aeabi_dmul>
 8006cd0:	a35b      	add	r3, pc, #364	; (adr r3, 8006e40 <atan+0x2c0>)
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	f7f9 fa3f 	bl	8000158 <__aeabi_dsub>
 8006cda:	4632      	mov	r2, r6
 8006cdc:	463b      	mov	r3, r7
 8006cde:	f7f9 fbf3 	bl	80004c8 <__aeabi_dmul>
 8006ce2:	a359      	add	r3, pc, #356	; (adr r3, 8006e48 <atan+0x2c8>)
 8006ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce8:	f7f9 fa36 	bl	8000158 <__aeabi_dsub>
 8006cec:	4632      	mov	r2, r6
 8006cee:	463b      	mov	r3, r7
 8006cf0:	f7f9 fbea 	bl	80004c8 <__aeabi_dmul>
 8006cf4:	a356      	add	r3, pc, #344	; (adr r3, 8006e50 <atan+0x2d0>)
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	f7f9 fa2d 	bl	8000158 <__aeabi_dsub>
 8006cfe:	4632      	mov	r2, r6
 8006d00:	463b      	mov	r3, r7
 8006d02:	f7f9 fbe1 	bl	80004c8 <__aeabi_dmul>
 8006d06:	a354      	add	r3, pc, #336	; (adr r3, 8006e58 <atan+0x2d8>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f7f9 fa24 	bl	8000158 <__aeabi_dsub>
 8006d10:	4632      	mov	r2, r6
 8006d12:	463b      	mov	r3, r7
 8006d14:	f7f9 fbd8 	bl	80004c8 <__aeabi_dmul>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4640      	mov	r0, r8
 8006d1e:	4649      	mov	r1, r9
 8006d20:	f7f9 fa1c 	bl	800015c <__adddf3>
 8006d24:	4622      	mov	r2, r4
 8006d26:	462b      	mov	r3, r5
 8006d28:	f7f9 fbce 	bl	80004c8 <__aeabi_dmul>
 8006d2c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	d144      	bne.n	8006dc0 <atan+0x240>
 8006d36:	4620      	mov	r0, r4
 8006d38:	4629      	mov	r1, r5
 8006d3a:	f7f9 fa0d 	bl	8000158 <__aeabi_dsub>
 8006d3e:	e734      	b.n	8006baa <atan+0x2a>
 8006d40:	2200      	movs	r2, #0
 8006d42:	4b4c      	ldr	r3, [pc, #304]	; (8006e74 <atan+0x2f4>)
 8006d44:	f7f9 fa08 	bl	8000158 <__aeabi_dsub>
 8006d48:	2200      	movs	r2, #0
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	460f      	mov	r7, r1
 8006d4e:	4b49      	ldr	r3, [pc, #292]	; (8006e74 <atan+0x2f4>)
 8006d50:	4620      	mov	r0, r4
 8006d52:	4629      	mov	r1, r5
 8006d54:	f7f9 fa02 	bl	800015c <__adddf3>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	4639      	mov	r1, r7
 8006d60:	f7f9 fcdc 	bl	800071c <__aeabi_ddiv>
 8006d64:	f04f 0a01 	mov.w	sl, #1
 8006d68:	4604      	mov	r4, r0
 8006d6a:	460d      	mov	r5, r1
 8006d6c:	e767      	b.n	8006c3e <atan+0xbe>
 8006d6e:	4b43      	ldr	r3, [pc, #268]	; (8006e7c <atan+0x2fc>)
 8006d70:	429e      	cmp	r6, r3
 8006d72:	dc1a      	bgt.n	8006daa <atan+0x22a>
 8006d74:	2200      	movs	r2, #0
 8006d76:	4b42      	ldr	r3, [pc, #264]	; (8006e80 <atan+0x300>)
 8006d78:	f7f9 f9ee 	bl	8000158 <__aeabi_dsub>
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4606      	mov	r6, r0
 8006d80:	460f      	mov	r7, r1
 8006d82:	4b3f      	ldr	r3, [pc, #252]	; (8006e80 <atan+0x300>)
 8006d84:	4620      	mov	r0, r4
 8006d86:	4629      	mov	r1, r5
 8006d88:	f7f9 fb9e 	bl	80004c8 <__aeabi_dmul>
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4b39      	ldr	r3, [pc, #228]	; (8006e74 <atan+0x2f4>)
 8006d90:	f7f9 f9e4 	bl	800015c <__adddf3>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4630      	mov	r0, r6
 8006d9a:	4639      	mov	r1, r7
 8006d9c:	f7f9 fcbe 	bl	800071c <__aeabi_ddiv>
 8006da0:	f04f 0a02 	mov.w	sl, #2
 8006da4:	4604      	mov	r4, r0
 8006da6:	460d      	mov	r5, r1
 8006da8:	e749      	b.n	8006c3e <atan+0xbe>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	2000      	movs	r0, #0
 8006db0:	4934      	ldr	r1, [pc, #208]	; (8006e84 <atan+0x304>)
 8006db2:	f7f9 fcb3 	bl	800071c <__aeabi_ddiv>
 8006db6:	f04f 0a03 	mov.w	sl, #3
 8006dba:	4604      	mov	r4, r0
 8006dbc:	460d      	mov	r5, r1
 8006dbe:	e73e      	b.n	8006c3e <atan+0xbe>
 8006dc0:	4b31      	ldr	r3, [pc, #196]	; (8006e88 <atan+0x308>)
 8006dc2:	4e32      	ldr	r6, [pc, #200]	; (8006e8c <atan+0x30c>)
 8006dc4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006dc8:	4456      	add	r6, sl
 8006dca:	449a      	add	sl, r3
 8006dcc:	e9da 2300 	ldrd	r2, r3, [sl]
 8006dd0:	f7f9 f9c2 	bl	8000158 <__aeabi_dsub>
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	462b      	mov	r3, r5
 8006dd8:	f7f9 f9be 	bl	8000158 <__aeabi_dsub>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006de4:	f7f9 f9b8 	bl	8000158 <__aeabi_dsub>
 8006de8:	f1bb 0f00 	cmp.w	fp, #0
 8006dec:	4604      	mov	r4, r0
 8006dee:	460d      	mov	r5, r1
 8006df0:	f6bf aee4 	bge.w	8006bbc <atan+0x3c>
 8006df4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006df8:	461d      	mov	r5, r3
 8006dfa:	e6df      	b.n	8006bbc <atan+0x3c>
 8006dfc:	4d24      	ldr	r5, [pc, #144]	; (8006e90 <atan+0x310>)
 8006dfe:	e6dd      	b.n	8006bbc <atan+0x3c>
 8006e00:	8800759c 	.word	0x8800759c
 8006e04:	7e37e43c 	.word	0x7e37e43c
 8006e08:	e322da11 	.word	0xe322da11
 8006e0c:	3f90ad3a 	.word	0x3f90ad3a
 8006e10:	24760deb 	.word	0x24760deb
 8006e14:	3fa97b4b 	.word	0x3fa97b4b
 8006e18:	a0d03d51 	.word	0xa0d03d51
 8006e1c:	3fb10d66 	.word	0x3fb10d66
 8006e20:	c54c206e 	.word	0xc54c206e
 8006e24:	3fb745cd 	.word	0x3fb745cd
 8006e28:	920083ff 	.word	0x920083ff
 8006e2c:	3fc24924 	.word	0x3fc24924
 8006e30:	5555550d 	.word	0x5555550d
 8006e34:	3fd55555 	.word	0x3fd55555
 8006e38:	2c6a6c2f 	.word	0x2c6a6c2f
 8006e3c:	bfa2b444 	.word	0xbfa2b444
 8006e40:	52defd9a 	.word	0x52defd9a
 8006e44:	3fadde2d 	.word	0x3fadde2d
 8006e48:	af749a6d 	.word	0xaf749a6d
 8006e4c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006e50:	fe231671 	.word	0xfe231671
 8006e54:	3fbc71c6 	.word	0x3fbc71c6
 8006e58:	9998ebc4 	.word	0x9998ebc4
 8006e5c:	3fc99999 	.word	0x3fc99999
 8006e60:	440fffff 	.word	0x440fffff
 8006e64:	7ff00000 	.word	0x7ff00000
 8006e68:	54442d18 	.word	0x54442d18
 8006e6c:	3ff921fb 	.word	0x3ff921fb
 8006e70:	3fdbffff 	.word	0x3fdbffff
 8006e74:	3ff00000 	.word	0x3ff00000
 8006e78:	3ff2ffff 	.word	0x3ff2ffff
 8006e7c:	40037fff 	.word	0x40037fff
 8006e80:	3ff80000 	.word	0x3ff80000
 8006e84:	bff00000 	.word	0xbff00000
 8006e88:	08008158 	.word	0x08008158
 8006e8c:	08008138 	.word	0x08008138
 8006e90:	bff921fb 	.word	0xbff921fb

08006e94 <cos>:
 8006e94:	b530      	push	{r4, r5, lr}
 8006e96:	4a18      	ldr	r2, [pc, #96]	; (8006ef8 <cos+0x64>)
 8006e98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	dc04      	bgt.n	8006eac <cos+0x18>
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f000 fb5b 	bl	8007560 <__kernel_cos>
 8006eaa:	e006      	b.n	8006eba <cos+0x26>
 8006eac:	4a13      	ldr	r2, [pc, #76]	; (8006efc <cos+0x68>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	dd05      	ble.n	8006ebe <cos+0x2a>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	f7f9 f94f 	bl	8000158 <__aeabi_dsub>
 8006eba:	b007      	add	sp, #28
 8006ebc:	bd30      	pop	{r4, r5, pc}
 8006ebe:	aa02      	add	r2, sp, #8
 8006ec0:	f000 f8b2 	bl	8007028 <__ieee754_rem_pio2>
 8006ec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ec8:	f000 0403 	and.w	r4, r0, #3
 8006ecc:	2c01      	cmp	r4, #1
 8006ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ed2:	d008      	beq.n	8006ee6 <cos+0x52>
 8006ed4:	2c02      	cmp	r4, #2
 8006ed6:	d00c      	beq.n	8006ef2 <cos+0x5e>
 8006ed8:	2c00      	cmp	r4, #0
 8006eda:	d0e4      	beq.n	8006ea6 <cos+0x12>
 8006edc:	2401      	movs	r4, #1
 8006ede:	9400      	str	r4, [sp, #0]
 8006ee0:	f000 ff46 	bl	8007d70 <__kernel_sin>
 8006ee4:	e7e9      	b.n	8006eba <cos+0x26>
 8006ee6:	9400      	str	r4, [sp, #0]
 8006ee8:	f000 ff42 	bl	8007d70 <__kernel_sin>
 8006eec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006ef0:	e7e3      	b.n	8006eba <cos+0x26>
 8006ef2:	f000 fb35 	bl	8007560 <__kernel_cos>
 8006ef6:	e7f9      	b.n	8006eec <cos+0x58>
 8006ef8:	3fe921fb 	.word	0x3fe921fb
 8006efc:	7fefffff 	.word	0x7fefffff

08006f00 <fabs>:
 8006f00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f04:	4619      	mov	r1, r3
 8006f06:	4770      	bx	lr

08006f08 <sin>:
 8006f08:	b530      	push	{r4, r5, lr}
 8006f0a:	4a1a      	ldr	r2, [pc, #104]	; (8006f74 <sin+0x6c>)
 8006f0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f10:	4293      	cmp	r3, r2
 8006f12:	b087      	sub	sp, #28
 8006f14:	dc06      	bgt.n	8006f24 <sin+0x1c>
 8006f16:	2300      	movs	r3, #0
 8006f18:	2200      	movs	r2, #0
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f000 ff27 	bl	8007d70 <__kernel_sin>
 8006f22:	e006      	b.n	8006f32 <sin+0x2a>
 8006f24:	4a14      	ldr	r2, [pc, #80]	; (8006f78 <sin+0x70>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	dd05      	ble.n	8006f36 <sin+0x2e>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	f7f9 f913 	bl	8000158 <__aeabi_dsub>
 8006f32:	b007      	add	sp, #28
 8006f34:	bd30      	pop	{r4, r5, pc}
 8006f36:	aa02      	add	r2, sp, #8
 8006f38:	f000 f876 	bl	8007028 <__ieee754_rem_pio2>
 8006f3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f40:	f000 0403 	and.w	r4, r0, #3
 8006f44:	2c01      	cmp	r4, #1
 8006f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f4a:	d005      	beq.n	8006f58 <sin+0x50>
 8006f4c:	2c02      	cmp	r4, #2
 8006f4e:	d006      	beq.n	8006f5e <sin+0x56>
 8006f50:	b964      	cbnz	r4, 8006f6c <sin+0x64>
 8006f52:	2401      	movs	r4, #1
 8006f54:	9400      	str	r4, [sp, #0]
 8006f56:	e7e2      	b.n	8006f1e <sin+0x16>
 8006f58:	f000 fb02 	bl	8007560 <__kernel_cos>
 8006f5c:	e7e9      	b.n	8006f32 <sin+0x2a>
 8006f5e:	2401      	movs	r4, #1
 8006f60:	9400      	str	r4, [sp, #0]
 8006f62:	f000 ff05 	bl	8007d70 <__kernel_sin>
 8006f66:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006f6a:	e7e2      	b.n	8006f32 <sin+0x2a>
 8006f6c:	f000 faf8 	bl	8007560 <__kernel_cos>
 8006f70:	e7f9      	b.n	8006f66 <sin+0x5e>
 8006f72:	bf00      	nop
 8006f74:	3fe921fb 	.word	0x3fe921fb
 8006f78:	7fefffff 	.word	0x7fefffff

08006f7c <sqrt>:
 8006f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f80:	b08b      	sub	sp, #44	; 0x2c
 8006f82:	4604      	mov	r4, r0
 8006f84:	460d      	mov	r5, r1
 8006f86:	f000 fa3f 	bl	8007408 <__ieee754_sqrt>
 8006f8a:	4b24      	ldr	r3, [pc, #144]	; (800701c <sqrt+0xa0>)
 8006f8c:	4680      	mov	r8, r0
 8006f8e:	f993 a000 	ldrsb.w	sl, [r3]
 8006f92:	4689      	mov	r9, r1
 8006f94:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006f98:	d02b      	beq.n	8006ff2 <sqrt+0x76>
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	f7f9 fd2b 	bl	80009fc <__aeabi_dcmpun>
 8006fa6:	4683      	mov	fp, r0
 8006fa8:	bb18      	cbnz	r0, 8006ff2 <sqrt+0x76>
 8006faa:	2600      	movs	r6, #0
 8006fac:	2700      	movs	r7, #0
 8006fae:	4632      	mov	r2, r6
 8006fb0:	463b      	mov	r3, r7
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	f7f9 fcf9 	bl	80009ac <__aeabi_dcmplt>
 8006fba:	b1d0      	cbz	r0, 8006ff2 <sqrt+0x76>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	4b17      	ldr	r3, [pc, #92]	; (8007020 <sqrt+0xa4>)
 8006fc2:	f8cd b020 	str.w	fp, [sp, #32]
 8006fc6:	9301      	str	r3, [sp, #4]
 8006fc8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006fcc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006fd0:	f1ba 0f00 	cmp.w	sl, #0
 8006fd4:	d112      	bne.n	8006ffc <sqrt+0x80>
 8006fd6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006fda:	4668      	mov	r0, sp
 8006fdc:	f001 f804 	bl	8007fe8 <matherr>
 8006fe0:	b1b8      	cbz	r0, 8007012 <sqrt+0x96>
 8006fe2:	9b08      	ldr	r3, [sp, #32]
 8006fe4:	b11b      	cbz	r3, 8006fee <sqrt+0x72>
 8006fe6:	f7ff fd97 	bl	8006b18 <__errno>
 8006fea:	9b08      	ldr	r3, [sp, #32]
 8006fec:	6003      	str	r3, [r0, #0]
 8006fee:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	b00b      	add	sp, #44	; 0x2c
 8006ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	463b      	mov	r3, r7
 8007000:	4630      	mov	r0, r6
 8007002:	4639      	mov	r1, r7
 8007004:	f7f9 fb8a 	bl	800071c <__aeabi_ddiv>
 8007008:	f1ba 0f02 	cmp.w	sl, #2
 800700c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007010:	d1e3      	bne.n	8006fda <sqrt+0x5e>
 8007012:	f7ff fd81 	bl	8006b18 <__errno>
 8007016:	2321      	movs	r3, #33	; 0x21
 8007018:	6003      	str	r3, [r0, #0]
 800701a:	e7e2      	b.n	8006fe2 <sqrt+0x66>
 800701c:	20000088 	.word	0x20000088
 8007020:	08008178 	.word	0x08008178
 8007024:	00000000 	.word	0x00000000

08007028 <__ieee754_rem_pio2>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	4614      	mov	r4, r2
 800702e:	4ac2      	ldr	r2, [pc, #776]	; (8007338 <__ieee754_rem_pio2+0x310>)
 8007030:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8007034:	4592      	cmp	sl, r2
 8007036:	b08d      	sub	sp, #52	; 0x34
 8007038:	468b      	mov	fp, r1
 800703a:	dc07      	bgt.n	800704c <__ieee754_rem_pio2+0x24>
 800703c:	2200      	movs	r2, #0
 800703e:	2300      	movs	r3, #0
 8007040:	e9c4 0100 	strd	r0, r1, [r4]
 8007044:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007048:	2500      	movs	r5, #0
 800704a:	e023      	b.n	8007094 <__ieee754_rem_pio2+0x6c>
 800704c:	4abb      	ldr	r2, [pc, #748]	; (800733c <__ieee754_rem_pio2+0x314>)
 800704e:	4592      	cmp	sl, r2
 8007050:	dc71      	bgt.n	8007136 <__ieee754_rem_pio2+0x10e>
 8007052:	a3ab      	add	r3, pc, #684	; (adr r3, 8007300 <__ieee754_rem_pio2+0x2d8>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	2900      	cmp	r1, #0
 800705a:	4db9      	ldr	r5, [pc, #740]	; (8007340 <__ieee754_rem_pio2+0x318>)
 800705c:	dd36      	ble.n	80070cc <__ieee754_rem_pio2+0xa4>
 800705e:	f7f9 f87b 	bl	8000158 <__aeabi_dsub>
 8007062:	45aa      	cmp	sl, r5
 8007064:	4606      	mov	r6, r0
 8007066:	460f      	mov	r7, r1
 8007068:	d018      	beq.n	800709c <__ieee754_rem_pio2+0x74>
 800706a:	a3a7      	add	r3, pc, #668	; (adr r3, 8007308 <__ieee754_rem_pio2+0x2e0>)
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f7f9 f872 	bl	8000158 <__aeabi_dsub>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4630      	mov	r0, r6
 800707a:	e9c4 2300 	strd	r2, r3, [r4]
 800707e:	4639      	mov	r1, r7
 8007080:	f7f9 f86a 	bl	8000158 <__aeabi_dsub>
 8007084:	a3a0      	add	r3, pc, #640	; (adr r3, 8007308 <__ieee754_rem_pio2+0x2e0>)
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f7f9 f865 	bl	8000158 <__aeabi_dsub>
 800708e:	2501      	movs	r5, #1
 8007090:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007094:	4628      	mov	r0, r5
 8007096:	b00d      	add	sp, #52	; 0x34
 8007098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709c:	a39c      	add	r3, pc, #624	; (adr r3, 8007310 <__ieee754_rem_pio2+0x2e8>)
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f7f9 f859 	bl	8000158 <__aeabi_dsub>
 80070a6:	a39c      	add	r3, pc, #624	; (adr r3, 8007318 <__ieee754_rem_pio2+0x2f0>)
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	4606      	mov	r6, r0
 80070ae:	460f      	mov	r7, r1
 80070b0:	f7f9 f852 	bl	8000158 <__aeabi_dsub>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4630      	mov	r0, r6
 80070ba:	e9c4 2300 	strd	r2, r3, [r4]
 80070be:	4639      	mov	r1, r7
 80070c0:	f7f9 f84a 	bl	8000158 <__aeabi_dsub>
 80070c4:	a394      	add	r3, pc, #592	; (adr r3, 8007318 <__ieee754_rem_pio2+0x2f0>)
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	e7de      	b.n	800708a <__ieee754_rem_pio2+0x62>
 80070cc:	f7f9 f846 	bl	800015c <__adddf3>
 80070d0:	45aa      	cmp	sl, r5
 80070d2:	4606      	mov	r6, r0
 80070d4:	460f      	mov	r7, r1
 80070d6:	d016      	beq.n	8007106 <__ieee754_rem_pio2+0xde>
 80070d8:	a38b      	add	r3, pc, #556	; (adr r3, 8007308 <__ieee754_rem_pio2+0x2e0>)
 80070da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070de:	f7f9 f83d 	bl	800015c <__adddf3>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4630      	mov	r0, r6
 80070e8:	e9c4 2300 	strd	r2, r3, [r4]
 80070ec:	4639      	mov	r1, r7
 80070ee:	f7f9 f833 	bl	8000158 <__aeabi_dsub>
 80070f2:	a385      	add	r3, pc, #532	; (adr r3, 8007308 <__ieee754_rem_pio2+0x2e0>)
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f7f9 f830 	bl	800015c <__adddf3>
 80070fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007100:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007104:	e7c6      	b.n	8007094 <__ieee754_rem_pio2+0x6c>
 8007106:	a382      	add	r3, pc, #520	; (adr r3, 8007310 <__ieee754_rem_pio2+0x2e8>)
 8007108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710c:	f7f9 f826 	bl	800015c <__adddf3>
 8007110:	a381      	add	r3, pc, #516	; (adr r3, 8007318 <__ieee754_rem_pio2+0x2f0>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	4606      	mov	r6, r0
 8007118:	460f      	mov	r7, r1
 800711a:	f7f9 f81f 	bl	800015c <__adddf3>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4630      	mov	r0, r6
 8007124:	e9c4 2300 	strd	r2, r3, [r4]
 8007128:	4639      	mov	r1, r7
 800712a:	f7f9 f815 	bl	8000158 <__aeabi_dsub>
 800712e:	a37a      	add	r3, pc, #488	; (adr r3, 8007318 <__ieee754_rem_pio2+0x2f0>)
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	e7e0      	b.n	80070f8 <__ieee754_rem_pio2+0xd0>
 8007136:	4a83      	ldr	r2, [pc, #524]	; (8007344 <__ieee754_rem_pio2+0x31c>)
 8007138:	4592      	cmp	sl, r2
 800713a:	f300 80d2 	bgt.w	80072e2 <__ieee754_rem_pio2+0x2ba>
 800713e:	f7ff fedf 	bl	8006f00 <fabs>
 8007142:	a377      	add	r3, pc, #476	; (adr r3, 8007320 <__ieee754_rem_pio2+0x2f8>)
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	4606      	mov	r6, r0
 800714a:	460f      	mov	r7, r1
 800714c:	f7f9 f9bc 	bl	80004c8 <__aeabi_dmul>
 8007150:	2200      	movs	r2, #0
 8007152:	4b7d      	ldr	r3, [pc, #500]	; (8007348 <__ieee754_rem_pio2+0x320>)
 8007154:	f7f9 f802 	bl	800015c <__adddf3>
 8007158:	f7f9 fc66 	bl	8000a28 <__aeabi_d2iz>
 800715c:	4605      	mov	r5, r0
 800715e:	f7f9 f949 	bl	80003f4 <__aeabi_i2d>
 8007162:	a367      	add	r3, pc, #412	; (adr r3, 8007300 <__ieee754_rem_pio2+0x2d8>)
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800716c:	f7f9 f9ac 	bl	80004c8 <__aeabi_dmul>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4630      	mov	r0, r6
 8007176:	4639      	mov	r1, r7
 8007178:	f7f8 ffee 	bl	8000158 <__aeabi_dsub>
 800717c:	a362      	add	r3, pc, #392	; (adr r3, 8007308 <__ieee754_rem_pio2+0x2e0>)
 800717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007182:	4606      	mov	r6, r0
 8007184:	460f      	mov	r7, r1
 8007186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800718a:	f7f9 f99d 	bl	80004c8 <__aeabi_dmul>
 800718e:	2d1f      	cmp	r5, #31
 8007190:	4680      	mov	r8, r0
 8007192:	4689      	mov	r9, r1
 8007194:	dc0e      	bgt.n	80071b4 <__ieee754_rem_pio2+0x18c>
 8007196:	4b6d      	ldr	r3, [pc, #436]	; (800734c <__ieee754_rem_pio2+0x324>)
 8007198:	1e6a      	subs	r2, r5, #1
 800719a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719e:	4553      	cmp	r3, sl
 80071a0:	d008      	beq.n	80071b4 <__ieee754_rem_pio2+0x18c>
 80071a2:	4642      	mov	r2, r8
 80071a4:	464b      	mov	r3, r9
 80071a6:	4630      	mov	r0, r6
 80071a8:	4639      	mov	r1, r7
 80071aa:	f7f8 ffd5 	bl	8000158 <__aeabi_dsub>
 80071ae:	e9c4 0100 	strd	r0, r1, [r4]
 80071b2:	e011      	b.n	80071d8 <__ieee754_rem_pio2+0x1b0>
 80071b4:	464b      	mov	r3, r9
 80071b6:	4642      	mov	r2, r8
 80071b8:	4630      	mov	r0, r6
 80071ba:	4639      	mov	r1, r7
 80071bc:	f7f8 ffcc 	bl	8000158 <__aeabi_dsub>
 80071c0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80071c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80071c8:	ebaa 0303 	sub.w	r3, sl, r3
 80071cc:	2b10      	cmp	r3, #16
 80071ce:	dc1f      	bgt.n	8007210 <__ieee754_rem_pio2+0x1e8>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	e9c4 2300 	strd	r2, r3, [r4]
 80071d8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80071dc:	4630      	mov	r0, r6
 80071de:	4653      	mov	r3, sl
 80071e0:	4639      	mov	r1, r7
 80071e2:	f7f8 ffb9 	bl	8000158 <__aeabi_dsub>
 80071e6:	4642      	mov	r2, r8
 80071e8:	464b      	mov	r3, r9
 80071ea:	f7f8 ffb5 	bl	8000158 <__aeabi_dsub>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	f1bb 0f00 	cmp.w	fp, #0
 80071f6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80071fa:	f6bf af4b 	bge.w	8007094 <__ieee754_rem_pio2+0x6c>
 80071fe:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8007202:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8007206:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800720a:	60e1      	str	r1, [r4, #12]
 800720c:	426d      	negs	r5, r5
 800720e:	e741      	b.n	8007094 <__ieee754_rem_pio2+0x6c>
 8007210:	a33f      	add	r3, pc, #252	; (adr r3, 8007310 <__ieee754_rem_pio2+0x2e8>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800721a:	f7f9 f955 	bl	80004c8 <__aeabi_dmul>
 800721e:	4680      	mov	r8, r0
 8007220:	4689      	mov	r9, r1
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4630      	mov	r0, r6
 8007228:	4639      	mov	r1, r7
 800722a:	f7f8 ff95 	bl	8000158 <__aeabi_dsub>
 800722e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4630      	mov	r0, r6
 8007238:	4639      	mov	r1, r7
 800723a:	f7f8 ff8d 	bl	8000158 <__aeabi_dsub>
 800723e:	4642      	mov	r2, r8
 8007240:	464b      	mov	r3, r9
 8007242:	f7f8 ff89 	bl	8000158 <__aeabi_dsub>
 8007246:	a334      	add	r3, pc, #208	; (adr r3, 8007318 <__ieee754_rem_pio2+0x2f0>)
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	4606      	mov	r6, r0
 800724e:	460f      	mov	r7, r1
 8007250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007254:	f7f9 f938 	bl	80004c8 <__aeabi_dmul>
 8007258:	4632      	mov	r2, r6
 800725a:	463b      	mov	r3, r7
 800725c:	f7f8 ff7c 	bl	8000158 <__aeabi_dsub>
 8007260:	460b      	mov	r3, r1
 8007262:	4602      	mov	r2, r0
 8007264:	4680      	mov	r8, r0
 8007266:	4689      	mov	r9, r1
 8007268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800726c:	f7f8 ff74 	bl	8000158 <__aeabi_dsub>
 8007270:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007274:	ebaa 0a03 	sub.w	sl, sl, r3
 8007278:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800727c:	dc06      	bgt.n	800728c <__ieee754_rem_pio2+0x264>
 800727e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	e9c4 2300 	strd	r2, r3, [r4]
 800728a:	e7a5      	b.n	80071d8 <__ieee754_rem_pio2+0x1b0>
 800728c:	a326      	add	r3, pc, #152	; (adr r3, 8007328 <__ieee754_rem_pio2+0x300>)
 800728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007296:	f7f9 f917 	bl	80004c8 <__aeabi_dmul>
 800729a:	4680      	mov	r8, r0
 800729c:	4689      	mov	r9, r1
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072a6:	f7f8 ff57 	bl	8000158 <__aeabi_dsub>
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4606      	mov	r6, r0
 80072b0:	460f      	mov	r7, r1
 80072b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072b6:	f7f8 ff4f 	bl	8000158 <__aeabi_dsub>
 80072ba:	4642      	mov	r2, r8
 80072bc:	464b      	mov	r3, r9
 80072be:	f7f8 ff4b 	bl	8000158 <__aeabi_dsub>
 80072c2:	a31b      	add	r3, pc, #108	; (adr r3, 8007330 <__ieee754_rem_pio2+0x308>)
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	4680      	mov	r8, r0
 80072ca:	4689      	mov	r9, r1
 80072cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d0:	f7f9 f8fa 	bl	80004c8 <__aeabi_dmul>
 80072d4:	4642      	mov	r2, r8
 80072d6:	464b      	mov	r3, r9
 80072d8:	f7f8 ff3e 	bl	8000158 <__aeabi_dsub>
 80072dc:	4680      	mov	r8, r0
 80072de:	4689      	mov	r9, r1
 80072e0:	e75f      	b.n	80071a2 <__ieee754_rem_pio2+0x17a>
 80072e2:	4a1b      	ldr	r2, [pc, #108]	; (8007350 <__ieee754_rem_pio2+0x328>)
 80072e4:	4592      	cmp	sl, r2
 80072e6:	dd35      	ble.n	8007354 <__ieee754_rem_pio2+0x32c>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	f7f8 ff34 	bl	8000158 <__aeabi_dsub>
 80072f0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80072f4:	e9c4 0100 	strd	r0, r1, [r4]
 80072f8:	e6a6      	b.n	8007048 <__ieee754_rem_pio2+0x20>
 80072fa:	bf00      	nop
 80072fc:	f3af 8000 	nop.w
 8007300:	54400000 	.word	0x54400000
 8007304:	3ff921fb 	.word	0x3ff921fb
 8007308:	1a626331 	.word	0x1a626331
 800730c:	3dd0b461 	.word	0x3dd0b461
 8007310:	1a600000 	.word	0x1a600000
 8007314:	3dd0b461 	.word	0x3dd0b461
 8007318:	2e037073 	.word	0x2e037073
 800731c:	3ba3198a 	.word	0x3ba3198a
 8007320:	6dc9c883 	.word	0x6dc9c883
 8007324:	3fe45f30 	.word	0x3fe45f30
 8007328:	2e000000 	.word	0x2e000000
 800732c:	3ba3198a 	.word	0x3ba3198a
 8007330:	252049c1 	.word	0x252049c1
 8007334:	397b839a 	.word	0x397b839a
 8007338:	3fe921fb 	.word	0x3fe921fb
 800733c:	4002d97b 	.word	0x4002d97b
 8007340:	3ff921fb 	.word	0x3ff921fb
 8007344:	413921fb 	.word	0x413921fb
 8007348:	3fe00000 	.word	0x3fe00000
 800734c:	08008180 	.word	0x08008180
 8007350:	7fefffff 	.word	0x7fefffff
 8007354:	ea4f 552a 	mov.w	r5, sl, asr #20
 8007358:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800735c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8007360:	460f      	mov	r7, r1
 8007362:	4606      	mov	r6, r0
 8007364:	f7f9 fb60 	bl	8000a28 <__aeabi_d2iz>
 8007368:	f7f9 f844 	bl	80003f4 <__aeabi_i2d>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4630      	mov	r0, r6
 8007372:	4639      	mov	r1, r7
 8007374:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007378:	f7f8 feee 	bl	8000158 <__aeabi_dsub>
 800737c:	2200      	movs	r2, #0
 800737e:	4b20      	ldr	r3, [pc, #128]	; (8007400 <__ieee754_rem_pio2+0x3d8>)
 8007380:	f7f9 f8a2 	bl	80004c8 <__aeabi_dmul>
 8007384:	460f      	mov	r7, r1
 8007386:	4606      	mov	r6, r0
 8007388:	f7f9 fb4e 	bl	8000a28 <__aeabi_d2iz>
 800738c:	f7f9 f832 	bl	80003f4 <__aeabi_i2d>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4630      	mov	r0, r6
 8007396:	4639      	mov	r1, r7
 8007398:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800739c:	f7f8 fedc 	bl	8000158 <__aeabi_dsub>
 80073a0:	2200      	movs	r2, #0
 80073a2:	4b17      	ldr	r3, [pc, #92]	; (8007400 <__ieee754_rem_pio2+0x3d8>)
 80073a4:	f7f9 f890 	bl	80004c8 <__aeabi_dmul>
 80073a8:	f04f 0803 	mov.w	r8, #3
 80073ac:	2600      	movs	r6, #0
 80073ae:	2700      	movs	r7, #0
 80073b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80073b4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80073b8:	4632      	mov	r2, r6
 80073ba:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80073be:	463b      	mov	r3, r7
 80073c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80073c4:	f7f9 fae8 	bl	8000998 <__aeabi_dcmpeq>
 80073c8:	b9b8      	cbnz	r0, 80073fa <__ieee754_rem_pio2+0x3d2>
 80073ca:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <__ieee754_rem_pio2+0x3dc>)
 80073cc:	462a      	mov	r2, r5
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	2302      	movs	r3, #2
 80073d2:	4621      	mov	r1, r4
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	a806      	add	r0, sp, #24
 80073d8:	4643      	mov	r3, r8
 80073da:	f000 f97f 	bl	80076dc <__kernel_rem_pio2>
 80073de:	f1bb 0f00 	cmp.w	fp, #0
 80073e2:	4605      	mov	r5, r0
 80073e4:	f6bf ae56 	bge.w	8007094 <__ieee754_rem_pio2+0x6c>
 80073e8:	6863      	ldr	r3, [r4, #4]
 80073ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80073ee:	6063      	str	r3, [r4, #4]
 80073f0:	68e3      	ldr	r3, [r4, #12]
 80073f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80073f6:	60e3      	str	r3, [r4, #12]
 80073f8:	e708      	b.n	800720c <__ieee754_rem_pio2+0x1e4>
 80073fa:	46d0      	mov	r8, sl
 80073fc:	e7dc      	b.n	80073b8 <__ieee754_rem_pio2+0x390>
 80073fe:	bf00      	nop
 8007400:	41700000 	.word	0x41700000
 8007404:	08008200 	.word	0x08008200

08007408 <__ieee754_sqrt>:
 8007408:	4b54      	ldr	r3, [pc, #336]	; (800755c <__ieee754_sqrt+0x154>)
 800740a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740e:	438b      	bics	r3, r1
 8007410:	4606      	mov	r6, r0
 8007412:	460d      	mov	r5, r1
 8007414:	460a      	mov	r2, r1
 8007416:	460c      	mov	r4, r1
 8007418:	d10f      	bne.n	800743a <__ieee754_sqrt+0x32>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	f7f9 f853 	bl	80004c8 <__aeabi_dmul>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4630      	mov	r0, r6
 8007428:	4629      	mov	r1, r5
 800742a:	f7f8 fe97 	bl	800015c <__adddf3>
 800742e:	4606      	mov	r6, r0
 8007430:	460d      	mov	r5, r1
 8007432:	4630      	mov	r0, r6
 8007434:	4629      	mov	r1, r5
 8007436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800743a:	2900      	cmp	r1, #0
 800743c:	4607      	mov	r7, r0
 800743e:	4603      	mov	r3, r0
 8007440:	dc0e      	bgt.n	8007460 <__ieee754_sqrt+0x58>
 8007442:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007446:	ea5c 0707 	orrs.w	r7, ip, r7
 800744a:	d0f2      	beq.n	8007432 <__ieee754_sqrt+0x2a>
 800744c:	b141      	cbz	r1, 8007460 <__ieee754_sqrt+0x58>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	f7f8 fe81 	bl	8000158 <__aeabi_dsub>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	f7f9 f95f 	bl	800071c <__aeabi_ddiv>
 800745e:	e7e6      	b.n	800742e <__ieee754_sqrt+0x26>
 8007460:	1512      	asrs	r2, r2, #20
 8007462:	d074      	beq.n	800754e <__ieee754_sqrt+0x146>
 8007464:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007468:	07d5      	lsls	r5, r2, #31
 800746a:	f04f 0500 	mov.w	r5, #0
 800746e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007472:	bf48      	it	mi
 8007474:	0fd9      	lsrmi	r1, r3, #31
 8007476:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800747a:	bf44      	itt	mi
 800747c:	005b      	lslmi	r3, r3, #1
 800747e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8007482:	1051      	asrs	r1, r2, #1
 8007484:	0fda      	lsrs	r2, r3, #31
 8007486:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800748a:	4628      	mov	r0, r5
 800748c:	2216      	movs	r2, #22
 800748e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	1987      	adds	r7, r0, r6
 8007496:	42a7      	cmp	r7, r4
 8007498:	bfde      	ittt	le
 800749a:	19b8      	addle	r0, r7, r6
 800749c:	1be4      	suble	r4, r4, r7
 800749e:	19ad      	addle	r5, r5, r6
 80074a0:	0fdf      	lsrs	r7, r3, #31
 80074a2:	3a01      	subs	r2, #1
 80074a4:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80074a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80074b0:	d1f0      	bne.n	8007494 <__ieee754_sqrt+0x8c>
 80074b2:	f04f 0c20 	mov.w	ip, #32
 80074b6:	4696      	mov	lr, r2
 80074b8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80074bc:	4284      	cmp	r4, r0
 80074be:	eb06 070e 	add.w	r7, r6, lr
 80074c2:	dc02      	bgt.n	80074ca <__ieee754_sqrt+0xc2>
 80074c4:	d112      	bne.n	80074ec <__ieee754_sqrt+0xe4>
 80074c6:	429f      	cmp	r7, r3
 80074c8:	d810      	bhi.n	80074ec <__ieee754_sqrt+0xe4>
 80074ca:	2f00      	cmp	r7, #0
 80074cc:	eb07 0e06 	add.w	lr, r7, r6
 80074d0:	da42      	bge.n	8007558 <__ieee754_sqrt+0x150>
 80074d2:	f1be 0f00 	cmp.w	lr, #0
 80074d6:	db3f      	blt.n	8007558 <__ieee754_sqrt+0x150>
 80074d8:	f100 0801 	add.w	r8, r0, #1
 80074dc:	1a24      	subs	r4, r4, r0
 80074de:	4640      	mov	r0, r8
 80074e0:	429f      	cmp	r7, r3
 80074e2:	bf88      	it	hi
 80074e4:	f104 34ff 	addhi.w	r4, r4, #4294967295
 80074e8:	1bdb      	subs	r3, r3, r7
 80074ea:	4432      	add	r2, r6
 80074ec:	0064      	lsls	r4, r4, #1
 80074ee:	f1bc 0c01 	subs.w	ip, ip, #1
 80074f2:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80074f6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80074fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074fe:	d1dd      	bne.n	80074bc <__ieee754_sqrt+0xb4>
 8007500:	4323      	orrs	r3, r4
 8007502:	d006      	beq.n	8007512 <__ieee754_sqrt+0x10a>
 8007504:	1c54      	adds	r4, r2, #1
 8007506:	bf0b      	itete	eq
 8007508:	4662      	moveq	r2, ip
 800750a:	3201      	addne	r2, #1
 800750c:	3501      	addeq	r5, #1
 800750e:	f022 0201 	bicne.w	r2, r2, #1
 8007512:	106b      	asrs	r3, r5, #1
 8007514:	0852      	lsrs	r2, r2, #1
 8007516:	07e8      	lsls	r0, r5, #31
 8007518:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800751c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007520:	bf48      	it	mi
 8007522:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007526:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800752a:	4616      	mov	r6, r2
 800752c:	e781      	b.n	8007432 <__ieee754_sqrt+0x2a>
 800752e:	0adc      	lsrs	r4, r3, #11
 8007530:	3915      	subs	r1, #21
 8007532:	055b      	lsls	r3, r3, #21
 8007534:	2c00      	cmp	r4, #0
 8007536:	d0fa      	beq.n	800752e <__ieee754_sqrt+0x126>
 8007538:	02e6      	lsls	r6, r4, #11
 800753a:	d50a      	bpl.n	8007552 <__ieee754_sqrt+0x14a>
 800753c:	f1c2 0020 	rsb	r0, r2, #32
 8007540:	fa23 f000 	lsr.w	r0, r3, r0
 8007544:	1e55      	subs	r5, r2, #1
 8007546:	4093      	lsls	r3, r2
 8007548:	4304      	orrs	r4, r0
 800754a:	1b4a      	subs	r2, r1, r5
 800754c:	e78a      	b.n	8007464 <__ieee754_sqrt+0x5c>
 800754e:	4611      	mov	r1, r2
 8007550:	e7f0      	b.n	8007534 <__ieee754_sqrt+0x12c>
 8007552:	0064      	lsls	r4, r4, #1
 8007554:	3201      	adds	r2, #1
 8007556:	e7ef      	b.n	8007538 <__ieee754_sqrt+0x130>
 8007558:	4680      	mov	r8, r0
 800755a:	e7bf      	b.n	80074dc <__ieee754_sqrt+0xd4>
 800755c:	7ff00000 	.word	0x7ff00000

08007560 <__kernel_cos>:
 8007560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007568:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800756c:	4680      	mov	r8, r0
 800756e:	460f      	mov	r7, r1
 8007570:	e9cd 2300 	strd	r2, r3, [sp]
 8007574:	da04      	bge.n	8007580 <__kernel_cos+0x20>
 8007576:	f7f9 fa57 	bl	8000a28 <__aeabi_d2iz>
 800757a:	2800      	cmp	r0, #0
 800757c:	f000 8086 	beq.w	800768c <__kernel_cos+0x12c>
 8007580:	4642      	mov	r2, r8
 8007582:	463b      	mov	r3, r7
 8007584:	4640      	mov	r0, r8
 8007586:	4639      	mov	r1, r7
 8007588:	f7f8 ff9e 	bl	80004c8 <__aeabi_dmul>
 800758c:	2200      	movs	r2, #0
 800758e:	4b4e      	ldr	r3, [pc, #312]	; (80076c8 <__kernel_cos+0x168>)
 8007590:	4604      	mov	r4, r0
 8007592:	460d      	mov	r5, r1
 8007594:	f7f8 ff98 	bl	80004c8 <__aeabi_dmul>
 8007598:	a33f      	add	r3, pc, #252	; (adr r3, 8007698 <__kernel_cos+0x138>)
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	4682      	mov	sl, r0
 80075a0:	468b      	mov	fp, r1
 80075a2:	4620      	mov	r0, r4
 80075a4:	4629      	mov	r1, r5
 80075a6:	f7f8 ff8f 	bl	80004c8 <__aeabi_dmul>
 80075aa:	a33d      	add	r3, pc, #244	; (adr r3, 80076a0 <__kernel_cos+0x140>)
 80075ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b0:	f7f8 fdd4 	bl	800015c <__adddf3>
 80075b4:	4622      	mov	r2, r4
 80075b6:	462b      	mov	r3, r5
 80075b8:	f7f8 ff86 	bl	80004c8 <__aeabi_dmul>
 80075bc:	a33a      	add	r3, pc, #232	; (adr r3, 80076a8 <__kernel_cos+0x148>)
 80075be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c2:	f7f8 fdc9 	bl	8000158 <__aeabi_dsub>
 80075c6:	4622      	mov	r2, r4
 80075c8:	462b      	mov	r3, r5
 80075ca:	f7f8 ff7d 	bl	80004c8 <__aeabi_dmul>
 80075ce:	a338      	add	r3, pc, #224	; (adr r3, 80076b0 <__kernel_cos+0x150>)
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f7f8 fdc2 	bl	800015c <__adddf3>
 80075d8:	4622      	mov	r2, r4
 80075da:	462b      	mov	r3, r5
 80075dc:	f7f8 ff74 	bl	80004c8 <__aeabi_dmul>
 80075e0:	a335      	add	r3, pc, #212	; (adr r3, 80076b8 <__kernel_cos+0x158>)
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	f7f8 fdb7 	bl	8000158 <__aeabi_dsub>
 80075ea:	4622      	mov	r2, r4
 80075ec:	462b      	mov	r3, r5
 80075ee:	f7f8 ff6b 	bl	80004c8 <__aeabi_dmul>
 80075f2:	a333      	add	r3, pc, #204	; (adr r3, 80076c0 <__kernel_cos+0x160>)
 80075f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f8:	f7f8 fdb0 	bl	800015c <__adddf3>
 80075fc:	4622      	mov	r2, r4
 80075fe:	462b      	mov	r3, r5
 8007600:	f7f8 ff62 	bl	80004c8 <__aeabi_dmul>
 8007604:	4622      	mov	r2, r4
 8007606:	462b      	mov	r3, r5
 8007608:	f7f8 ff5e 	bl	80004c8 <__aeabi_dmul>
 800760c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007610:	4604      	mov	r4, r0
 8007612:	460d      	mov	r5, r1
 8007614:	4640      	mov	r0, r8
 8007616:	4639      	mov	r1, r7
 8007618:	f7f8 ff56 	bl	80004c8 <__aeabi_dmul>
 800761c:	460b      	mov	r3, r1
 800761e:	4602      	mov	r2, r0
 8007620:	4629      	mov	r1, r5
 8007622:	4620      	mov	r0, r4
 8007624:	f7f8 fd98 	bl	8000158 <__aeabi_dsub>
 8007628:	4b28      	ldr	r3, [pc, #160]	; (80076cc <__kernel_cos+0x16c>)
 800762a:	4680      	mov	r8, r0
 800762c:	429e      	cmp	r6, r3
 800762e:	4689      	mov	r9, r1
 8007630:	dc0e      	bgt.n	8007650 <__kernel_cos+0xf0>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	4650      	mov	r0, sl
 8007638:	4659      	mov	r1, fp
 800763a:	f7f8 fd8d 	bl	8000158 <__aeabi_dsub>
 800763e:	4602      	mov	r2, r0
 8007640:	2000      	movs	r0, #0
 8007642:	460b      	mov	r3, r1
 8007644:	4922      	ldr	r1, [pc, #136]	; (80076d0 <__kernel_cos+0x170>)
 8007646:	f7f8 fd87 	bl	8000158 <__aeabi_dsub>
 800764a:	b003      	add	sp, #12
 800764c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007650:	2400      	movs	r4, #0
 8007652:	4b20      	ldr	r3, [pc, #128]	; (80076d4 <__kernel_cos+0x174>)
 8007654:	4622      	mov	r2, r4
 8007656:	429e      	cmp	r6, r3
 8007658:	bfcc      	ite	gt
 800765a:	4d1f      	ldrgt	r5, [pc, #124]	; (80076d8 <__kernel_cos+0x178>)
 800765c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007660:	462b      	mov	r3, r5
 8007662:	2000      	movs	r0, #0
 8007664:	491a      	ldr	r1, [pc, #104]	; (80076d0 <__kernel_cos+0x170>)
 8007666:	f7f8 fd77 	bl	8000158 <__aeabi_dsub>
 800766a:	4622      	mov	r2, r4
 800766c:	4606      	mov	r6, r0
 800766e:	460f      	mov	r7, r1
 8007670:	462b      	mov	r3, r5
 8007672:	4650      	mov	r0, sl
 8007674:	4659      	mov	r1, fp
 8007676:	f7f8 fd6f 	bl	8000158 <__aeabi_dsub>
 800767a:	4642      	mov	r2, r8
 800767c:	464b      	mov	r3, r9
 800767e:	f7f8 fd6b 	bl	8000158 <__aeabi_dsub>
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	4630      	mov	r0, r6
 8007688:	4639      	mov	r1, r7
 800768a:	e7dc      	b.n	8007646 <__kernel_cos+0xe6>
 800768c:	2000      	movs	r0, #0
 800768e:	4910      	ldr	r1, [pc, #64]	; (80076d0 <__kernel_cos+0x170>)
 8007690:	e7db      	b.n	800764a <__kernel_cos+0xea>
 8007692:	bf00      	nop
 8007694:	f3af 8000 	nop.w
 8007698:	be8838d4 	.word	0xbe8838d4
 800769c:	bda8fae9 	.word	0xbda8fae9
 80076a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80076a4:	3e21ee9e 	.word	0x3e21ee9e
 80076a8:	809c52ad 	.word	0x809c52ad
 80076ac:	3e927e4f 	.word	0x3e927e4f
 80076b0:	19cb1590 	.word	0x19cb1590
 80076b4:	3efa01a0 	.word	0x3efa01a0
 80076b8:	16c15177 	.word	0x16c15177
 80076bc:	3f56c16c 	.word	0x3f56c16c
 80076c0:	5555554c 	.word	0x5555554c
 80076c4:	3fa55555 	.word	0x3fa55555
 80076c8:	3fe00000 	.word	0x3fe00000
 80076cc:	3fd33332 	.word	0x3fd33332
 80076d0:	3ff00000 	.word	0x3ff00000
 80076d4:	3fe90000 	.word	0x3fe90000
 80076d8:	3fd20000 	.word	0x3fd20000

080076dc <__kernel_rem_pio2>:
 80076dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80076e4:	9307      	str	r3, [sp, #28]
 80076e6:	9104      	str	r1, [sp, #16]
 80076e8:	4bbf      	ldr	r3, [pc, #764]	; (80079e8 <__kernel_rem_pio2+0x30c>)
 80076ea:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80076ec:	1ed4      	subs	r4, r2, #3
 80076ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076f2:	2500      	movs	r5, #0
 80076f4:	9302      	str	r3, [sp, #8]
 80076f6:	9b07      	ldr	r3, [sp, #28]
 80076f8:	9008      	str	r0, [sp, #32]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	9306      	str	r3, [sp, #24]
 80076fe:	2318      	movs	r3, #24
 8007700:	fb94 f4f3 	sdiv	r4, r4, r3
 8007704:	f06f 0317 	mvn.w	r3, #23
 8007708:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800770c:	fb04 3303 	mla	r3, r4, r3, r3
 8007710:	eb03 0a02 	add.w	sl, r3, r2
 8007714:	9a06      	ldr	r2, [sp, #24]
 8007716:	9b02      	ldr	r3, [sp, #8]
 8007718:	1aa7      	subs	r7, r4, r2
 800771a:	eb03 0802 	add.w	r8, r3, r2
 800771e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007720:	2200      	movs	r2, #0
 8007722:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007726:	2300      	movs	r3, #0
 8007728:	ae1e      	add	r6, sp, #120	; 0x78
 800772a:	4545      	cmp	r5, r8
 800772c:	dd14      	ble.n	8007758 <__kernel_rem_pio2+0x7c>
 800772e:	2600      	movs	r6, #0
 8007730:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8007734:	9b02      	ldr	r3, [sp, #8]
 8007736:	429e      	cmp	r6, r3
 8007738:	dc39      	bgt.n	80077ae <__kernel_rem_pio2+0xd2>
 800773a:	9b08      	ldr	r3, [sp, #32]
 800773c:	f04f 0800 	mov.w	r8, #0
 8007740:	3b08      	subs	r3, #8
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	9b07      	ldr	r3, [sp, #28]
 8007746:	f04f 0900 	mov.w	r9, #0
 800774a:	199d      	adds	r5, r3, r6
 800774c:	ab20      	add	r3, sp, #128	; 0x80
 800774e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007752:	9305      	str	r3, [sp, #20]
 8007754:	2700      	movs	r7, #0
 8007756:	e023      	b.n	80077a0 <__kernel_rem_pio2+0xc4>
 8007758:	42ef      	cmn	r7, r5
 800775a:	d40b      	bmi.n	8007774 <__kernel_rem_pio2+0x98>
 800775c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007760:	e9cd 2300 	strd	r2, r3, [sp]
 8007764:	f7f8 fe46 	bl	80003f4 <__aeabi_i2d>
 8007768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800776c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8007770:	3501      	adds	r5, #1
 8007772:	e7da      	b.n	800772a <__kernel_rem_pio2+0x4e>
 8007774:	4610      	mov	r0, r2
 8007776:	4619      	mov	r1, r3
 8007778:	e7f8      	b.n	800776c <__kernel_rem_pio2+0x90>
 800777a:	9905      	ldr	r1, [sp, #20]
 800777c:	9d00      	ldr	r5, [sp, #0]
 800777e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007782:	9105      	str	r1, [sp, #20]
 8007784:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8007788:	9500      	str	r5, [sp, #0]
 800778a:	f7f8 fe9d 	bl	80004c8 <__aeabi_dmul>
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	4640      	mov	r0, r8
 8007794:	4649      	mov	r1, r9
 8007796:	f7f8 fce1 	bl	800015c <__adddf3>
 800779a:	4680      	mov	r8, r0
 800779c:	4689      	mov	r9, r1
 800779e:	3701      	adds	r7, #1
 80077a0:	9b06      	ldr	r3, [sp, #24]
 80077a2:	429f      	cmp	r7, r3
 80077a4:	dde9      	ble.n	800777a <__kernel_rem_pio2+0x9e>
 80077a6:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80077aa:	3601      	adds	r6, #1
 80077ac:	e7c2      	b.n	8007734 <__kernel_rem_pio2+0x58>
 80077ae:	9b02      	ldr	r3, [sp, #8]
 80077b0:	aa0c      	add	r2, sp, #48	; 0x30
 80077b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80077b8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80077ba:	9f02      	ldr	r7, [sp, #8]
 80077bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80077c0:	930a      	str	r3, [sp, #40]	; 0x28
 80077c2:	2600      	movs	r6, #0
 80077c4:	ab98      	add	r3, sp, #608	; 0x260
 80077c6:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 80077ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077d2:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80077d6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80077da:	ab98      	add	r3, sp, #608	; 0x260
 80077dc:	445b      	add	r3, fp
 80077de:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 80077e2:	1bbb      	subs	r3, r7, r6
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	dc71      	bgt.n	80078cc <__kernel_rem_pio2+0x1f0>
 80077e8:	4652      	mov	r2, sl
 80077ea:	4640      	mov	r0, r8
 80077ec:	4649      	mov	r1, r9
 80077ee:	f000 fbff 	bl	8007ff0 <scalbn>
 80077f2:	2200      	movs	r2, #0
 80077f4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80077f8:	4604      	mov	r4, r0
 80077fa:	460d      	mov	r5, r1
 80077fc:	f7f8 fe64 	bl	80004c8 <__aeabi_dmul>
 8007800:	f000 fb6e 	bl	8007ee0 <floor>
 8007804:	2200      	movs	r2, #0
 8007806:	4b79      	ldr	r3, [pc, #484]	; (80079ec <__kernel_rem_pio2+0x310>)
 8007808:	f7f8 fe5e 	bl	80004c8 <__aeabi_dmul>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4620      	mov	r0, r4
 8007812:	4629      	mov	r1, r5
 8007814:	f7f8 fca0 	bl	8000158 <__aeabi_dsub>
 8007818:	460d      	mov	r5, r1
 800781a:	4604      	mov	r4, r0
 800781c:	f7f9 f904 	bl	8000a28 <__aeabi_d2iz>
 8007820:	9005      	str	r0, [sp, #20]
 8007822:	f7f8 fde7 	bl	80003f4 <__aeabi_i2d>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4620      	mov	r0, r4
 800782c:	4629      	mov	r1, r5
 800782e:	f7f8 fc93 	bl	8000158 <__aeabi_dsub>
 8007832:	f1ba 0f00 	cmp.w	sl, #0
 8007836:	4680      	mov	r8, r0
 8007838:	4689      	mov	r9, r1
 800783a:	dd6c      	ble.n	8007916 <__kernel_rem_pio2+0x23a>
 800783c:	1e7a      	subs	r2, r7, #1
 800783e:	ab0c      	add	r3, sp, #48	; 0x30
 8007840:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007844:	f1ca 0118 	rsb	r1, sl, #24
 8007848:	9c05      	ldr	r4, [sp, #20]
 800784a:	fa40 f301 	asr.w	r3, r0, r1
 800784e:	441c      	add	r4, r3
 8007850:	408b      	lsls	r3, r1
 8007852:	1ac0      	subs	r0, r0, r3
 8007854:	ab0c      	add	r3, sp, #48	; 0x30
 8007856:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800785a:	f1ca 0317 	rsb	r3, sl, #23
 800785e:	9405      	str	r4, [sp, #20]
 8007860:	fa40 f303 	asr.w	r3, r0, r3
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	9b00      	ldr	r3, [sp, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	dd62      	ble.n	8007932 <__kernel_rem_pio2+0x256>
 800786c:	2200      	movs	r2, #0
 800786e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007872:	4614      	mov	r4, r2
 8007874:	9b05      	ldr	r3, [sp, #20]
 8007876:	3301      	adds	r3, #1
 8007878:	9305      	str	r3, [sp, #20]
 800787a:	4297      	cmp	r7, r2
 800787c:	f300 809f 	bgt.w	80079be <__kernel_rem_pio2+0x2e2>
 8007880:	f1ba 0f00 	cmp.w	sl, #0
 8007884:	dd07      	ble.n	8007896 <__kernel_rem_pio2+0x1ba>
 8007886:	f1ba 0f01 	cmp.w	sl, #1
 800788a:	f000 80bb 	beq.w	8007a04 <__kernel_rem_pio2+0x328>
 800788e:	f1ba 0f02 	cmp.w	sl, #2
 8007892:	f000 80c1 	beq.w	8007a18 <__kernel_rem_pio2+0x33c>
 8007896:	9b00      	ldr	r3, [sp, #0]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d14a      	bne.n	8007932 <__kernel_rem_pio2+0x256>
 800789c:	4642      	mov	r2, r8
 800789e:	464b      	mov	r3, r9
 80078a0:	2000      	movs	r0, #0
 80078a2:	4953      	ldr	r1, [pc, #332]	; (80079f0 <__kernel_rem_pio2+0x314>)
 80078a4:	f7f8 fc58 	bl	8000158 <__aeabi_dsub>
 80078a8:	4680      	mov	r8, r0
 80078aa:	4689      	mov	r9, r1
 80078ac:	2c00      	cmp	r4, #0
 80078ae:	d040      	beq.n	8007932 <__kernel_rem_pio2+0x256>
 80078b0:	4652      	mov	r2, sl
 80078b2:	2000      	movs	r0, #0
 80078b4:	494e      	ldr	r1, [pc, #312]	; (80079f0 <__kernel_rem_pio2+0x314>)
 80078b6:	f000 fb9b 	bl	8007ff0 <scalbn>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4640      	mov	r0, r8
 80078c0:	4649      	mov	r1, r9
 80078c2:	f7f8 fc49 	bl	8000158 <__aeabi_dsub>
 80078c6:	4680      	mov	r8, r0
 80078c8:	4689      	mov	r9, r1
 80078ca:	e032      	b.n	8007932 <__kernel_rem_pio2+0x256>
 80078cc:	2200      	movs	r2, #0
 80078ce:	4b49      	ldr	r3, [pc, #292]	; (80079f4 <__kernel_rem_pio2+0x318>)
 80078d0:	4640      	mov	r0, r8
 80078d2:	4649      	mov	r1, r9
 80078d4:	f7f8 fdf8 	bl	80004c8 <__aeabi_dmul>
 80078d8:	f7f9 f8a6 	bl	8000a28 <__aeabi_d2iz>
 80078dc:	f7f8 fd8a 	bl	80003f4 <__aeabi_i2d>
 80078e0:	2200      	movs	r2, #0
 80078e2:	4b45      	ldr	r3, [pc, #276]	; (80079f8 <__kernel_rem_pio2+0x31c>)
 80078e4:	e9cd 0100 	strd	r0, r1, [sp]
 80078e8:	f7f8 fdee 	bl	80004c8 <__aeabi_dmul>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4640      	mov	r0, r8
 80078f2:	4649      	mov	r1, r9
 80078f4:	f7f8 fc30 	bl	8000158 <__aeabi_dsub>
 80078f8:	f7f9 f896 	bl	8000a28 <__aeabi_d2iz>
 80078fc:	ab0c      	add	r3, sp, #48	; 0x30
 80078fe:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007902:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007906:	e9dd 0100 	ldrd	r0, r1, [sp]
 800790a:	f7f8 fc27 	bl	800015c <__adddf3>
 800790e:	3601      	adds	r6, #1
 8007910:	4680      	mov	r8, r0
 8007912:	4689      	mov	r9, r1
 8007914:	e765      	b.n	80077e2 <__kernel_rem_pio2+0x106>
 8007916:	d105      	bne.n	8007924 <__kernel_rem_pio2+0x248>
 8007918:	1e7b      	subs	r3, r7, #1
 800791a:	aa0c      	add	r2, sp, #48	; 0x30
 800791c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007920:	15c3      	asrs	r3, r0, #23
 8007922:	e79f      	b.n	8007864 <__kernel_rem_pio2+0x188>
 8007924:	2200      	movs	r2, #0
 8007926:	4b35      	ldr	r3, [pc, #212]	; (80079fc <__kernel_rem_pio2+0x320>)
 8007928:	f7f9 f854 	bl	80009d4 <__aeabi_dcmpge>
 800792c:	2800      	cmp	r0, #0
 800792e:	d143      	bne.n	80079b8 <__kernel_rem_pio2+0x2dc>
 8007930:	9000      	str	r0, [sp, #0]
 8007932:	2200      	movs	r2, #0
 8007934:	2300      	movs	r3, #0
 8007936:	4640      	mov	r0, r8
 8007938:	4649      	mov	r1, r9
 800793a:	f7f9 f82d 	bl	8000998 <__aeabi_dcmpeq>
 800793e:	2800      	cmp	r0, #0
 8007940:	f000 80c3 	beq.w	8007aca <__kernel_rem_pio2+0x3ee>
 8007944:	1e7c      	subs	r4, r7, #1
 8007946:	4623      	mov	r3, r4
 8007948:	2200      	movs	r2, #0
 800794a:	9902      	ldr	r1, [sp, #8]
 800794c:	428b      	cmp	r3, r1
 800794e:	da6a      	bge.n	8007a26 <__kernel_rem_pio2+0x34a>
 8007950:	2a00      	cmp	r2, #0
 8007952:	f000 8084 	beq.w	8007a5e <__kernel_rem_pio2+0x382>
 8007956:	ab0c      	add	r3, sp, #48	; 0x30
 8007958:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800795c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 80b0 	beq.w	8007ac6 <__kernel_rem_pio2+0x3ea>
 8007966:	4652      	mov	r2, sl
 8007968:	2000      	movs	r0, #0
 800796a:	4921      	ldr	r1, [pc, #132]	; (80079f0 <__kernel_rem_pio2+0x314>)
 800796c:	f000 fb40 	bl	8007ff0 <scalbn>
 8007970:	4625      	mov	r5, r4
 8007972:	4606      	mov	r6, r0
 8007974:	460f      	mov	r7, r1
 8007976:	f04f 0a00 	mov.w	sl, #0
 800797a:	00e3      	lsls	r3, r4, #3
 800797c:	aa98      	add	r2, sp, #608	; 0x260
 800797e:	eb02 0803 	add.w	r8, r2, r3
 8007982:	f8df b070 	ldr.w	fp, [pc, #112]	; 80079f4 <__kernel_rem_pio2+0x318>
 8007986:	9306      	str	r3, [sp, #24]
 8007988:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800798c:	2d00      	cmp	r5, #0
 800798e:	f280 80d2 	bge.w	8007b36 <__kernel_rem_pio2+0x45a>
 8007992:	2500      	movs	r5, #0
 8007994:	9a06      	ldr	r2, [sp, #24]
 8007996:	ab98      	add	r3, sp, #608	; 0x260
 8007998:	189e      	adds	r6, r3, r2
 800799a:	3ea8      	subs	r6, #168	; 0xa8
 800799c:	1b63      	subs	r3, r4, r5
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f2c0 80f9 	blt.w	8007b96 <__kernel_rem_pio2+0x4ba>
 80079a4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8007a00 <__kernel_rem_pio2+0x324>
 80079a8:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 80079ac:	f04f 0a00 	mov.w	sl, #0
 80079b0:	f04f 0b00 	mov.w	fp, #0
 80079b4:	2700      	movs	r7, #0
 80079b6:	e0e2      	b.n	8007b7e <__kernel_rem_pio2+0x4a2>
 80079b8:	2302      	movs	r3, #2
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	e756      	b.n	800786c <__kernel_rem_pio2+0x190>
 80079be:	ab0c      	add	r3, sp, #48	; 0x30
 80079c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c4:	b94c      	cbnz	r4, 80079da <__kernel_rem_pio2+0x2fe>
 80079c6:	b12b      	cbz	r3, 80079d4 <__kernel_rem_pio2+0x2f8>
 80079c8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80079cc:	a80c      	add	r0, sp, #48	; 0x30
 80079ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80079d2:	2301      	movs	r3, #1
 80079d4:	3201      	adds	r2, #1
 80079d6:	461c      	mov	r4, r3
 80079d8:	e74f      	b.n	800787a <__kernel_rem_pio2+0x19e>
 80079da:	1acb      	subs	r3, r1, r3
 80079dc:	a80c      	add	r0, sp, #48	; 0x30
 80079de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80079e2:	4623      	mov	r3, r4
 80079e4:	e7f6      	b.n	80079d4 <__kernel_rem_pio2+0x2f8>
 80079e6:	bf00      	nop
 80079e8:	08008348 	.word	0x08008348
 80079ec:	40200000 	.word	0x40200000
 80079f0:	3ff00000 	.word	0x3ff00000
 80079f4:	3e700000 	.word	0x3e700000
 80079f8:	41700000 	.word	0x41700000
 80079fc:	3fe00000 	.word	0x3fe00000
 8007a00:	08008300 	.word	0x08008300
 8007a04:	1e7a      	subs	r2, r7, #1
 8007a06:	ab0c      	add	r3, sp, #48	; 0x30
 8007a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007a10:	a90c      	add	r1, sp, #48	; 0x30
 8007a12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007a16:	e73e      	b.n	8007896 <__kernel_rem_pio2+0x1ba>
 8007a18:	1e7a      	subs	r2, r7, #1
 8007a1a:	ab0c      	add	r3, sp, #48	; 0x30
 8007a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007a24:	e7f4      	b.n	8007a10 <__kernel_rem_pio2+0x334>
 8007a26:	a90c      	add	r1, sp, #48	; 0x30
 8007a28:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	e78b      	b.n	800794a <__kernel_rem_pio2+0x26e>
 8007a32:	3401      	adds	r4, #1
 8007a34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007a38:	2a00      	cmp	r2, #0
 8007a3a:	d0fa      	beq.n	8007a32 <__kernel_rem_pio2+0x356>
 8007a3c:	ab98      	add	r3, sp, #608	; 0x260
 8007a3e:	449b      	add	fp, r3
 8007a40:	9b07      	ldr	r3, [sp, #28]
 8007a42:	1c7e      	adds	r6, r7, #1
 8007a44:	19dd      	adds	r5, r3, r7
 8007a46:	ab98      	add	r3, sp, #608	; 0x260
 8007a48:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007a4c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8007a50:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8007a54:	443c      	add	r4, r7
 8007a56:	42b4      	cmp	r4, r6
 8007a58:	da04      	bge.n	8007a64 <__kernel_rem_pio2+0x388>
 8007a5a:	4627      	mov	r7, r4
 8007a5c:	e6b1      	b.n	80077c2 <__kernel_rem_pio2+0xe6>
 8007a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a60:	2401      	movs	r4, #1
 8007a62:	e7e7      	b.n	8007a34 <__kernel_rem_pio2+0x358>
 8007a64:	f105 0308 	add.w	r3, r5, #8
 8007a68:	9309      	str	r3, [sp, #36]	; 0x24
 8007a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a6c:	2700      	movs	r7, #0
 8007a6e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007a72:	f7f8 fcbf 	bl	80003f4 <__aeabi_i2d>
 8007a76:	f04f 0800 	mov.w	r8, #0
 8007a7a:	f04f 0900 	mov.w	r9, #0
 8007a7e:	9b08      	ldr	r3, [sp, #32]
 8007a80:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007a84:	3b08      	subs	r3, #8
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	f105 0310 	add.w	r3, r5, #16
 8007a8c:	9305      	str	r3, [sp, #20]
 8007a8e:	9b06      	ldr	r3, [sp, #24]
 8007a90:	429f      	cmp	r7, r3
 8007a92:	dd04      	ble.n	8007a9e <__kernel_rem_pio2+0x3c2>
 8007a94:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8007a98:	3601      	adds	r6, #1
 8007a9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a9c:	e7db      	b.n	8007a56 <__kernel_rem_pio2+0x37a>
 8007a9e:	9905      	ldr	r1, [sp, #20]
 8007aa0:	9d00      	ldr	r5, [sp, #0]
 8007aa2:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007aa6:	9105      	str	r1, [sp, #20]
 8007aa8:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8007aac:	9500      	str	r5, [sp, #0]
 8007aae:	f7f8 fd0b 	bl	80004c8 <__aeabi_dmul>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	4649      	mov	r1, r9
 8007aba:	f7f8 fb4f 	bl	800015c <__adddf3>
 8007abe:	3701      	adds	r7, #1
 8007ac0:	4680      	mov	r8, r0
 8007ac2:	4689      	mov	r9, r1
 8007ac4:	e7e3      	b.n	8007a8e <__kernel_rem_pio2+0x3b2>
 8007ac6:	3c01      	subs	r4, #1
 8007ac8:	e745      	b.n	8007956 <__kernel_rem_pio2+0x27a>
 8007aca:	f1ca 0200 	rsb	r2, sl, #0
 8007ace:	4640      	mov	r0, r8
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	f000 fa8d 	bl	8007ff0 <scalbn>
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	4ba3      	ldr	r3, [pc, #652]	; (8007d68 <__kernel_rem_pio2+0x68c>)
 8007ada:	4604      	mov	r4, r0
 8007adc:	460d      	mov	r5, r1
 8007ade:	f7f8 ff79 	bl	80009d4 <__aeabi_dcmpge>
 8007ae2:	b1f8      	cbz	r0, 8007b24 <__kernel_rem_pio2+0x448>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	4ba1      	ldr	r3, [pc, #644]	; (8007d6c <__kernel_rem_pio2+0x690>)
 8007ae8:	4620      	mov	r0, r4
 8007aea:	4629      	mov	r1, r5
 8007aec:	f7f8 fcec 	bl	80004c8 <__aeabi_dmul>
 8007af0:	f7f8 ff9a 	bl	8000a28 <__aeabi_d2iz>
 8007af4:	4606      	mov	r6, r0
 8007af6:	f7f8 fc7d 	bl	80003f4 <__aeabi_i2d>
 8007afa:	2200      	movs	r2, #0
 8007afc:	4b9a      	ldr	r3, [pc, #616]	; (8007d68 <__kernel_rem_pio2+0x68c>)
 8007afe:	f7f8 fce3 	bl	80004c8 <__aeabi_dmul>
 8007b02:	460b      	mov	r3, r1
 8007b04:	4602      	mov	r2, r0
 8007b06:	4629      	mov	r1, r5
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f7f8 fb25 	bl	8000158 <__aeabi_dsub>
 8007b0e:	f7f8 ff8b 	bl	8000a28 <__aeabi_d2iz>
 8007b12:	1c7c      	adds	r4, r7, #1
 8007b14:	ab0c      	add	r3, sp, #48	; 0x30
 8007b16:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007b1a:	f10a 0a18 	add.w	sl, sl, #24
 8007b1e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8007b22:	e720      	b.n	8007966 <__kernel_rem_pio2+0x28a>
 8007b24:	4620      	mov	r0, r4
 8007b26:	4629      	mov	r1, r5
 8007b28:	f7f8 ff7e 	bl	8000a28 <__aeabi_d2iz>
 8007b2c:	ab0c      	add	r3, sp, #48	; 0x30
 8007b2e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007b32:	463c      	mov	r4, r7
 8007b34:	e717      	b.n	8007966 <__kernel_rem_pio2+0x28a>
 8007b36:	ab0c      	add	r3, sp, #48	; 0x30
 8007b38:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b3c:	f7f8 fc5a 	bl	80003f4 <__aeabi_i2d>
 8007b40:	4632      	mov	r2, r6
 8007b42:	463b      	mov	r3, r7
 8007b44:	f7f8 fcc0 	bl	80004c8 <__aeabi_dmul>
 8007b48:	4652      	mov	r2, sl
 8007b4a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007b4e:	465b      	mov	r3, fp
 8007b50:	4630      	mov	r0, r6
 8007b52:	4639      	mov	r1, r7
 8007b54:	f7f8 fcb8 	bl	80004c8 <__aeabi_dmul>
 8007b58:	3d01      	subs	r5, #1
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	460f      	mov	r7, r1
 8007b5e:	e715      	b.n	800798c <__kernel_rem_pio2+0x2b0>
 8007b60:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8007b64:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8007b68:	f7f8 fcae 	bl	80004c8 <__aeabi_dmul>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4650      	mov	r0, sl
 8007b72:	4659      	mov	r1, fp
 8007b74:	f7f8 faf2 	bl	800015c <__adddf3>
 8007b78:	4682      	mov	sl, r0
 8007b7a:	468b      	mov	fp, r1
 8007b7c:	3701      	adds	r7, #1
 8007b7e:	9b02      	ldr	r3, [sp, #8]
 8007b80:	429f      	cmp	r7, r3
 8007b82:	dc01      	bgt.n	8007b88 <__kernel_rem_pio2+0x4ac>
 8007b84:	42bd      	cmp	r5, r7
 8007b86:	daeb      	bge.n	8007b60 <__kernel_rem_pio2+0x484>
 8007b88:	ab48      	add	r3, sp, #288	; 0x120
 8007b8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007b8e:	e9c3 ab00 	strd	sl, fp, [r3]
 8007b92:	3501      	adds	r5, #1
 8007b94:	e702      	b.n	800799c <__kernel_rem_pio2+0x2c0>
 8007b96:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007b98:	2b03      	cmp	r3, #3
 8007b9a:	d86c      	bhi.n	8007c76 <__kernel_rem_pio2+0x59a>
 8007b9c:	e8df f003 	tbb	[pc, r3]
 8007ba0:	022f2f59 	.word	0x022f2f59
 8007ba4:	9a06      	ldr	r2, [sp, #24]
 8007ba6:	ab48      	add	r3, sp, #288	; 0x120
 8007ba8:	189d      	adds	r5, r3, r2
 8007baa:	46aa      	mov	sl, r5
 8007bac:	46a3      	mov	fp, r4
 8007bae:	f1bb 0f00 	cmp.w	fp, #0
 8007bb2:	f300 8087 	bgt.w	8007cc4 <__kernel_rem_pio2+0x5e8>
 8007bb6:	46a2      	mov	sl, r4
 8007bb8:	f1ba 0f01 	cmp.w	sl, #1
 8007bbc:	f300 809f 	bgt.w	8007cfe <__kernel_rem_pio2+0x622>
 8007bc0:	2700      	movs	r7, #0
 8007bc2:	463e      	mov	r6, r7
 8007bc4:	9d06      	ldr	r5, [sp, #24]
 8007bc6:	ab48      	add	r3, sp, #288	; 0x120
 8007bc8:	3508      	adds	r5, #8
 8007bca:	441d      	add	r5, r3
 8007bcc:	2c01      	cmp	r4, #1
 8007bce:	f300 80b3 	bgt.w	8007d38 <__kernel_rem_pio2+0x65c>
 8007bd2:	9b00      	ldr	r3, [sp, #0]
 8007bd4:	9d48      	ldr	r5, [sp, #288]	; 0x120
 8007bd6:	9849      	ldr	r0, [sp, #292]	; 0x124
 8007bd8:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 8007bda:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f040 80b5 	bne.w	8007d4c <__kernel_rem_pio2+0x670>
 8007be2:	4603      	mov	r3, r0
 8007be4:	462a      	mov	r2, r5
 8007be6:	9804      	ldr	r0, [sp, #16]
 8007be8:	e9c0 2300 	strd	r2, r3, [r0]
 8007bec:	4622      	mov	r2, r4
 8007bee:	460b      	mov	r3, r1
 8007bf0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007bf4:	463a      	mov	r2, r7
 8007bf6:	4633      	mov	r3, r6
 8007bf8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007bfc:	e03b      	b.n	8007c76 <__kernel_rem_pio2+0x59a>
 8007bfe:	f04f 0c00 	mov.w	ip, #0
 8007c02:	4626      	mov	r6, r4
 8007c04:	4667      	mov	r7, ip
 8007c06:	9d06      	ldr	r5, [sp, #24]
 8007c08:	ab48      	add	r3, sp, #288	; 0x120
 8007c0a:	3508      	adds	r5, #8
 8007c0c:	441d      	add	r5, r3
 8007c0e:	2e00      	cmp	r6, #0
 8007c10:	da42      	bge.n	8007c98 <__kernel_rem_pio2+0x5bc>
 8007c12:	9b00      	ldr	r3, [sp, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d049      	beq.n	8007cac <__kernel_rem_pio2+0x5d0>
 8007c18:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8007c1c:	4662      	mov	r2, ip
 8007c1e:	460b      	mov	r3, r1
 8007c20:	9904      	ldr	r1, [sp, #16]
 8007c22:	2601      	movs	r6, #1
 8007c24:	e9c1 2300 	strd	r2, r3, [r1]
 8007c28:	a948      	add	r1, sp, #288	; 0x120
 8007c2a:	463b      	mov	r3, r7
 8007c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c30:	f7f8 fa92 	bl	8000158 <__aeabi_dsub>
 8007c34:	4684      	mov	ip, r0
 8007c36:	460f      	mov	r7, r1
 8007c38:	ad48      	add	r5, sp, #288	; 0x120
 8007c3a:	42b4      	cmp	r4, r6
 8007c3c:	da38      	bge.n	8007cb0 <__kernel_rem_pio2+0x5d4>
 8007c3e:	9b00      	ldr	r3, [sp, #0]
 8007c40:	b10b      	cbz	r3, 8007c46 <__kernel_rem_pio2+0x56a>
 8007c42:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007c46:	4662      	mov	r2, ip
 8007c48:	463b      	mov	r3, r7
 8007c4a:	9904      	ldr	r1, [sp, #16]
 8007c4c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007c50:	e011      	b.n	8007c76 <__kernel_rem_pio2+0x59a>
 8007c52:	2700      	movs	r7, #0
 8007c54:	463d      	mov	r5, r7
 8007c56:	9b06      	ldr	r3, [sp, #24]
 8007c58:	aa98      	add	r2, sp, #608	; 0x260
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8007c60:	2c00      	cmp	r4, #0
 8007c62:	da0f      	bge.n	8007c84 <__kernel_rem_pio2+0x5a8>
 8007c64:	9b00      	ldr	r3, [sp, #0]
 8007c66:	b10b      	cbz	r3, 8007c6c <__kernel_rem_pio2+0x590>
 8007c68:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8007c6c:	463a      	mov	r2, r7
 8007c6e:	462b      	mov	r3, r5
 8007c70:	9904      	ldr	r1, [sp, #16]
 8007c72:	e9c1 2300 	strd	r2, r3, [r1]
 8007c76:	9b05      	ldr	r3, [sp, #20]
 8007c78:	f003 0007 	and.w	r0, r3, #7
 8007c7c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c84:	4638      	mov	r0, r7
 8007c86:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	f7f8 fa66 	bl	800015c <__adddf3>
 8007c90:	3c01      	subs	r4, #1
 8007c92:	4607      	mov	r7, r0
 8007c94:	460d      	mov	r5, r1
 8007c96:	e7e3      	b.n	8007c60 <__kernel_rem_pio2+0x584>
 8007c98:	4660      	mov	r0, ip
 8007c9a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	f7f8 fa5c 	bl	800015c <__adddf3>
 8007ca4:	3e01      	subs	r6, #1
 8007ca6:	4684      	mov	ip, r0
 8007ca8:	460f      	mov	r7, r1
 8007caa:	e7b0      	b.n	8007c0e <__kernel_rem_pio2+0x532>
 8007cac:	4639      	mov	r1, r7
 8007cae:	e7b5      	b.n	8007c1c <__kernel_rem_pio2+0x540>
 8007cb0:	4660      	mov	r0, ip
 8007cb2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	f7f8 fa50 	bl	800015c <__adddf3>
 8007cbc:	3601      	adds	r6, #1
 8007cbe:	4684      	mov	ip, r0
 8007cc0:	460f      	mov	r7, r1
 8007cc2:	e7ba      	b.n	8007c3a <__kernel_rem_pio2+0x55e>
 8007cc4:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8007cc8:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8007ccc:	4640      	mov	r0, r8
 8007cce:	4649      	mov	r1, r9
 8007cd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cd4:	f7f8 fa42 	bl	800015c <__adddf3>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4606      	mov	r6, r0
 8007cde:	460f      	mov	r7, r1
 8007ce0:	4640      	mov	r0, r8
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	f7f8 fa38 	bl	8000158 <__aeabi_dsub>
 8007ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cec:	f7f8 fa36 	bl	800015c <__adddf3>
 8007cf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cf4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007cf8:	e9ca 6700 	strd	r6, r7, [sl]
 8007cfc:	e757      	b.n	8007bae <__kernel_rem_pio2+0x4d2>
 8007cfe:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 8007d02:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8007d06:	4630      	mov	r0, r6
 8007d08:	4639      	mov	r1, r7
 8007d0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d0e:	f7f8 fa25 	bl	800015c <__adddf3>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	4680      	mov	r8, r0
 8007d18:	4689      	mov	r9, r1
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	f7f8 fa1b 	bl	8000158 <__aeabi_dsub>
 8007d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d26:	f7f8 fa19 	bl	800015c <__adddf3>
 8007d2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d2e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007d32:	e9c5 8900 	strd	r8, r9, [r5]
 8007d36:	e73f      	b.n	8007bb8 <__kernel_rem_pio2+0x4dc>
 8007d38:	4638      	mov	r0, r7
 8007d3a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007d3e:	4631      	mov	r1, r6
 8007d40:	f7f8 fa0c 	bl	800015c <__adddf3>
 8007d44:	3c01      	subs	r4, #1
 8007d46:	4607      	mov	r7, r0
 8007d48:	460e      	mov	r6, r1
 8007d4a:	e73f      	b.n	8007bcc <__kernel_rem_pio2+0x4f0>
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007d52:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007d56:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8007d5a:	601d      	str	r5, [r3, #0]
 8007d5c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8007d60:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8007d64:	615e      	str	r6, [r3, #20]
 8007d66:	e786      	b.n	8007c76 <__kernel_rem_pio2+0x59a>
 8007d68:	41700000 	.word	0x41700000
 8007d6c:	3e700000 	.word	0x3e700000

08007d70 <__kernel_sin>:
 8007d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	b086      	sub	sp, #24
 8007d76:	e9cd 2300 	strd	r2, r3, [sp]
 8007d7a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d7e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007d82:	4682      	mov	sl, r0
 8007d84:	460c      	mov	r4, r1
 8007d86:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007d88:	da03      	bge.n	8007d92 <__kernel_sin+0x22>
 8007d8a:	f7f8 fe4d 	bl	8000a28 <__aeabi_d2iz>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d050      	beq.n	8007e34 <__kernel_sin+0xc4>
 8007d92:	4652      	mov	r2, sl
 8007d94:	4623      	mov	r3, r4
 8007d96:	4650      	mov	r0, sl
 8007d98:	4621      	mov	r1, r4
 8007d9a:	f7f8 fb95 	bl	80004c8 <__aeabi_dmul>
 8007d9e:	4606      	mov	r6, r0
 8007da0:	460f      	mov	r7, r1
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	4650      	mov	r0, sl
 8007da8:	4621      	mov	r1, r4
 8007daa:	f7f8 fb8d 	bl	80004c8 <__aeabi_dmul>
 8007dae:	a33e      	add	r3, pc, #248	; (adr r3, 8007ea8 <__kernel_sin+0x138>)
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	4680      	mov	r8, r0
 8007db6:	4689      	mov	r9, r1
 8007db8:	4630      	mov	r0, r6
 8007dba:	4639      	mov	r1, r7
 8007dbc:	f7f8 fb84 	bl	80004c8 <__aeabi_dmul>
 8007dc0:	a33b      	add	r3, pc, #236	; (adr r3, 8007eb0 <__kernel_sin+0x140>)
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	f7f8 f9c7 	bl	8000158 <__aeabi_dsub>
 8007dca:	4632      	mov	r2, r6
 8007dcc:	463b      	mov	r3, r7
 8007dce:	f7f8 fb7b 	bl	80004c8 <__aeabi_dmul>
 8007dd2:	a339      	add	r3, pc, #228	; (adr r3, 8007eb8 <__kernel_sin+0x148>)
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f7f8 f9c0 	bl	800015c <__adddf3>
 8007ddc:	4632      	mov	r2, r6
 8007dde:	463b      	mov	r3, r7
 8007de0:	f7f8 fb72 	bl	80004c8 <__aeabi_dmul>
 8007de4:	a336      	add	r3, pc, #216	; (adr r3, 8007ec0 <__kernel_sin+0x150>)
 8007de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dea:	f7f8 f9b5 	bl	8000158 <__aeabi_dsub>
 8007dee:	4632      	mov	r2, r6
 8007df0:	463b      	mov	r3, r7
 8007df2:	f7f8 fb69 	bl	80004c8 <__aeabi_dmul>
 8007df6:	a334      	add	r3, pc, #208	; (adr r3, 8007ec8 <__kernel_sin+0x158>)
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	f7f8 f9ae 	bl	800015c <__adddf3>
 8007e00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e04:	b9dd      	cbnz	r5, 8007e3e <__kernel_sin+0xce>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	f7f8 fb5b 	bl	80004c8 <__aeabi_dmul>
 8007e12:	a32f      	add	r3, pc, #188	; (adr r3, 8007ed0 <__kernel_sin+0x160>)
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	f7f8 f99e 	bl	8000158 <__aeabi_dsub>
 8007e1c:	4642      	mov	r2, r8
 8007e1e:	464b      	mov	r3, r9
 8007e20:	f7f8 fb52 	bl	80004c8 <__aeabi_dmul>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	4650      	mov	r0, sl
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	f7f8 f996 	bl	800015c <__adddf3>
 8007e30:	4682      	mov	sl, r0
 8007e32:	460c      	mov	r4, r1
 8007e34:	4650      	mov	r0, sl
 8007e36:	4621      	mov	r1, r4
 8007e38:	b006      	add	sp, #24
 8007e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3e:	2200      	movs	r2, #0
 8007e40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e44:	4b24      	ldr	r3, [pc, #144]	; (8007ed8 <__kernel_sin+0x168>)
 8007e46:	f7f8 fb3f 	bl	80004c8 <__aeabi_dmul>
 8007e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e52:	4640      	mov	r0, r8
 8007e54:	4649      	mov	r1, r9
 8007e56:	f7f8 fb37 	bl	80004c8 <__aeabi_dmul>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e62:	f7f8 f979 	bl	8000158 <__aeabi_dsub>
 8007e66:	4632      	mov	r2, r6
 8007e68:	463b      	mov	r3, r7
 8007e6a:	f7f8 fb2d 	bl	80004c8 <__aeabi_dmul>
 8007e6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e72:	f7f8 f971 	bl	8000158 <__aeabi_dsub>
 8007e76:	a316      	add	r3, pc, #88	; (adr r3, 8007ed0 <__kernel_sin+0x160>)
 8007e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7c:	4606      	mov	r6, r0
 8007e7e:	460f      	mov	r7, r1
 8007e80:	4640      	mov	r0, r8
 8007e82:	4649      	mov	r1, r9
 8007e84:	f7f8 fb20 	bl	80004c8 <__aeabi_dmul>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	4639      	mov	r1, r7
 8007e90:	f7f8 f964 	bl	800015c <__adddf3>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	4650      	mov	r0, sl
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	f7f8 f95c 	bl	8000158 <__aeabi_dsub>
 8007ea0:	e7c6      	b.n	8007e30 <__kernel_sin+0xc0>
 8007ea2:	bf00      	nop
 8007ea4:	f3af 8000 	nop.w
 8007ea8:	5acfd57c 	.word	0x5acfd57c
 8007eac:	3de5d93a 	.word	0x3de5d93a
 8007eb0:	8a2b9ceb 	.word	0x8a2b9ceb
 8007eb4:	3e5ae5e6 	.word	0x3e5ae5e6
 8007eb8:	57b1fe7d 	.word	0x57b1fe7d
 8007ebc:	3ec71de3 	.word	0x3ec71de3
 8007ec0:	19c161d5 	.word	0x19c161d5
 8007ec4:	3f2a01a0 	.word	0x3f2a01a0
 8007ec8:	1110f8a6 	.word	0x1110f8a6
 8007ecc:	3f811111 	.word	0x3f811111
 8007ed0:	55555549 	.word	0x55555549
 8007ed4:	3fc55555 	.word	0x3fc55555
 8007ed8:	3fe00000 	.word	0x3fe00000
 8007edc:	00000000 	.word	0x00000000

08007ee0 <floor>:
 8007ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ee4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8007ee8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8007eec:	2e13      	cmp	r6, #19
 8007eee:	4607      	mov	r7, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	dc35      	bgt.n	8007f64 <floor+0x84>
 8007ef8:	2e00      	cmp	r6, #0
 8007efa:	da16      	bge.n	8007f2a <floor+0x4a>
 8007efc:	a336      	add	r3, pc, #216	; (adr r3, 8007fd8 <floor+0xf8>)
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f7f8 f92b 	bl	800015c <__adddf3>
 8007f06:	2200      	movs	r2, #0
 8007f08:	2300      	movs	r3, #0
 8007f0a:	f7f8 fd6d 	bl	80009e8 <__aeabi_dcmpgt>
 8007f0e:	b148      	cbz	r0, 8007f24 <floor+0x44>
 8007f10:	2c00      	cmp	r4, #0
 8007f12:	da5b      	bge.n	8007fcc <floor+0xec>
 8007f14:	2500      	movs	r5, #0
 8007f16:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007f1a:	4a31      	ldr	r2, [pc, #196]	; (8007fe0 <floor+0x100>)
 8007f1c:	433b      	orrs	r3, r7
 8007f1e:	42ab      	cmp	r3, r5
 8007f20:	bf18      	it	ne
 8007f22:	4614      	movne	r4, r2
 8007f24:	4623      	mov	r3, r4
 8007f26:	462f      	mov	r7, r5
 8007f28:	e026      	b.n	8007f78 <floor+0x98>
 8007f2a:	4a2e      	ldr	r2, [pc, #184]	; (8007fe4 <floor+0x104>)
 8007f2c:	fa42 f806 	asr.w	r8, r2, r6
 8007f30:	ea01 0208 	and.w	r2, r1, r8
 8007f34:	4302      	orrs	r2, r0
 8007f36:	d01f      	beq.n	8007f78 <floor+0x98>
 8007f38:	a327      	add	r3, pc, #156	; (adr r3, 8007fd8 <floor+0xf8>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 f90d 	bl	800015c <__adddf3>
 8007f42:	2200      	movs	r2, #0
 8007f44:	2300      	movs	r3, #0
 8007f46:	f7f8 fd4f 	bl	80009e8 <__aeabi_dcmpgt>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d0ea      	beq.n	8007f24 <floor+0x44>
 8007f4e:	2c00      	cmp	r4, #0
 8007f50:	bfbe      	ittt	lt
 8007f52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007f56:	fa43 f606 	asrlt.w	r6, r3, r6
 8007f5a:	19a4      	addlt	r4, r4, r6
 8007f5c:	ea24 0408 	bic.w	r4, r4, r8
 8007f60:	2500      	movs	r5, #0
 8007f62:	e7df      	b.n	8007f24 <floor+0x44>
 8007f64:	2e33      	cmp	r6, #51	; 0x33
 8007f66:	dd0b      	ble.n	8007f80 <floor+0xa0>
 8007f68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007f6c:	d104      	bne.n	8007f78 <floor+0x98>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	f7f8 f8f4 	bl	800015c <__adddf3>
 8007f74:	4607      	mov	r7, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4638      	mov	r0, r7
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f80:	f04f 32ff 	mov.w	r2, #4294967295
 8007f84:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8007f88:	fa22 f808 	lsr.w	r8, r2, r8
 8007f8c:	ea18 0f00 	tst.w	r8, r0
 8007f90:	d0f2      	beq.n	8007f78 <floor+0x98>
 8007f92:	a311      	add	r3, pc, #68	; (adr r3, 8007fd8 <floor+0xf8>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f7f8 f8e0 	bl	800015c <__adddf3>
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f7f8 fd22 	bl	80009e8 <__aeabi_dcmpgt>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d0bd      	beq.n	8007f24 <floor+0x44>
 8007fa8:	2c00      	cmp	r4, #0
 8007faa:	da02      	bge.n	8007fb2 <floor+0xd2>
 8007fac:	2e14      	cmp	r6, #20
 8007fae:	d103      	bne.n	8007fb8 <floor+0xd8>
 8007fb0:	3401      	adds	r4, #1
 8007fb2:	ea25 0508 	bic.w	r5, r5, r8
 8007fb6:	e7b5      	b.n	8007f24 <floor+0x44>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007fbe:	fa03 f606 	lsl.w	r6, r3, r6
 8007fc2:	4435      	add	r5, r6
 8007fc4:	42bd      	cmp	r5, r7
 8007fc6:	bf38      	it	cc
 8007fc8:	18e4      	addcc	r4, r4, r3
 8007fca:	e7f2      	b.n	8007fb2 <floor+0xd2>
 8007fcc:	2500      	movs	r5, #0
 8007fce:	462c      	mov	r4, r5
 8007fd0:	e7a8      	b.n	8007f24 <floor+0x44>
 8007fd2:	bf00      	nop
 8007fd4:	f3af 8000 	nop.w
 8007fd8:	8800759c 	.word	0x8800759c
 8007fdc:	7e37e43c 	.word	0x7e37e43c
 8007fe0:	bff00000 	.word	0xbff00000
 8007fe4:	000fffff 	.word	0x000fffff

08007fe8 <matherr>:
 8007fe8:	2000      	movs	r0, #0
 8007fea:	4770      	bx	lr
 8007fec:	0000      	movs	r0, r0
	...

08007ff0 <scalbn>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	4616      	mov	r6, r2
 8007ff4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	460d      	mov	r5, r1
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	b982      	cbnz	r2, 8008022 <scalbn+0x32>
 8008000:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008004:	4303      	orrs	r3, r0
 8008006:	d034      	beq.n	8008072 <scalbn+0x82>
 8008008:	4b2d      	ldr	r3, [pc, #180]	; (80080c0 <scalbn+0xd0>)
 800800a:	2200      	movs	r2, #0
 800800c:	f7f8 fa5c 	bl	80004c8 <__aeabi_dmul>
 8008010:	4b2c      	ldr	r3, [pc, #176]	; (80080c4 <scalbn+0xd4>)
 8008012:	4604      	mov	r4, r0
 8008014:	429e      	cmp	r6, r3
 8008016:	460d      	mov	r5, r1
 8008018:	da0d      	bge.n	8008036 <scalbn+0x46>
 800801a:	a325      	add	r3, pc, #148	; (adr r3, 80080b0 <scalbn+0xc0>)
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	e01c      	b.n	800805c <scalbn+0x6c>
 8008022:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8008026:	42ba      	cmp	r2, r7
 8008028:	d109      	bne.n	800803e <scalbn+0x4e>
 800802a:	4602      	mov	r2, r0
 800802c:	f7f8 f896 	bl	800015c <__adddf3>
 8008030:	4604      	mov	r4, r0
 8008032:	460d      	mov	r5, r1
 8008034:	e01d      	b.n	8008072 <scalbn+0x82>
 8008036:	460b      	mov	r3, r1
 8008038:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800803c:	3a36      	subs	r2, #54	; 0x36
 800803e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008042:	4432      	add	r2, r6
 8008044:	428a      	cmp	r2, r1
 8008046:	dd0c      	ble.n	8008062 <scalbn+0x72>
 8008048:	4622      	mov	r2, r4
 800804a:	462b      	mov	r3, r5
 800804c:	a11a      	add	r1, pc, #104	; (adr r1, 80080b8 <scalbn+0xc8>)
 800804e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008052:	f000 f83b 	bl	80080cc <copysign>
 8008056:	a318      	add	r3, pc, #96	; (adr r3, 80080b8 <scalbn+0xc8>)
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	f7f8 fa34 	bl	80004c8 <__aeabi_dmul>
 8008060:	e7e6      	b.n	8008030 <scalbn+0x40>
 8008062:	2a00      	cmp	r2, #0
 8008064:	dd08      	ble.n	8008078 <scalbn+0x88>
 8008066:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800806a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800806e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008072:	4620      	mov	r0, r4
 8008074:	4629      	mov	r1, r5
 8008076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008078:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800807c:	da0b      	bge.n	8008096 <scalbn+0xa6>
 800807e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008082:	429e      	cmp	r6, r3
 8008084:	4622      	mov	r2, r4
 8008086:	462b      	mov	r3, r5
 8008088:	dce0      	bgt.n	800804c <scalbn+0x5c>
 800808a:	a109      	add	r1, pc, #36	; (adr r1, 80080b0 <scalbn+0xc0>)
 800808c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008090:	f000 f81c 	bl	80080cc <copysign>
 8008094:	e7c1      	b.n	800801a <scalbn+0x2a>
 8008096:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800809a:	3236      	adds	r2, #54	; 0x36
 800809c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80080a4:	4620      	mov	r0, r4
 80080a6:	4629      	mov	r1, r5
 80080a8:	2200      	movs	r2, #0
 80080aa:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <scalbn+0xd8>)
 80080ac:	e7d6      	b.n	800805c <scalbn+0x6c>
 80080ae:	bf00      	nop
 80080b0:	c2f8f359 	.word	0xc2f8f359
 80080b4:	01a56e1f 	.word	0x01a56e1f
 80080b8:	8800759c 	.word	0x8800759c
 80080bc:	7e37e43c 	.word	0x7e37e43c
 80080c0:	43500000 	.word	0x43500000
 80080c4:	ffff3cb0 	.word	0xffff3cb0
 80080c8:	3c900000 	.word	0x3c900000

080080cc <copysign>:
 80080cc:	b530      	push	{r4, r5, lr}
 80080ce:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80080d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080d6:	ea42 0503 	orr.w	r5, r2, r3
 80080da:	4629      	mov	r1, r5
 80080dc:	bd30      	pop	{r4, r5, pc}
	...

080080e0 <_init>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	bf00      	nop
 80080e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e6:	bc08      	pop	{r3}
 80080e8:	469e      	mov	lr, r3
 80080ea:	4770      	bx	lr

080080ec <_fini>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	bf00      	nop
 80080f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f2:	bc08      	pop	{r3}
 80080f4:	469e      	mov	lr, r3
 80080f6:	4770      	bx	lr
